; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32_eval.o --asm_dir=.\ --list_dir=.\ --depend=.\stm32_eval.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\ -I..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210E_EVAL -I.\RTE\_MainBoardForRTD -I"D:\software install\Keil\ARM\CMSIS\5.1.0\CMSIS\Include" -I"D:\software install\Keil\Keil\STM32F1xx_DFP\2.2.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL --omf_browse=.\stm32_eval.crf ..\..\..\Utilities\STM32_EVAL\stm32_eval.c]
                          THUMB

                          AREA ||i.LM75_LowLevel_DeInit||, CODE, READONLY, ALIGN=2

                  LM75_LowLevel_DeInit PROC
;;;591      */
;;;592    void LM75_LowLevel_DeInit(void)
000000  b538              PUSH     {r3-r5,lr}
;;;593    {
;;;594      GPIO_InitTypeDef  GPIO_InitStructure;
;;;595    
;;;596      /*!< Disable LM75_I2C */
;;;597      I2C_Cmd(LM75_I2C, DISABLE);
000002  4c13              LDR      r4,|L1.80|
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       I2C_Cmd
;;;598      /*!< DeInitializes the LM75_I2C */
;;;599      I2C_DeInit(LM75_I2C);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       I2C_DeInit
;;;600      
;;;601      /*!< LM75_I2C Periph clock disable */
;;;602      RCC_APB1PeriphClockCmd(LM75_I2C_CLK, DISABLE);
000012  2100              MOVS     r1,#0
000014  f44f1000          MOV      r0,#0x200000
000018  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;603        
;;;604      /*!< Configure LM75_I2C pins: SCL */
;;;605      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SCL_PIN;
00001c  2040              MOVS     r0,#0x40
00001e  f8ad0000          STRH     r0,[sp,#0]
;;;606      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000022  2004              MOVS     r0,#4
;;;607      GPIO_Init(LM75_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
000024  4c0b              LDR      r4,|L1.84|
000026  f88d0003          STRB     r0,[sp,#3]            ;606
00002a  4669              MOV      r1,sp
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       GPIO_Init
;;;608    
;;;609      /*!< Configure LM75_I2C pins: SDA */
;;;610      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SDA_PIN;
000032  2080              MOVS     r0,#0x80
000034  f8ad0000          STRH     r0,[sp,#0]
;;;611      GPIO_Init(LM75_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
000038  4669              MOV      r1,sp
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       GPIO_Init
;;;612    
;;;613      /*!< Configure LM75_I2C pin: SMBUS ALERT */
;;;614      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SMBUSALERT_PIN;
000040  2020              MOVS     r0,#0x20
000042  f8ad0000          STRH     r0,[sp,#0]
;;;615      GPIO_Init(LM75_I2C_SMBUSALERT_GPIO_PORT, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       GPIO_Init
;;;616    }
00004e  bd38              POP      {r3-r5,pc}
;;;617    
                          ENDP

                  |L1.80|
                          DCD      0x40005400
                  |L1.84|
                          DCD      0x40010c00

                          AREA ||i.LM75_LowLevel_Init||, CODE, READONLY, ALIGN=2

                  LM75_LowLevel_Init PROC
;;;622      */
;;;623    void LM75_LowLevel_Init(void)
000000  b538              PUSH     {r3-r5,lr}
;;;624    {
;;;625      GPIO_InitTypeDef  GPIO_InitStructure;
;;;626    
;;;627      /*!< LM75_I2C Periph clock enable */
;;;628      RCC_APB1PeriphClockCmd(LM75_I2C_CLK, ENABLE);
000002  2101              MOVS     r1,#1
000004  0548              LSLS     r0,r1,#21
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;629        
;;;630      /*!< LM75_I2C_SCL_GPIO_CLK, LM75_I2C_SDA_GPIO_CLK 
;;;631           and LM75_I2C_SMBUSALERT_GPIO_CLK Periph clock enable */
;;;632      RCC_APB2PeriphClockCmd(LM75_I2C_SCL_GPIO_CLK | LM75_I2C_SDA_GPIO_CLK |
00000a  2101              MOVS     r1,#1
00000c  2008              MOVS     r0,#8
00000e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;633                             LM75_I2C_SMBUSALERT_GPIO_CLK, ENABLE);
;;;634      
;;;635      /*!< Configure LM75_I2C pins: SCL */
;;;636      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SCL_PIN;
000012  2040              MOVS     r0,#0x40
000014  f8ad0000          STRH     r0,[sp,#0]
;;;637      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000018  2003              MOVS     r0,#3
00001a  f88d0002          STRB     r0,[sp,#2]
;;;638      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
00001e  201c              MOVS     r0,#0x1c
;;;639      GPIO_Init(LM75_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
000020  4c0c              LDR      r4,|L2.84|
000022  f88d0003          STRB     r0,[sp,#3]            ;638
000026  4669              MOV      r1,sp
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       GPIO_Init
;;;640    
;;;641      /*!< Configure LM75_I2C pins: SDA */
;;;642      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SDA_PIN;
00002e  2080              MOVS     r0,#0x80
000030  f8ad0000          STRH     r0,[sp,#0]
;;;643      GPIO_Init(LM75_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
000034  4669              MOV      r1,sp
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       GPIO_Init
;;;644    
;;;645      /*!< Configure LM75_I2C pin: SMBUS ALERT */
;;;646      GPIO_InitStructure.GPIO_Pin = LM75_I2C_SMBUSALERT_PIN;
00003c  2020              MOVS     r0,#0x20
00003e  f8ad0000          STRH     r0,[sp,#0]
;;;647      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
000042  2048              MOVS     r0,#0x48
000044  f88d0003          STRB     r0,[sp,#3]
;;;648      GPIO_Init(LM75_I2C_SMBUSALERT_GPIO_PORT, &GPIO_InitStructure); 
000048  4669              MOV      r1,sp
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       GPIO_Init
;;;649    }
000050  bd38              POP      {r3-r5,pc}
;;;650    
                          ENDP

000052  0000              DCW      0x0000
                  |L2.84|
                          DCD      0x40010c00

                          AREA ||i.SD_LowLevel_DMA_RxConfig||, CODE, READONLY, ALIGN=2

                  SD_LowLevel_DMA_RxConfig PROC
;;;475      */
;;;476    void SD_LowLevel_DMA_RxConfig(uint32_t *BufferDST, uint32_t BufferSize)
000000  b570              PUSH     {r4-r6,lr}
;;;477    {
000002  4605              MOV      r5,r0
000004  b08c              SUB      sp,sp,#0x30
000006  460c              MOV      r4,r1
;;;478      DMA_InitTypeDef DMA_InitStructure;
;;;479    
;;;480      DMA_ClearFlag(DMA2_FLAG_TC4 | DMA2_FLAG_TE4 | DMA2_FLAG_HT4 | DMA2_FLAG_GL4);
000008  4811              LDR      r0,|L3.80|
00000a  f7fffffe          BL       DMA_ClearFlag
;;;481    
;;;482      /*!< DMA2 Channel4 disable */
;;;483      DMA_Cmd(DMA2_Channel4, DISABLE);
00000e  4e11              LDR      r6,|L3.84|
000010  2100              MOVS     r1,#0
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       DMA_Cmd
;;;484    
;;;485      /*!< DMA2 Channel4 Config */
;;;486      DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
000018  480f              LDR      r0,|L3.88|
00001a  e9cd0500          STRD     r0,r5,[sp,#0]
;;;487      DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferDST;
;;;488      DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
00001e  2000              MOVS     r0,#0
;;;489      DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
000020  08a1              LSRS     r1,r4,#2
000022  e9cd0102          STRD     r0,r1,[sp,#8]
;;;490      DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
;;;491      DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
000026  2180              MOVS     r1,#0x80
000028  e9cd0104          STRD     r0,r1,[sp,#0x10]
;;;492      DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
00002c  0089              LSLS     r1,r1,#2
;;;493      DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
00002e  9106              STR      r1,[sp,#0x18]
000030  0089              LSLS     r1,r1,#2
000032  e9cd1007          STRD     r1,r0,[sp,#0x1c]
;;;494      DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
;;;495      DMA_InitStructure.DMA_Priority = DMA_Priority_High;
000036  0089              LSLS     r1,r1,#2
000038  e9cd1009          STRD     r1,r0,[sp,#0x24]
;;;496      DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
;;;497      DMA_Init(DMA2_Channel4, &DMA_InitStructure);
00003c  4669              MOV      r1,sp
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       DMA_Init
;;;498    
;;;499      /*!< DMA2 Channel4 enable */
;;;500      DMA_Cmd(DMA2_Channel4, ENABLE); 
000044  2101              MOVS     r1,#1
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       DMA_Cmd
;;;501    }
00004c  b00c              ADD      sp,sp,#0x30
00004e  bd70              POP      {r4-r6,pc}
;;;502    
                          ENDP

                  |L3.80|
                          DCD      0x1000f000
                  |L3.84|
                          DCD      0x40020444
                  |L3.88|
                          DCD      0x40018080

                          AREA ||i.SD_LowLevel_DMA_TxConfig||, CODE, READONLY, ALIGN=2

                  SD_LowLevel_DMA_TxConfig PROC
;;;441      */
;;;442    void SD_LowLevel_DMA_TxConfig(uint32_t *BufferSRC, uint32_t BufferSize)
000000  b570              PUSH     {r4-r6,lr}
;;;443    {
000002  4605              MOV      r5,r0
000004  b08c              SUB      sp,sp,#0x30
000006  460c              MOV      r4,r1
;;;444    
;;;445      DMA_InitTypeDef DMA_InitStructure;
;;;446    
;;;447      DMA_ClearFlag(DMA2_FLAG_TC4 | DMA2_FLAG_TE4 | DMA2_FLAG_HT4 | DMA2_FLAG_GL4);
000008  4812              LDR      r0,|L4.84|
00000a  f7fffffe          BL       DMA_ClearFlag
;;;448    
;;;449      /*!< DMA2 Channel4 disable */
;;;450      DMA_Cmd(DMA2_Channel4, DISABLE);
00000e  4e12              LDR      r6,|L4.88|
000010  2100              MOVS     r1,#0
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       DMA_Cmd
;;;451    
;;;452      /*!< DMA2 Channel4 Config */
;;;453      DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
000018  4810              LDR      r0,|L4.92|
00001a  e9cd0500          STRD     r0,r5,[sp,#0]
;;;454      DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferSRC;
;;;455      DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
00001e  2010              MOVS     r0,#0x10
;;;456      DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
000020  9002              STR      r0,[sp,#8]
000022  08a0              LSRS     r0,r4,#2
;;;457      DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
000024  9003              STR      r0,[sp,#0xc]
000026  2000              MOVS     r0,#0
;;;458      DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
000028  2180              MOVS     r1,#0x80
00002a  e9cd0104          STRD     r0,r1,[sp,#0x10]
;;;459      DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
00002e  0089              LSLS     r1,r1,#2
;;;460      DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
000030  9106              STR      r1,[sp,#0x18]
000032  0089              LSLS     r1,r1,#2
000034  e9cd1007          STRD     r1,r0,[sp,#0x1c]
;;;461      DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
;;;462      DMA_InitStructure.DMA_Priority = DMA_Priority_High;
000038  0089              LSLS     r1,r1,#2
00003a  e9cd1009          STRD     r1,r0,[sp,#0x24]
;;;463      DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
;;;464      DMA_Init(DMA2_Channel4, &DMA_InitStructure);
00003e  4669              MOV      r1,sp
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       DMA_Init
;;;465    
;;;466      /*!< DMA2 Channel4 enable */
;;;467      DMA_Cmd(DMA2_Channel4, ENABLE);  
000046  2101              MOVS     r1,#1
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       DMA_Cmd
;;;468    }
00004e  b00c              ADD      sp,sp,#0x30
000050  bd70              POP      {r4-r6,pc}
;;;469    
                          ENDP

000052  0000              DCW      0x0000
                  |L4.84|
                          DCD      0x1000f000
                  |L4.88|
                          DCD      0x40020444
                  |L4.92|
                          DCD      0x40018080

                          AREA ||i.SD_LowLevel_DeInit||, CODE, READONLY, ALIGN=2

                  SD_LowLevel_DeInit PROC
;;;374      */
;;;375    void SD_LowLevel_DeInit(void)
000000  b538              PUSH     {r3-r5,lr}
;;;376    {
;;;377      GPIO_InitTypeDef  GPIO_InitStructure;
;;;378      
;;;379      /*!< Disable SDIO Clock */
;;;380      SDIO_ClockCmd(DISABLE);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       SDIO_ClockCmd
;;;381      
;;;382      /*!< Set Power State to OFF */
;;;383      SDIO_SetPowerState(SDIO_PowerState_OFF);
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       SDIO_SetPowerState
;;;384    
;;;385      /*!< DeInitializes the SDIO peripheral */
;;;386      SDIO_DeInit();
00000e  f7fffffe          BL       SDIO_DeInit
;;;387      
;;;388      /*!< Disable the SDIO AHB Clock */
;;;389      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_SDIO, DISABLE);
000012  2100              MOVS     r1,#0
000014  f44f6080          MOV      r0,#0x400
000018  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;390    
;;;391      /*!< Configure PC.08, PC.09, PC.10, PC.11, PC.12 pin: D0, D1, D2, D3, CLK pin */
;;;392      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12;
00001c  f44f50f8          MOV      r0,#0x1f00
000020  f8ad0000          STRH     r0,[sp,#0]
;;;393      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000024  2404              MOVS     r4,#4
000026  f88d4003          STRB     r4,[sp,#3]
;;;394      GPIO_Init(GPIOC, &GPIO_InitStructure);
00002a  4669              MOV      r1,sp
00002c  4804              LDR      r0,|L5.64|
00002e  f7fffffe          BL       GPIO_Init
;;;395    
;;;396      /*!< Configure PD.02 CMD line */
;;;397      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
000032  f8ad4000          STRH     r4,[sp,#0]
;;;398      GPIO_Init(GPIOD, &GPIO_InitStructure);
000036  4669              MOV      r1,sp
000038  4802              LDR      r0,|L5.68|
00003a  f7fffffe          BL       GPIO_Init
;;;399    }
00003e  bd38              POP      {r3-r5,pc}
;;;400    
                          ENDP

                  |L5.64|
                          DCD      0x40011000
                  |L5.68|
                          DCD      0x40011400

                          AREA ||i.SD_LowLevel_Init||, CODE, READONLY, ALIGN=2

                  SD_LowLevel_Init PROC
;;;406      */
;;;407    void SD_LowLevel_Init(void)
000000  b508              PUSH     {r3,lr}
;;;408    {
;;;409      GPIO_InitTypeDef  GPIO_InitStructure;
;;;410    
;;;411      /*!< GPIOC and GPIOD Periph clock enable */
;;;412      RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD | SD_DETECT_GPIO_CLK, ENABLE);
000002  2101              MOVS     r1,#1
000004  20b0              MOVS     r0,#0xb0
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;413    
;;;414      /*!< Configure PC.08, PC.09, PC.10, PC.11, PC.12 pin: D0, D1, D2, D3, CLK pin */
;;;415      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12;
00000a  f44f50f8          MOV      r0,#0x1f00
00000e  f8ad0000          STRH     r0,[sp,#0]
;;;416      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000012  2003              MOVS     r0,#3
000014  f88d0002          STRB     r0,[sp,#2]
;;;417      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000018  2018              MOVS     r0,#0x18
00001a  f88d0003          STRB     r0,[sp,#3]
;;;418      GPIO_Init(GPIOC, &GPIO_InitStructure);
00001e  4669              MOV      r1,sp
000020  480e              LDR      r0,|L6.92|
000022  f7fffffe          BL       GPIO_Init
;;;419    
;;;420      /*!< Configure PD.02 CMD line */
;;;421      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
000026  2004              MOVS     r0,#4
000028  f8ad0000          STRH     r0,[sp,#0]
;;;422      GPIO_Init(GPIOD, &GPIO_InitStructure);
00002c  4669              MOV      r1,sp
00002e  480c              LDR      r0,|L6.96|
000030  f7fffffe          BL       GPIO_Init
;;;423    
;;;424      /*!< Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
;;;425      GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
000034  f44f6000          MOV      r0,#0x800
000038  f8ad0000          STRH     r0,[sp,#0]
;;;426      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
00003c  2048              MOVS     r0,#0x48
00003e  f88d0003          STRB     r0,[sp,#3]
;;;427      GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
000042  4669              MOV      r1,sp
000044  4807              LDR      r0,|L6.100|
000046  f7fffffe          BL       GPIO_Init
;;;428      
;;;429      /*!< Enable the SDIO AHB Clock */
;;;430      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_SDIO, ENABLE);
00004a  2101              MOVS     r1,#1
00004c  0288              LSLS     r0,r1,#10
00004e  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;431    
;;;432      /*!< Enable the DMA2 Clock */
;;;433      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
000052  2101              MOVS     r1,#1
000054  2002              MOVS     r0,#2
000056  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;434    }
00005a  bd08              POP      {r3,pc}
;;;435    
                          ENDP

                  |L6.92|
                          DCD      0x40011000
                  |L6.96|
                          DCD      0x40011400
                  |L6.100|
                          DCD      0x40011c00

                          AREA ||i.SD_WaitForDMAEndOfTransfer||, CODE, READONLY, ALIGN=2

                  SD_WaitForDMAEndOfTransfer PROC
;;;507      */
;;;508    void SD_WaitForDMAEndOfTransfer(void)
000000  b510              PUSH     {r4,lr}
;;;509    {
;;;510      while (DMA_GetFlagStatus(DMA2_FLAG_TC4) == RESET)
000002  4c03              LDR      r4,|L7.16|
                  |L7.4|
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       DMA_GetFlagStatus
00000a  2800              CMP      r0,#0
00000c  d0fa              BEQ      |L7.4|
;;;511      {}
;;;512    }
00000e  bd10              POP      {r4,pc}
;;;513    
                          ENDP

                  |L7.16|
                          DCD      0x10002000

                          AREA ||i.STM_EVAL_COMInit||, CODE, READONLY, ALIGN=2

                  STM_EVAL_COMInit PROC
;;;334      */
;;;335    void STM_EVAL_COMInit(COM_TypeDef COM, USART_InitTypeDef* USART_InitStruct)
000000  b5f8              PUSH     {r3-r7,lr}
;;;336    {
000002  460e              MOV      r6,r1
000004  4604              MOV      r4,r0
;;;337      GPIO_InitTypeDef GPIO_InitStructure;
;;;338    
;;;339      /* Enable GPIO clock */
;;;340      RCC_APB2PeriphClockCmd(COM_TX_PORT_CLK[COM] | COM_RX_PORT_CLK[COM] | RCC_APB2Periph_AFIO, ENABLE);
000006  4925              LDR      r1,|L8.156|
000008  4824              LDR      r0,|L8.156|
00000a  3108              ADDS     r1,r1,#8
00000c  f8500024          LDR      r0,[r0,r4,LSL #2]
000010  f8511024          LDR      r1,[r1,r4,LSL #2]
000014  4308              ORRS     r0,r0,r1
000016  f0400001          ORR      r0,r0,#1
00001a  2101              MOVS     r1,#1
00001c  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;341    
;;;342      /* Enable UART clock */
;;;343      if (COM == COM1)
;;;344      {
;;;345        RCC_APB2PeriphClockCmd(COM_USART_CLK[COM], ENABLE); 
000020  481e              LDR      r0,|L8.156|
000022  3808              SUBS     r0,r0,#8
000024  b39c              CBZ      r4,|L8.142|
;;;346      }
;;;347      else
;;;348      {
;;;349        RCC_APB1PeriphClockCmd(COM_USART_CLK[COM], ENABLE);
000026  f8500024          LDR      r0,[r0,r4,LSL #2]
00002a  2101              MOVS     r1,#1
00002c  f7fffffe          BL       RCC_APB1PeriphClockCmd
                  |L8.48|
;;;350      }
;;;351    
;;;352      /* Configure USART Tx as alternate function push-pull */
;;;353      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000030  2018              MOVS     r0,#0x18
000032  f88d0003          STRB     r0,[sp,#3]
;;;354      GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
000036  4819              LDR      r0,|L8.156|
;;;355      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;356      GPIO_Init(COM_TX_PORT[COM], &GPIO_InitStructure);
000038  4669              MOV      r1,sp
00003a  3818              SUBS     r0,r0,#0x18           ;354
00003c  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;354
000040  f8ad0000          STRH     r0,[sp,#0]            ;354
000044  2003              MOVS     r0,#3                 ;355
000046  f88d0002          STRB     r0,[sp,#2]            ;355
00004a  4815              LDR      r0,|L8.160|
00004c  f8500024          LDR      r0,[r0,r4,LSL #2]
000050  f7fffffe          BL       GPIO_Init
;;;357    
;;;358      /* Configure USART Rx as input floating */
;;;359      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000054  2004              MOVS     r0,#4
000056  f88d0003          STRB     r0,[sp,#3]
;;;360      GPIO_InitStructure.GPIO_Pin = COM_RX_PIN[COM];
00005a  4810              LDR      r0,|L8.156|
;;;361      GPIO_Init(COM_RX_PORT[COM], &GPIO_InitStructure);
00005c  4669              MOV      r1,sp
00005e  3814              SUBS     r0,r0,#0x14           ;360
000060  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;360
000064  f8ad0000          STRH     r0,[sp,#0]            ;360
000068  480d              LDR      r0,|L8.160|
00006a  3008              ADDS     r0,r0,#8
00006c  f8500024          LDR      r0,[r0,r4,LSL #2]
000070  f7fffffe          BL       GPIO_Init
;;;362    
;;;363      /* USART configuration */
;;;364      USART_Init(COM_USART[COM], USART_InitStruct);
000074  4d0a              LDR      r5,|L8.160|
000076  4631              MOV      r1,r6
000078  3d08              SUBS     r5,r5,#8
00007a  f8550024          LDR      r0,[r5,r4,LSL #2]
00007e  f7fffffe          BL       USART_Init
;;;365        
;;;366      /* Enable USART */
;;;367      USART_Cmd(COM_USART[COM], ENABLE);
000082  f8550024          LDR      r0,[r5,r4,LSL #2]
000086  2101              MOVS     r1,#1
000088  f7fffffe          BL       USART_Cmd
;;;368    }
00008c  bdf8              POP      {r3-r7,pc}
                  |L8.142|
00008e  e7ff              B        |L8.144|
                  |L8.144|
000090  6800              LDR      r0,[r0,#0]            ;345
000092  2101              MOVS     r1,#1                 ;345
000094  f7fffffe          BL       RCC_APB2PeriphClockCmd
000098  e7ca              B        |L8.48|
;;;369    
                          ENDP

00009a  0000              DCW      0x0000
                  |L8.156|
                          DCD      ||.constdata||+0x18
                  |L8.160|
                          DCD      ||.data||+0x8

                          AREA ||i.STM_EVAL_LEDInit||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDInit PROC
;;;181      */
;;;182    void STM_EVAL_LEDInit(Led_TypeDef Led)
000000  b538              PUSH     {r3-r5,lr}
;;;183    {
000002  4604              MOV      r4,r0
;;;184      GPIO_InitTypeDef  GPIO_InitStructure;
;;;185      
;;;186      /* Enable the GPIO_LED Clock */
;;;187      RCC_APB2PeriphClockCmd(GPIO_CLK[Led], ENABLE);
000004  480c              LDR      r0,|L9.56|
000006  2101              MOVS     r1,#1
000008  f8500024          LDR      r0,[r0,r4,LSL #2]
00000c  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;188    
;;;189      /* Configure the GPIO_LED pin */
;;;190      GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
000010  4809              LDR      r0,|L9.56|
;;;191      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
;;;192      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;193    
;;;194      GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
000012  4669              MOV      r1,sp
000014  3820              SUBS     r0,r0,#0x20           ;190
000016  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;190
00001a  f8ad0000          STRH     r0,[sp,#0]            ;190
00001e  2010              MOVS     r0,#0x10              ;191
000020  f88d0003          STRB     r0,[sp,#3]            ;191
000024  2003              MOVS     r0,#3                 ;192
000026  f88d0002          STRB     r0,[sp,#2]            ;192
00002a  4804              LDR      r0,|L9.60|
00002c  f8500024          LDR      r0,[r0,r4,LSL #2]
000030  f7fffffe          BL       GPIO_Init
;;;195    }
000034  bd38              POP      {r3-r5,pc}
;;;196    
                          ENDP

000036  0000              DCW      0x0000
                  |L9.56|
                          DCD      ||.constdata||+0x28
                  |L9.60|
                          DCD      ||.data||+0x18

                          AREA ||i.STM_EVAL_LEDOff||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDOff PROC
;;;221      */
;;;222    void STM_EVAL_LEDOff(Led_TypeDef Led)
000000  4903              LDR      r1,|L10.16|
;;;223    {
;;;224      GPIO_PORT[Led]->BRR = GPIO_PIN[Led];    
000002  4a04              LDR      r2,|L10.20|
000004  f8311010          LDRH     r1,[r1,r0,LSL #1]
000008  f8520020          LDR      r0,[r2,r0,LSL #2]
00000c  6141              STR      r1,[r0,#0x14]
;;;225    }
00000e  4770              BX       lr
;;;226    
                          ENDP

                  |L10.16|
                          DCD      ||.constdata||+0x8
                  |L10.20|
                          DCD      ||.data||+0x18

                          AREA ||i.STM_EVAL_LEDOn||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDOn PROC
;;;206      */
;;;207    void STM_EVAL_LEDOn(Led_TypeDef Led)
000000  4903              LDR      r1,|L11.16|
;;;208    {
;;;209      GPIO_PORT[Led]->BSRR = GPIO_PIN[Led];     
000002  4a04              LDR      r2,|L11.20|
000004  f8311010          LDRH     r1,[r1,r0,LSL #1]
000008  f8520020          LDR      r0,[r2,r0,LSL #2]
00000c  6101              STR      r1,[r0,#0x10]
;;;210    }
00000e  4770              BX       lr
;;;211    
                          ENDP

                  |L11.16|
                          DCD      ||.constdata||+0x8
                  |L11.20|
                          DCD      ||.data||+0x18

                          AREA ||i.STM_EVAL_LEDToggle||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDToggle PROC
;;;236      */
;;;237    void STM_EVAL_LEDToggle(Led_TypeDef Led)
000000  4904              LDR      r1,|L12.20|
;;;238    {
;;;239      GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
000002  f8511020          LDR      r1,[r1,r0,LSL #2]
000006  68ca              LDR      r2,[r1,#0xc]
000008  4b03              LDR      r3,|L12.24|
00000a  f8330010          LDRH     r0,[r3,r0,LSL #1]
00000e  4042              EORS     r2,r2,r0
000010  60ca              STR      r2,[r1,#0xc]
;;;240    }
000012  4770              BX       lr
;;;241    
                          ENDP

                  |L12.20|
                          DCD      ||.data||+0x18
                  |L12.24|
                          DCD      ||.constdata||+0x8

                          AREA ||i.STM_EVAL_PBGetState||, CODE, READONLY, ALIGN=2

                  STM_EVAL_PBGetState PROC
;;;319      */
;;;320    uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
000000  4903              LDR      r1,|L13.16|
;;;321    {
;;;322      return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
000002  4a04              LDR      r2,|L13.20|
000004  f8311010          LDRH     r1,[r1,r0,LSL #1]
000008  f8520020          LDR      r0,[r2,r0,LSL #2]
00000c  f7ffbffe          B.W      GPIO_ReadInputDataBit
;;;323    }
;;;324    
                          ENDP

                  |L13.16|
                          DCD      ||.constdata||+0x38
                  |L13.20|
                          DCD      ||.data||+0x28

                          AREA ||i.STM_EVAL_PBInit||, CODE, READONLY, ALIGN=2

                  STM_EVAL_PBInit PROC
;;;260      */
;;;261    void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
000000  b57f              PUSH     {r0-r6,lr}
;;;262    {
000002  4604              MOV      r4,r0
;;;263      GPIO_InitTypeDef GPIO_InitStructure;
;;;264      EXTI_InitTypeDef EXTI_InitStructure;
;;;265      NVIC_InitTypeDef NVIC_InitStructure;
;;;266    
;;;267      /* Enable the BUTTON Clock */
;;;268      RCC_APB2PeriphClockCmd(BUTTON_CLK[Button] | RCC_APB2Periph_AFIO, ENABLE);
000004  4823              LDR      r0,|L14.148|
000006  460d              MOV      r5,r1                 ;262
000008  2101              MOVS     r1,#1
00000a  f8500024          LDR      r0,[r0,r4,LSL #2]
00000e  f0400001          ORR      r0,r0,#1
000012  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;269    
;;;270      /* Configure Button pin as input floating */
;;;271      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000016  2004              MOVS     r0,#4
000018  f88d000f          STRB     r0,[sp,#0xf]
;;;272      GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
00001c  481d              LDR      r0,|L14.148|
;;;273      GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
00001e  a903              ADD      r1,sp,#0xc
000020  3810              SUBS     r0,r0,#0x10           ;272
000022  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;272
000026  f8ad000c          STRH     r0,[sp,#0xc]          ;272
00002a  481b              LDR      r0,|L14.152|
00002c  f8500024          LDR      r0,[r0,r4,LSL #2]
000030  f7fffffe          BL       GPIO_Init
;;;274    
;;;275    
;;;276      if (Button_Mode == BUTTON_MODE_EXTI)
000034  2d01              CMP      r5,#1
000036  d12c              BNE      |L14.146|
;;;277      {
;;;278        /* Connect Button EXTI Line to Button GPIO Pin */
;;;279        GPIO_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
000038  4816              LDR      r0,|L14.148|
00003a  3040              ADDS     r0,r0,#0x40
00003c  f8101014          LDRB     r1,[r0,r4,LSL #1]
000040  3810              SUBS     r0,r0,#0x10
000042  f8100014          LDRB     r0,[r0,r4,LSL #1]
000046  f7fffffe          BL       GPIO_EXTILineConfig
;;;280    
;;;281        /* Configure Button EXTI line */
;;;282        EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
00004a  4812              LDR      r0,|L14.148|
00004c  3020              ADDS     r0,r0,#0x20
00004e  f8300014          LDRH     r0,[r0,r4,LSL #1]
;;;283        EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
000052  9000              STR      r0,[sp,#0]
000054  2000              MOVS     r0,#0
000056  f88d0004          STRB     r0,[sp,#4]
;;;284    
;;;285        if(Button != BUTTON_WAKEUP)
00005a  b10c              CBZ      r4,|L14.96|
;;;286        {
;;;287          EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;  
00005c  200c              MOVS     r0,#0xc
00005e  e000              B        |L14.98|
                  |L14.96|
;;;288        }
;;;289        else
;;;290        {
;;;291          EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
000060  2008              MOVS     r0,#8
                  |L14.98|
000062  f88d0005          STRB     r0,[sp,#5]
;;;292        }
;;;293        EXTI_InitStructure.EXTI_LineCmd = ENABLE;
000066  2501              MOVS     r5,#1
000068  f88d5006          STRB     r5,[sp,#6]
;;;294        EXTI_Init(&EXTI_InitStructure);
00006c  4668              MOV      r0,sp
00006e  f7fffffe          BL       EXTI_Init
;;;295    
;;;296        /* Enable and set Button EXTI Interrupt to the lowest priority */
;;;297        NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
000072  4808              LDR      r0,|L14.148|
000074  3050              ADDS     r0,r0,#0x50
000076  f8100014          LDRB     r0,[r0,r4,LSL #1]
00007a  f88d0008          STRB     r0,[sp,#8]
;;;298        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
00007e  200f              MOVS     r0,#0xf
000080  f88d0009          STRB     r0,[sp,#9]
;;;299        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
000084  f88d000a          STRB     r0,[sp,#0xa]
;;;300        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000088  f88d500b          STRB     r5,[sp,#0xb]
;;;301    
;;;302        NVIC_Init(&NVIC_InitStructure); 
00008c  a802              ADD      r0,sp,#8
00008e  f7fffffe          BL       NVIC_Init
                  |L14.146|
;;;303      }
;;;304    }
000092  bd7f              POP      {r0-r6,pc}
;;;305    
                          ENDP

                  |L14.148|
                          DCD      ||.constdata||+0x48
                  |L14.152|
                          DCD      ||.data||+0x28

                          AREA ||i.sFLASH_LowLevel_DeInit||, CODE, READONLY, ALIGN=2

                  sFLASH_LowLevel_DeInit PROC
;;;518      */
;;;519    void sFLASH_LowLevel_DeInit(void)
000000  b538              PUSH     {r3-r5,lr}
;;;520    {
;;;521      GPIO_InitTypeDef GPIO_InitStructure;
;;;522    
;;;523      /*!< Disable the sFLASH_SPI  */
;;;524      SPI_Cmd(sFLASH_SPI, DISABLE);
000002  4c16              LDR      r4,|L15.92|
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       SPI_Cmd
;;;525      
;;;526      /*!< DeInitializes the sFLASH_SPI */
;;;527      SPI_I2S_DeInit(sFLASH_SPI);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       SPI_I2S_DeInit
;;;528      
;;;529      /*!< sFLASH_SPI Periph clock disable */
;;;530      RCC_APB2PeriphClockCmd(sFLASH_SPI_CLK, DISABLE);
000012  2100              MOVS     r1,#0
000014  14a0              ASRS     r0,r4,#18
000016  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;531      
;;;532      /*!< Configure sFLASH_SPI pins: SCK */
;;;533      GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_SCK_PIN;
00001a  2020              MOVS     r0,#0x20
00001c  f8ad0000          STRH     r0,[sp,#0]
;;;534      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
;;;535      GPIO_Init(sFLASH_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
000020  4d0f              LDR      r5,|L15.96|
000022  2404              MOVS     r4,#4                 ;534
000024  f88d4003          STRB     r4,[sp,#3]            ;534
000028  4669              MOV      r1,sp
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       GPIO_Init
;;;536    
;;;537      /*!< Configure sFLASH_SPI pins: MISO */
;;;538      GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MISO_PIN;
000030  2040              MOVS     r0,#0x40
000032  f8ad0000          STRH     r0,[sp,#0]
;;;539      GPIO_Init(sFLASH_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
000036  4669              MOV      r1,sp
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       GPIO_Init
;;;540    
;;;541      /*!< Configure sFLASH_SPI pins: MOSI */
;;;542      GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MOSI_PIN;
00003e  2080              MOVS     r0,#0x80
000040  f8ad0000          STRH     r0,[sp,#0]
;;;543      GPIO_Init(sFLASH_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
000044  4669              MOV      r1,sp
000046  4628              MOV      r0,r5
000048  f7fffffe          BL       GPIO_Init
;;;544    
;;;545      /*!< Configure sFLASH_CS_PIN pin: sFLASH Card CS pin */
;;;546      GPIO_InitStructure.GPIO_Pin = sFLASH_CS_PIN;
00004c  f8ad4000          STRH     r4,[sp,#0]
;;;547      GPIO_Init(sFLASH_CS_GPIO_PORT, &GPIO_InitStructure);
000050  4669              MOV      r1,sp
000052  4804              LDR      r0,|L15.100|
000054  f7fffffe          BL       GPIO_Init
;;;548    }
000058  bd38              POP      {r3-r5,pc}
;;;549    
                          ENDP

00005a  0000              DCW      0x0000
                  |L15.92|
                          DCD      0x40013000
                  |L15.96|
                          DCD      0x40010800
                  |L15.100|
                          DCD      0x40010c00

                          AREA ||i.sFLASH_LowLevel_Init||, CODE, READONLY, ALIGN=2

                  sFLASH_LowLevel_Init PROC
;;;554      */
;;;555    void sFLASH_LowLevel_Init(void)
000000  b538              PUSH     {r3-r5,lr}
;;;556    {
;;;557      GPIO_InitTypeDef GPIO_InitStructure;
;;;558    
;;;559      /*!< sFLASH_SPI_CS_GPIO, sFLASH_SPI_MOSI_GPIO, sFLASH_SPI_MISO_GPIO 
;;;560           and sFLASH_SPI_SCK_GPIO Periph clock enable */
;;;561      RCC_APB2PeriphClockCmd(sFLASH_CS_GPIO_CLK | sFLASH_SPI_MOSI_GPIO_CLK | sFLASH_SPI_MISO_GPIO_CLK |
000002  2101              MOVS     r1,#1
000004  200c              MOVS     r0,#0xc
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;562                             sFLASH_SPI_SCK_GPIO_CLK, ENABLE);
;;;563    
;;;564      /*!< sFLASH_SPI Periph clock enable */
;;;565      RCC_APB2PeriphClockCmd(sFLASH_SPI_CLK, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  0308              LSLS     r0,r1,#12
00000e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;566      
;;;567      /*!< Configure sFLASH_SPI pins: SCK */
;;;568      GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_SCK_PIN;
000012  2020              MOVS     r0,#0x20
000014  f8ad0000          STRH     r0,[sp,#0]
;;;569      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000018  2003              MOVS     r0,#3
00001a  f88d0002          STRB     r0,[sp,#2]
;;;570      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00001e  2018              MOVS     r0,#0x18
;;;571      GPIO_Init(sFLASH_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
000020  4c0f              LDR      r4,|L16.96|
000022  f88d0003          STRB     r0,[sp,#3]            ;570
000026  4669              MOV      r1,sp
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       GPIO_Init
;;;572    
;;;573      /*!< Configure sFLASH_SPI pins: MISO */
;;;574      GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MISO_PIN;
00002e  2040              MOVS     r0,#0x40
000030  f8ad0000          STRH     r0,[sp,#0]
;;;575      GPIO_Init(sFLASH_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
000034  4669              MOV      r1,sp
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       GPIO_Init
;;;576    
;;;577      /*!< Configure sFLASH_SPI pins: MOSI */
;;;578      GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MOSI_PIN;
00003c  2080              MOVS     r0,#0x80
00003e  f8ad0000          STRH     r0,[sp,#0]
;;;579      GPIO_Init(sFLASH_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
000042  4669              MOV      r1,sp
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       GPIO_Init
;;;580    
;;;581      /*!< Configure sFLASH_CS_PIN pin: sFLASH Card CS pin */
;;;582      GPIO_InitStructure.GPIO_Pin = sFLASH_CS_PIN;
00004a  2004              MOVS     r0,#4
00004c  f8ad0000          STRH     r0,[sp,#0]
;;;583      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000050  2010              MOVS     r0,#0x10
000052  f88d0003          STRB     r0,[sp,#3]
;;;584      GPIO_Init(sFLASH_CS_GPIO_PORT, &GPIO_InitStructure);
000056  4669              MOV      r1,sp
000058  4802              LDR      r0,|L16.100|
00005a  f7fffffe          BL       GPIO_Init
;;;585    }
00005e  bd38              POP      {r3-r5,pc}
;;;586    
                          ENDP

                  |L16.96|
                          DCD      0x40010800
                  |L16.100|
                          DCD      0x40010c00

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  COM_TX_PIN
000000  02000004          DCW      0x0200,0x0004
                  COM_RX_PIN
000004  04000008          DCW      0x0400,0x0008
                  GPIO_PIN
000008  00400080          DCW      0x0040,0x0080
00000c  01000200          DCW      0x0100,0x0200
                  COM_USART_CLK
                          DCD      0x00004000
                          DCD      0x00020000
                  COM_TX_PORT_CLK
                          DCD      0x00000004
                          DCD      0x00000004
                  COM_RX_PORT_CLK
                          DCD      0x00000004
                          DCD      0x00000004
                  GPIO_CLK
                          DCD      0x00000080
                          DCD      0x00000080
                          DCD      0x00000080
                          DCD      0x00000080
                  BUTTON_PIN
000038  00012000          DCW      0x0001,0x2000
00003c  01002000          DCW      0x0100,0x2000
000040  40008000          DCW      0x4000,0x8000
000044  00080080          DCW      0x0008,0x0080
                  BUTTON_CLK
                          DCD      0x00000004
                          DCD      0x00000010
                          DCD      0x00000100
                          DCD      0x00000100
                          DCD      0x00000100
                          DCD      0x00000100
                          DCD      0x00000020
                          DCD      0x00000100
                  BUTTON_EXTI_LINE
000068  00012000          DCW      0x0001,0x2000
00006c  01002000          DCW      0x0100,0x2000
000070  40008000          DCW      0x4000,0x8000
000074  00080080          DCW      0x0008,0x0080
                  BUTTON_PORT_SOURCE
000078  00000002          DCW      0x0000,0x0002
00007c  00060006          DCW      0x0006,0x0006
000080  00060006          DCW      0x0006,0x0006
000084  00030006          DCW      0x0003,0x0006
                  BUTTON_PIN_SOURCE
000088  0000000d          DCW      0x0000,0x000d
00008c  0008000d          DCW      0x0008,0x000d
000090  000e000f          DCW      0x000e,0x000f
000094  00030007          DCW      0x0003,0x0007
                  BUTTON_IRQn
000098  00060028          DCW      0x0006,0x0028
00009c  00170028          DCW      0x0017,0x0028
0000a0  00280028          DCW      0x0028,0x0028
0000a4  00090017          DCW      0x0009,0x0017

                          AREA ||.data||, DATA, ALIGN=2

                  COM_USART
                          DCD      0x40013800
                          DCD      0x40004400
                  COM_TX_PORT
                          DCD      0x40010800
                          DCD      0x40010800
                  COM_RX_PORT
                          DCD      0x40010800
                          DCD      0x40010800
                  GPIO_PORT
                          DCD      0x40011c00
                          DCD      0x40011c00
                          DCD      0x40011c00
                          DCD      0x40011c00
                  BUTTON_PORT
                          DCD      0x40010800
                          DCD      0x40011000
                          DCD      0x40012000
                          DCD      0x40012000
                          DCD      0x40012000
                          DCD      0x40012000
                          DCD      0x40011400
                          DCD      0x40012000
