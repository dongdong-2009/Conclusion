; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32f10x_tim.o --asm_dir=.\ --list_dir=.\ --depend=.\stm32f10x_tim.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\ -I..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210E_EVAL -I.\RTE\_MainBoardForRTD -I"D:\software install\Keil\ARM\CMSIS\5.1.0\CMSIS\Include" -I"D:\software install\Keil\Keil\STM32F1xx_DFP\2.2.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL --omf_browse=.\stm32f10x_tim.crf ..\..\..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_tim.c]
                          THUMB

                          AREA ||i.TI1_Config||, CODE, READONLY, ALIGN=1

                  TI1_Config PROC
;;;2690     */
;;;2691   static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
000000  b570              PUSH     {r4-r6,lr}
;;;2692                          uint16_t TIM_ICFilter)
;;;2693   {
;;;2694     uint16_t tmpccmr1 = 0, tmpccer = 0;
;;;2695     /* Disable the Channel 1: Reset the CC1E Bit */
;;;2696     TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
000002  8c04              LDRH     r4,[r0,#0x20]
000004  f0240401          BIC      r4,r4,#1
000008  8404              STRH     r4,[r0,#0x20]
;;;2697     tmpccmr1 = TIMx->CCMR1;
00000a  8b05              LDRH     r5,[r0,#0x18]
;;;2698     tmpccer = TIMx->CCER;
00000c  8c04              LDRH     r4,[r0,#0x20]
;;;2699     /* Select the Input and set the filter */
;;;2700     tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
;;;2701     tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
00000e  f64f76ff          MOV      r6,#0xffff
000012  ea061303          AND      r3,r6,r3,LSL #4
000016  4313              ORRS     r3,r3,r2
000018  f02505f3          BIC      r5,r5,#0xf3           ;2700
00001c  432b              ORRS     r3,r3,r5
;;;2702     /* Select the Polarity and set the CC1E Bit */
;;;2703     tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
00001e  f0240202          BIC      r2,r4,#2
;;;2704     tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
000022  430a              ORRS     r2,r2,r1
000024  f0420101          ORR      r1,r2,#1
;;;2705     /* Write to TIMx CCMR1 and CCER registers */
;;;2706     TIMx->CCMR1 = tmpccmr1;
000028  8303              STRH     r3,[r0,#0x18]
;;;2707     TIMx->CCER = tmpccer;
00002a  8401              STRH     r1,[r0,#0x20]
;;;2708   }
00002c  bd70              POP      {r4-r6,pc}
;;;2709   
                          ENDP


                          AREA ||i.TI2_Config||, CODE, READONLY, ALIGN=1

                  TI2_Config PROC
;;;2725     */
;;;2726   static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
000000  b5f0              PUSH     {r4-r7,lr}
;;;2727                          uint16_t TIM_ICFilter)
;;;2728   {
;;;2729     uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
;;;2730     /* Disable the Channel 2: Reset the CC2E Bit */
;;;2731     TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
000002  8c04              LDRH     r4,[r0,#0x20]
000004  f0240410          BIC      r4,r4,#0x10
000008  8404              STRH     r4,[r0,#0x20]
;;;2732     tmpccmr1 = TIMx->CCMR1;
00000a  8b07              LDRH     r7,[r0,#0x18]
;;;2733     tmpccer = TIMx->CCER;
00000c  8c06              LDRH     r6,[r0,#0x20]
;;;2734     tmp = (uint16_t)(TIM_ICPolarity << 4);
00000e  f64f74ff          MOV      r4,#0xffff
000012  ea041501          AND      r5,r4,r1,LSL #4
;;;2735     /* Select the Input and set the filter */
;;;2736     tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
000016  f4274773          BIC      r7,r7,#0xf300
;;;2737     tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
00001a  ea043103          AND      r1,r4,r3,LSL #12
00001e  4339              ORRS     r1,r1,r7
;;;2738     tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
000020  ea042202          AND      r2,r4,r2,LSL #8
000024  430a              ORRS     r2,r2,r1
;;;2739     /* Select the Polarity and set the CC2E Bit */
;;;2740      tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
000026  f0260120          BIC      r1,r6,#0x20
;;;2741     tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
00002a  4329              ORRS     r1,r1,r5
00002c  f0410110          ORR      r1,r1,#0x10
;;;2742     /* Write to TIMx CCMR1 and CCER registers */
;;;2743     TIMx->CCMR1 = tmpccmr1 ;
000030  8302              STRH     r2,[r0,#0x18]
;;;2744     TIMx->CCER = tmpccer;
000032  8401              STRH     r1,[r0,#0x20]
;;;2745   }
000034  bdf0              POP      {r4-r7,pc}
;;;2746   
                          ENDP


                          AREA ||i.TIM_ARRPreloadConfig||, CODE, READONLY, ALIGN=1

                  TIM_ARRPreloadConfig PROC
;;;1398     */
;;;1399   void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;1400   {
;;;1401     /* Check the parameters */
;;;1402     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;1403     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1404     if (NewState != DISABLE)
;;;1405     {
;;;1406       /* Set the ARR Preload Bit */
;;;1407       TIMx->CR1 |= TIM_CR1_ARPE;
;;;1408     }
;;;1409     else
;;;1410     {
;;;1411       /* Reset the ARR Preload Bit */
;;;1412       TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
000002  8801              LDRH     r1,[r0,#0]
000004  d002              BEQ      |L3.12|
000006  f0410180          ORR      r1,r1,#0x80           ;1407
00000a  e001              B        |L3.16|
                  |L3.12|
00000c  f0210180          BIC      r1,r1,#0x80
                  |L3.16|
000010  8001              STRH     r1,[r0,#0]            ;1407
;;;1413     }
;;;1414   }
000012  4770              BX       lr
;;;1415   
                          ENDP


                          AREA ||i.TIM_BDTRConfig||, CODE, READONLY, ALIGN=1

                  TIM_BDTRConfig PROC
;;;701      */
;;;702    void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
000000  b510              PUSH     {r4,lr}
;;;703    {
;;;704      /* Check the parameters */
;;;705      assert_param(IS_TIM_LIST2_PERIPH(TIMx));
;;;706      assert_param(IS_TIM_OSSR_STATE(TIM_BDTRInitStruct->TIM_OSSRState));
;;;707      assert_param(IS_TIM_OSSI_STATE(TIM_BDTRInitStruct->TIM_OSSIState));
;;;708      assert_param(IS_TIM_LOCK_LEVEL(TIM_BDTRInitStruct->TIM_LOCKLevel));
;;;709      assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
;;;710      assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
;;;711      assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
;;;712      /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
;;;713         the OSSI State, the dead time value and the Automatic Output Enable Bit */
;;;714      TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
000002  880a              LDRH     r2,[r1,#0]
000004  884b              LDRH     r3,[r1,#2]
000006  88cc              LDRH     r4,[r1,#6]
000008  431a              ORRS     r2,r2,r3
00000a  888b              LDRH     r3,[r1,#4]
00000c  4323              ORRS     r3,r3,r4
00000e  431a              ORRS     r2,r2,r3
000010  890b              LDRH     r3,[r1,#8]
000012  431a              ORRS     r2,r2,r3
000014  894b              LDRH     r3,[r1,#0xa]
000016  8989              LDRH     r1,[r1,#0xc]
000018  431a              ORRS     r2,r2,r3
00001a  430a              ORRS     r2,r2,r1
00001c  f8a02044          STRH     r2,[r0,#0x44]
;;;715                 TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
;;;716                 TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
;;;717                 TIM_BDTRInitStruct->TIM_AutomaticOutput;
;;;718    }
000020  bd10              POP      {r4,pc}
;;;719    
                          ENDP


                          AREA ||i.TIM_BDTRStructInit||, CODE, READONLY, ALIGN=1

                  TIM_BDTRStructInit PROC
;;;776      */
;;;777    void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
000000  2100              MOVS     r1,#0
;;;778    {
;;;779      /* Set the default configuration */
;;;780      TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
000002  8001              STRH     r1,[r0,#0]
;;;781      TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
000004  8041              STRH     r1,[r0,#2]
;;;782      TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
000006  8081              STRH     r1,[r0,#4]
;;;783      TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
000008  80c1              STRH     r1,[r0,#6]
;;;784      TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
00000a  8101              STRH     r1,[r0,#8]
;;;785      TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
00000c  8141              STRH     r1,[r0,#0xa]
;;;786      TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
00000e  8181              STRH     r1,[r0,#0xc]
;;;787    }
000010  4770              BX       lr
;;;788    
                          ENDP


                          AREA ||i.TIM_CCPreloadControl||, CODE, READONLY, ALIGN=1

                  TIM_CCPreloadControl PROC
;;;1472     */
;;;1473   void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;1474   { 
;;;1475     /* Check the parameters */
;;;1476     assert_param(IS_TIM_LIST5_PERIPH(TIMx));
;;;1477     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1478     if (NewState != DISABLE)
;;;1479     {
;;;1480       /* Set the CCPC Bit */
;;;1481       TIMx->CR2 |= TIM_CR2_CCPC;
;;;1482     }
;;;1483     else
;;;1484     {
;;;1485       /* Reset the CCPC Bit */
;;;1486       TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
000002  8881              LDRH     r1,[r0,#4]
000004  d002              BEQ      |L6.12|
000006  f0410101          ORR      r1,r1,#1              ;1481
00000a  e001              B        |L6.16|
                  |L6.12|
00000c  f0210101          BIC      r1,r1,#1
                  |L6.16|
000010  8081              STRH     r1,[r0,#4]            ;1481
;;;1487     }
;;;1488   }
000012  4770              BX       lr
;;;1489   
                          ENDP


                          AREA ||i.TIM_CCxCmd||, CODE, READONLY, ALIGN=1

                  TIM_CCxCmd PROC
;;;1963     */
;;;1964   void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
000000  b510              PUSH     {r4,lr}
;;;1965   {
;;;1966     uint16_t tmp = 0;
;;;1967   
;;;1968     /* Check the parameters */
;;;1969     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;1970     assert_param(IS_TIM_CHANNEL(TIM_Channel));
;;;1971     assert_param(IS_TIM_CCX(TIM_CCx));
;;;1972   
;;;1973     tmp = CCER_CCE_Set << TIM_Channel;
000002  2301              MOVS     r3,#1
;;;1974   
;;;1975     /* Reset the CCxE Bit */
;;;1976     TIMx->CCER &= (uint16_t)~ tmp;
000004  8c04              LDRH     r4,[r0,#0x20]
000006  408b              LSLS     r3,r3,r1              ;1973
000008  439c              BICS     r4,r4,r3
00000a  8404              STRH     r4,[r0,#0x20]
;;;1977   
;;;1978     /* Set or reset the CCxE Bit */ 
;;;1979     TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
00000c  8c03              LDRH     r3,[r0,#0x20]
00000e  408a              LSLS     r2,r2,r1
000010  4313              ORRS     r3,r3,r2
000012  8403              STRH     r3,[r0,#0x20]
;;;1980   }
000014  bd10              POP      {r4,pc}
;;;1981   
                          ENDP


                          AREA ||i.TIM_CCxNCmd||, CODE, READONLY, ALIGN=1

                  TIM_CCxNCmd PROC
;;;1993     */
;;;1994   void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
000000  b510              PUSH     {r4,lr}
;;;1995   {
;;;1996     uint16_t tmp = 0;
;;;1997   
;;;1998     /* Check the parameters */
;;;1999     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
;;;2000     assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
;;;2001     assert_param(IS_TIM_CCXN(TIM_CCxN));
;;;2002   
;;;2003     tmp = CCER_CCNE_Set << TIM_Channel;
000002  2304              MOVS     r3,#4
;;;2004   
;;;2005     /* Reset the CCxNE Bit */
;;;2006     TIMx->CCER &= (uint16_t) ~tmp;
000004  8c04              LDRH     r4,[r0,#0x20]
000006  408b              LSLS     r3,r3,r1              ;2003
000008  439c              BICS     r4,r4,r3
00000a  8404              STRH     r4,[r0,#0x20]
;;;2007   
;;;2008     /* Set or reset the CCxNE Bit */ 
;;;2009     TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
00000c  8c03              LDRH     r3,[r0,#0x20]
00000e  408a              LSLS     r2,r2,r1
000010  4313              ORRS     r3,r3,r2
000012  8403              STRH     r3,[r0,#0x20]
;;;2010   }
000014  bd10              POP      {r4,pc}
;;;2011   
                          ENDP


                          AREA ||i.TIM_ClearFlag||, CODE, READONLY, ALIGN=1

                  TIM_ClearFlag PROC
;;;2589     */
;;;2590   void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
000000  43c9              MVNS     r1,r1
;;;2591   {  
;;;2592     /* Check the parameters */
;;;2593     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2594     assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
;;;2595      
;;;2596     /* Clear the flags */
;;;2597     TIMx->SR = (uint16_t)~TIM_FLAG;
000002  8201              STRH     r1,[r0,#0x10]
;;;2598   }
000004  4770              BX       lr
;;;2599   
                          ENDP


                          AREA ||i.TIM_ClearITPendingBit||, CODE, READONLY, ALIGN=1

                  TIM_ClearITPendingBit PROC
;;;2665     */
;;;2666   void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
000000  43c9              MVNS     r1,r1
;;;2667   {
;;;2668     /* Check the parameters */
;;;2669     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2670     assert_param(IS_TIM_IT(TIM_IT));
;;;2671     /* Clear the IT pending Bit */
;;;2672     TIMx->SR = (uint16_t)~TIM_IT;
000002  8201              STRH     r1,[r0,#0x10]
;;;2673   }
000004  4770              BX       lr
;;;2674   
                          ENDP


                          AREA ||i.TIM_ClearOC1Ref||, CODE, READONLY, ALIGN=1

                  TIM_ClearOC1Ref PROC
;;;1696     */
;;;1697   void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;1698   {
;;;1699     uint16_t tmpccmr1 = 0;
;;;1700     /* Check the parameters */
;;;1701     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1702     assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
;;;1703   
;;;1704     tmpccmr1 = TIMx->CCMR1;
;;;1705   
;;;1706     /* Reset the OC1CE Bit */
;;;1707     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
000002  f0220280          BIC      r2,r2,#0x80
;;;1708     /* Enable or Disable the Output Compare Clear Bit */
;;;1709     tmpccmr1 |= TIM_OCClear;
000006  430a              ORRS     r2,r2,r1
;;;1710     /* Write to TIMx CCMR1 register */
;;;1711     TIMx->CCMR1 = tmpccmr1;
000008  8302              STRH     r2,[r0,#0x18]
;;;1712   }
00000a  4770              BX       lr
;;;1713   
                          ENDP


                          AREA ||i.TIM_ClearOC2Ref||, CODE, READONLY, ALIGN=1

                  TIM_ClearOC2Ref PROC
;;;1722     */
;;;1723   void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;1724   {
;;;1725     uint16_t tmpccmr1 = 0;
;;;1726     /* Check the parameters */
;;;1727     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1728     assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
;;;1729     tmpccmr1 = TIMx->CCMR1;
;;;1730     /* Reset the OC2CE Bit */
;;;1731     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
;;;1732     /* Enable or Disable the Output Compare Clear Bit */
;;;1733     tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
000002  f64f73ff          MOV      r3,#0xffff
000006  f3c2020e          UBFX     r2,r2,#0,#15          ;1731
00000a  ea032101          AND      r1,r3,r1,LSL #8
00000e  4311              ORRS     r1,r1,r2
;;;1734     /* Write to TIMx CCMR1 register */
;;;1735     TIMx->CCMR1 = tmpccmr1;
000010  8301              STRH     r1,[r0,#0x18]
;;;1736   }
000012  4770              BX       lr
;;;1737   
                          ENDP


                          AREA ||i.TIM_ClearOC3Ref||, CODE, READONLY, ALIGN=1

                  TIM_ClearOC3Ref PROC
;;;1746     */
;;;1747   void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
000000  8b82              LDRH     r2,[r0,#0x1c]
;;;1748   {
;;;1749     uint16_t tmpccmr2 = 0;
;;;1750     /* Check the parameters */
;;;1751     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1752     assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
;;;1753     tmpccmr2 = TIMx->CCMR2;
;;;1754     /* Reset the OC3CE Bit */
;;;1755     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
000002  f0220280          BIC      r2,r2,#0x80
;;;1756     /* Enable or Disable the Output Compare Clear Bit */
;;;1757     tmpccmr2 |= TIM_OCClear;
000006  430a              ORRS     r2,r2,r1
;;;1758     /* Write to TIMx CCMR2 register */
;;;1759     TIMx->CCMR2 = tmpccmr2;
000008  8382              STRH     r2,[r0,#0x1c]
;;;1760   }
00000a  4770              BX       lr
;;;1761   
                          ENDP


                          AREA ||i.TIM_ClearOC4Ref||, CODE, READONLY, ALIGN=1

                  TIM_ClearOC4Ref PROC
;;;1770     */
;;;1771   void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
000000  8b82              LDRH     r2,[r0,#0x1c]
;;;1772   {
;;;1773     uint16_t tmpccmr2 = 0;
;;;1774     /* Check the parameters */
;;;1775     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1776     assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
;;;1777     tmpccmr2 = TIMx->CCMR2;
;;;1778     /* Reset the OC4CE Bit */
;;;1779     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
;;;1780     /* Enable or Disable the Output Compare Clear Bit */
;;;1781     tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
000002  f64f73ff          MOV      r3,#0xffff
000006  f3c2020e          UBFX     r2,r2,#0,#15          ;1779
00000a  ea032101          AND      r1,r3,r1,LSL #8
00000e  4311              ORRS     r1,r1,r2
;;;1782     /* Write to TIMx CCMR2 register */
;;;1783     TIMx->CCMR2 = tmpccmr2;
000010  8381              STRH     r1,[r0,#0x1c]
;;;1784   }
000012  4770              BX       lr
;;;1785   
                          ENDP


                          AREA ||i.TIM_Cmd||, CODE, READONLY, ALIGN=1

                  TIM_Cmd PROC
;;;795      */
;;;796    void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;797    {
;;;798      /* Check the parameters */
;;;799      assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;800      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;801      
;;;802      if (NewState != DISABLE)
;;;803      {
;;;804        /* Enable the TIM Counter */
;;;805        TIMx->CR1 |= TIM_CR1_CEN;
;;;806      }
;;;807      else
;;;808      {
;;;809        /* Disable the TIM Counter */
;;;810        TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
000002  8801              LDRH     r1,[r0,#0]
000004  d002              BEQ      |L15.12|
000006  f0410101          ORR      r1,r1,#1              ;805
00000a  e001              B        |L15.16|
                  |L15.12|
00000c  f0210101          BIC      r1,r1,#1
                  |L15.16|
000010  8001              STRH     r1,[r0,#0]            ;805
;;;811      }
;;;812    }
000012  4770              BX       lr
;;;813    
                          ENDP


                          AREA ||i.TIM_CounterModeConfig||, CODE, READONLY, ALIGN=1

                  TIM_CounterModeConfig PROC
;;;1188     */
;;;1189   void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
000000  8802              LDRH     r2,[r0,#0]
;;;1190   {
;;;1191     uint16_t tmpcr1 = 0;
;;;1192     /* Check the parameters */
;;;1193     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1194     assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
;;;1195     tmpcr1 = TIMx->CR1;
;;;1196     /* Reset the CMS and DIR Bits */
;;;1197     tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
000002  f0220270          BIC      r2,r2,#0x70
;;;1198     /* Set the Counter Mode */
;;;1199     tmpcr1 |= TIM_CounterMode;
000006  430a              ORRS     r2,r2,r1
;;;1200     /* Write to TIMx CR1 register */
;;;1201     TIMx->CR1 = tmpcr1;
000008  8002              STRH     r2,[r0,#0]
;;;1202   }
00000a  4770              BX       lr
;;;1203   
                          ENDP


                          AREA ||i.TIM_CtrlPWMOutputs||, CODE, READONLY, ALIGN=1

                  TIM_CtrlPWMOutputs PROC
;;;820      */
;;;821    void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;822    {
;;;823      /* Check the parameters */
;;;824      assert_param(IS_TIM_LIST2_PERIPH(TIMx));
;;;825      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;826      if (NewState != DISABLE)
;;;827      {
;;;828        /* Enable the TIM Main Output */
;;;829        TIMx->BDTR |= TIM_BDTR_MOE;
;;;830      }
;;;831      else
;;;832      {
;;;833        /* Disable the TIM Main Output */
;;;834        TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
000002  f8301f44          LDRH     r1,[r0,#0x44]!
000006  d002              BEQ      |L17.14|
000008  f4414100          ORR      r1,r1,#0x8000         ;829
00000c  e001              B        |L17.18|
                  |L17.14|
00000e  f3c1010e          UBFX     r1,r1,#0,#15
                  |L17.18|
000012  8001              STRH     r1,[r0,#0]            ;829
;;;835      }  
;;;836    }
000014  4770              BX       lr
;;;837    
                          ENDP


                          AREA ||i.TIM_DMACmd||, CODE, READONLY, ALIGN=1

                  TIM_DMACmd PROC
;;;953      */
;;;954    void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
000000  2a00              CMP      r2,#0
;;;955    { 
;;;956      /* Check the parameters */
;;;957      assert_param(IS_TIM_LIST9_PERIPH(TIMx));
;;;958      assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
;;;959      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;960      
;;;961      if (NewState != DISABLE)
;;;962      {
;;;963        /* Enable the DMA sources */
;;;964        TIMx->DIER |= TIM_DMASource; 
;;;965      }
;;;966      else
;;;967      {
;;;968        /* Disable the DMA sources */
;;;969        TIMx->DIER &= (uint16_t)~TIM_DMASource;
000002  8982              LDRH     r2,[r0,#0xc]
000004  d001              BEQ      |L18.10|
000006  430a              ORRS     r2,r2,r1              ;964
000008  e000              B        |L18.12|
                  |L18.10|
00000a  438a              BICS     r2,r2,r1
                  |L18.12|
00000c  8182              STRH     r2,[r0,#0xc]          ;964
;;;970      }
;;;971    }
00000e  4770              BX       lr
;;;972    
                          ENDP


                          AREA ||i.TIM_DMAConfig||, CODE, READONLY, ALIGN=1

                  TIM_DMAConfig PROC
;;;926      */
;;;927    void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
000000  4311              ORRS     r1,r1,r2
;;;928    {
;;;929      /* Check the parameters */
;;;930      assert_param(IS_TIM_LIST4_PERIPH(TIMx));
;;;931      assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
;;;932      assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
;;;933      /* Set the DMA Base and the DMA Burst Length */
;;;934      TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
000002  f8a01048          STRH     r1,[r0,#0x48]
;;;935    }
000006  4770              BX       lr
;;;936    
                          ENDP


                          AREA ||i.TIM_DeInit||, CODE, READONLY, ALIGN=2

                  TIM_DeInit PROC
;;;120      */
;;;121    void TIM_DeInit(TIM_TypeDef* TIMx)
000000  494b              LDR      r1,|L20.304|
;;;122    {
000002  b510              PUSH     {r4,lr}
;;;123      /* Check the parameters */
;;;124      assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
;;;125     
;;;126      if (TIMx == TIM1)
000004  4288              CMP      r0,r1
000006  d102              BNE      |L20.14|
;;;127      {
;;;128        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
000008  2101              MOVS     r1,#1
00000a  14c4              ASRS     r4,r0,#19
;;;129        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
00000c  e086              B        |L20.284|
                  |L20.14|
;;;130      }     
;;;131      else if (TIMx == TIM2)
00000e  f1b04f80          CMP      r0,#0x40000000
000012  d009              BEQ      |L20.40|
;;;132      {
;;;133        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
;;;134        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
;;;135      }
;;;136      else if (TIMx == TIM3)
000014  4947              LDR      r1,|L20.308|
000016  4288              CMP      r0,r1
000018  d10d              BNE      |L20.54|
;;;137      {
;;;138        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
00001a  2101              MOVS     r1,#1
00001c  2002              MOVS     r0,#2
00001e  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;139        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
000022  2100              MOVS     r1,#0
000024  2002              MOVS     r0,#2
000026  e064              B        |L20.242|
                  |L20.40|
000028  2101              MOVS     r1,#1                 ;133
00002a  4608              MOV      r0,r1                 ;133
00002c  f7fffffe          BL       RCC_APB1PeriphResetCmd
000030  2100              MOVS     r1,#0                 ;134
000032  2001              MOVS     r0,#1                 ;134
000034  e05d              B        |L20.242|
                  |L20.54|
;;;140      }
;;;141      else if (TIMx == TIM4)
000036  4940              LDR      r1,|L20.312|
000038  4288              CMP      r0,r1
00003a  d106              BNE      |L20.74|
;;;142      {
;;;143        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
00003c  2101              MOVS     r1,#1
00003e  2004              MOVS     r0,#4
000040  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;144        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
000044  2100              MOVS     r1,#0
000046  2004              MOVS     r0,#4
000048  e053              B        |L20.242|
                  |L20.74|
;;;145      } 
;;;146      else if (TIMx == TIM5)
00004a  493c              LDR      r1,|L20.316|
00004c  4288              CMP      r0,r1
00004e  d106              BNE      |L20.94|
;;;147      {
;;;148        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
000050  2101              MOVS     r1,#1
000052  2008              MOVS     r0,#8
000054  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;149        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
000058  2100              MOVS     r1,#0
00005a  2008              MOVS     r0,#8
00005c  e049              B        |L20.242|
                  |L20.94|
;;;150      } 
;;;151      else if (TIMx == TIM6)
00005e  4938              LDR      r1,|L20.320|
000060  4288              CMP      r0,r1
000062  d106              BNE      |L20.114|
;;;152      {
;;;153        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
000064  2101              MOVS     r1,#1
000066  2010              MOVS     r0,#0x10
000068  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;154        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
00006c  2100              MOVS     r1,#0
00006e  2010              MOVS     r0,#0x10
000070  e03f              B        |L20.242|
                  |L20.114|
;;;155      } 
;;;156      else if (TIMx == TIM7)
000072  4934              LDR      r1,|L20.324|
000074  4288              CMP      r0,r1
000076  d106              BNE      |L20.134|
;;;157      {
;;;158        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
000078  2101              MOVS     r1,#1
00007a  2020              MOVS     r0,#0x20
00007c  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;159        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
000080  2100              MOVS     r1,#0
000082  2020              MOVS     r0,#0x20
000084  e035              B        |L20.242|
                  |L20.134|
;;;160      } 
;;;161      else if (TIMx == TIM8)
000086  4930              LDR      r1,|L20.328|
000088  4288              CMP      r0,r1
00008a  d102              BNE      |L20.146|
;;;162      {
;;;163        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
00008c  2101              MOVS     r1,#1
00008e  1444              ASRS     r4,r0,#17
;;;164        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
000090  e044              B        |L20.284|
                  |L20.146|
;;;165      }
;;;166      else if (TIMx == TIM9)
000092  492e              LDR      r1,|L20.332|
000094  4288              CMP      r0,r1
000096  d102              BNE      |L20.158|
;;;167      {      
;;;168        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
000098  2101              MOVS     r1,#1
00009a  04cc              LSLS     r4,r1,#19
;;;169        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
00009c  e03e              B        |L20.284|
                  |L20.158|
;;;170       }  
;;;171      else if (TIMx == TIM10)
00009e  492c              LDR      r1,|L20.336|
0000a0  4288              CMP      r0,r1
0000a2  d102              BNE      |L20.170|
;;;172      {      
;;;173        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
0000a4  2101              MOVS     r1,#1
0000a6  050c              LSLS     r4,r1,#20
;;;174        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
0000a8  e038              B        |L20.284|
                  |L20.170|
;;;175      }  
;;;176      else if (TIMx == TIM11) 
0000aa  492a              LDR      r1,|L20.340|
0000ac  4288              CMP      r0,r1
0000ae  d102              BNE      |L20.182|
;;;177      {     
;;;178        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
0000b0  2101              MOVS     r1,#1
0000b2  054c              LSLS     r4,r1,#21
;;;179        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
0000b4  e032              B        |L20.284|
                  |L20.182|
;;;180      }  
;;;181      else if (TIMx == TIM12)
0000b6  4928              LDR      r1,|L20.344|
0000b8  4288              CMP      r0,r1
0000ba  d106              BNE      |L20.202|
;;;182      {      
;;;183        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
0000bc  2101              MOVS     r1,#1
0000be  2040              MOVS     r0,#0x40
0000c0  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;184        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
0000c4  2100              MOVS     r1,#0
0000c6  2040              MOVS     r0,#0x40
0000c8  e013              B        |L20.242|
                  |L20.202|
;;;185      }  
;;;186      else if (TIMx == TIM13) 
0000ca  4924              LDR      r1,|L20.348|
0000cc  4288              CMP      r0,r1
0000ce  d106              BNE      |L20.222|
;;;187      {       
;;;188        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
0000d0  2101              MOVS     r1,#1
0000d2  2080              MOVS     r0,#0x80
0000d4  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;189        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
0000d8  2100              MOVS     r1,#0
0000da  2080              MOVS     r0,#0x80
0000dc  e009              B        |L20.242|
                  |L20.222|
;;;190      }
;;;191      else if (TIMx == TIM14) 
0000de  4920              LDR      r1,|L20.352|
0000e0  4288              CMP      r0,r1
0000e2  d10a              BNE      |L20.250|
;;;192      {       
;;;193        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
0000e4  1584              ASRS     r4,r0,#22
0000e6  2101              MOVS     r1,#1
0000e8  4620              MOV      r0,r4
0000ea  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;194        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
0000ee  2100              MOVS     r1,#0
0000f0  4620              MOV      r0,r4
                  |L20.242|
0000f2  e8bd4010          POP      {r4,lr}
0000f6  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L20.250|
;;;195      }        
;;;196      else if (TIMx == TIM15)
0000fa  491a              LDR      r1,|L20.356|
0000fc  4288              CMP      r0,r1
0000fe  d102              BNE      |L20.262|
;;;197      {
;;;198        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
000100  2101              MOVS     r1,#1
000102  040c              LSLS     r4,r1,#16
;;;199        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
000104  e00a              B        |L20.284|
                  |L20.262|
;;;200      } 
;;;201      else if (TIMx == TIM16)
000106  4918              LDR      r1,|L20.360|
000108  4288              CMP      r0,r1
00010a  d102              BNE      |L20.274|
;;;202      {
;;;203        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
00010c  2101              MOVS     r1,#1
00010e  044c              LSLS     r4,r1,#17
;;;204        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
000110  e004              B        |L20.284|
                  |L20.274|
;;;205      } 
;;;206      else
;;;207      {
;;;208        if (TIMx == TIM17)
000112  4916              LDR      r1,|L20.364|
000114  4288              CMP      r0,r1
000116  d10a              BNE      |L20.302|
;;;209        {
;;;210          RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
000118  2101              MOVS     r1,#1
00011a  048c              LSLS     r4,r1,#18
                  |L20.284|
00011c  4620              MOV      r0,r4
00011e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;211          RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
000122  4620              MOV      r0,r4
000124  e8bd4010          POP      {r4,lr}
000128  2100              MOVS     r1,#0
00012a  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L20.302|
;;;212        }  
;;;213      }
;;;214    }
00012e  bd10              POP      {r4,pc}
;;;215    
                          ENDP

                  |L20.304|
                          DCD      0x40012c00
                  |L20.308|
                          DCD      0x40000400
                  |L20.312|
                          DCD      0x40000800
                  |L20.316|
                          DCD      0x40000c00
                  |L20.320|
                          DCD      0x40001000
                  |L20.324|
                          DCD      0x40001400
                  |L20.328|
                          DCD      0x40013400
                  |L20.332|
                          DCD      0x40014c00
                  |L20.336|
                          DCD      0x40015000
                  |L20.340|
                          DCD      0x40015400
                  |L20.344|
                          DCD      0x40001800
                  |L20.348|
                          DCD      0x40001c00
                  |L20.352|
                          DCD      0x40002000
                  |L20.356|
                          DCD      0x40014000
                  |L20.360|
                          DCD      0x40014400
                  |L20.364|
                          DCD      0x40014800

                          AREA ||i.TIM_ETRClockMode1Config||, CODE, READONLY, ALIGN=1

                  TIM_ETRClockMode1Config PROC
;;;1064     */
;;;1065   void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
000000  b510              PUSH     {r4,lr}
;;;1066                                uint16_t ExtTRGFilter)
;;;1067   {
000002  4604              MOV      r4,r0
;;;1068     uint16_t tmpsmcr = 0;
;;;1069     /* Check the parameters */
;;;1070     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1071     assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
;;;1072     assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
;;;1073     assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
;;;1074     /* Configure the ETR Clock source */
;;;1075     TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
000004  f7fffffe          BL       TIM_ETRConfig
;;;1076     
;;;1077     /* Get the TIMx SMCR register value */
;;;1078     tmpsmcr = TIMx->SMCR;
000008  8920              LDRH     r0,[r4,#8]
;;;1079     /* Reset the SMS Bits */
;;;1080     tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
;;;1081     /* Select the External clock mode1 */
;;;1082     tmpsmcr |= TIM_SlaveMode_External1;
;;;1083     /* Select the Trigger selection : ETRF */
;;;1084     tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
;;;1085     tmpsmcr |= TIM_TS_ETRF;
00000a  f0400077          ORR      r0,r0,#0x77
;;;1086     /* Write to TIMx SMCR */
;;;1087     TIMx->SMCR = tmpsmcr;
00000e  8120              STRH     r0,[r4,#8]
;;;1088   }
000010  bd10              POP      {r4,pc}
;;;1089   
                          ENDP


                          AREA ||i.TIM_ETRClockMode2Config||, CODE, READONLY, ALIGN=1

                  TIM_ETRClockMode2Config PROC
;;;1106     */
;;;1107   void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
000000  b510              PUSH     {r4,lr}
;;;1108                                uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
;;;1109   {
000002  4604              MOV      r4,r0
;;;1110     /* Check the parameters */
;;;1111     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1112     assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
;;;1113     assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
;;;1114     assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
;;;1115     /* Configure the ETR Clock source */
;;;1116     TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
000004  f7fffffe          BL       TIM_ETRConfig
;;;1117     /* Enable the External clock mode2 */
;;;1118     TIMx->SMCR |= TIM_SMCR_ECE;
000008  8920              LDRH     r0,[r4,#8]
00000a  f4404080          ORR      r0,r0,#0x4000
00000e  8120              STRH     r0,[r4,#8]
;;;1119   }
000010  bd10              POP      {r4,pc}
;;;1120   
                          ENDP


                          AREA ||i.TIM_ETRConfig||, CODE, READONLY, ALIGN=1

                  TIM_ETRConfig PROC
;;;1137     */
;;;1138   void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
000000  b530              PUSH     {r4,r5,lr}
;;;1139                      uint16_t ExtTRGFilter)
;;;1140   {
;;;1141     uint16_t tmpsmcr = 0;
;;;1142     /* Check the parameters */
;;;1143     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1144     assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
;;;1145     assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
;;;1146     assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
;;;1147     tmpsmcr = TIMx->SMCR;
000002  8904              LDRH     r4,[r0,#8]
;;;1148     /* Reset the ETR Bits */
;;;1149     tmpsmcr &= SMCR_ETR_Mask;
;;;1150     /* Set the Prescaler, the Filter value and the Polarity */
;;;1151     tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
000004  f64f75ff          MOV      r5,#0xffff
000008  ea052303          AND      r3,r5,r3,LSL #8
00000c  4313              ORRS     r3,r3,r2
00000e  b2e4              UXTB     r4,r4                 ;1149
000010  430b              ORRS     r3,r3,r1
000012  4323              ORRS     r3,r3,r4
;;;1152     /* Write to TIMx SMCR */
;;;1153     TIMx->SMCR = tmpsmcr;
000014  8103              STRH     r3,[r0,#8]
;;;1154   }
000016  bd30              POP      {r4,r5,pc}
;;;1155   
                          ENDP


                          AREA ||i.TIM_EncoderInterfaceConfig||, CODE, READONLY, ALIGN=1

                  TIM_EncoderInterfaceConfig PROC
;;;1253     */
;;;1254   void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
000000  b570              PUSH     {r4-r6,lr}
;;;1255                                   uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
;;;1256   {
;;;1257     uint16_t tmpsmcr = 0;
;;;1258     uint16_t tmpccmr1 = 0;
;;;1259     uint16_t tmpccer = 0;
;;;1260       
;;;1261     /* Check the parameters */
;;;1262     assert_param(IS_TIM_LIST5_PERIPH(TIMx));
;;;1263     assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
;;;1264     assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
;;;1265     assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));
;;;1266   
;;;1267     /* Get the TIMx SMCR register value */
;;;1268     tmpsmcr = TIMx->SMCR;
000002  8905              LDRH     r5,[r0,#8]
;;;1269     
;;;1270     /* Get the TIMx CCMR1 register value */
;;;1271     tmpccmr1 = TIMx->CCMR1;
000004  8b04              LDRH     r4,[r0,#0x18]
;;;1272     
;;;1273     /* Get the TIMx CCER register value */
;;;1274     tmpccer = TIMx->CCER;
000006  8c06              LDRH     r6,[r0,#0x20]
;;;1275     
;;;1276     /* Set the encoder Mode */
;;;1277     tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
000008  f0250507          BIC      r5,r5,#7
;;;1278     tmpsmcr |= TIM_EncoderMode;
00000c  430d              ORRS     r5,r5,r1
;;;1279     
;;;1280     /* Select the Capture Compare 1 and the Capture Compare 2 as input */
;;;1281     tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
00000e  f64f41fc          MOV      r1,#0xfcfc
000012  400c              ANDS     r4,r4,r1
;;;1282     tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
000014  f2401101          MOV      r1,#0x101
000018  430c              ORRS     r4,r4,r1
;;;1283     
;;;1284     /* Set the TI1 and the TI2 Polarities */
;;;1285     tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
;;;1286     tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
00001a  f64f71ff          MOV      r1,#0xffff
00001e  ea011103          AND      r1,r1,r3,LSL #4
000022  f0260622          BIC      r6,r6,#0x22           ;1285
000026  4311              ORRS     r1,r1,r2
000028  4331              ORRS     r1,r1,r6
;;;1287     
;;;1288     /* Write to TIMx SMCR */
;;;1289     TIMx->SMCR = tmpsmcr;
00002a  8105              STRH     r5,[r0,#8]
;;;1290     /* Write to TIMx CCMR1 */
;;;1291     TIMx->CCMR1 = tmpccmr1;
00002c  8304              STRH     r4,[r0,#0x18]
;;;1292     /* Write to TIMx CCER */
;;;1293     TIMx->CCER = tmpccer;
00002e  8401              STRH     r1,[r0,#0x20]
;;;1294   }
000030  bd70              POP      {r4-r6,pc}
;;;1295   
                          ENDP


                          AREA ||i.TIM_ForcedOC1Config||, CODE, READONLY, ALIGN=1

                  TIM_ForcedOC1Config PROC
;;;1304     */
;;;1305   void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;1306   {
;;;1307     uint16_t tmpccmr1 = 0;
;;;1308     /* Check the parameters */
;;;1309     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;1310     assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
;;;1311     tmpccmr1 = TIMx->CCMR1;
;;;1312     /* Reset the OC1M Bits */
;;;1313     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
000002  f0220270          BIC      r2,r2,#0x70
;;;1314     /* Configure The Forced output Mode */
;;;1315     tmpccmr1 |= TIM_ForcedAction;
000006  430a              ORRS     r2,r2,r1
;;;1316     /* Write to TIMx CCMR1 register */
;;;1317     TIMx->CCMR1 = tmpccmr1;
000008  8302              STRH     r2,[r0,#0x18]
;;;1318   }
00000a  4770              BX       lr
;;;1319   
                          ENDP


                          AREA ||i.TIM_ForcedOC2Config||, CODE, READONLY, ALIGN=1

                  TIM_ForcedOC2Config PROC
;;;1328     */
;;;1329   void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;1330   {
;;;1331     uint16_t tmpccmr1 = 0;
;;;1332     /* Check the parameters */
;;;1333     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1334     assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
;;;1335     tmpccmr1 = TIMx->CCMR1;
;;;1336     /* Reset the OC2M Bits */
;;;1337     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
;;;1338     /* Configure The Forced output Mode */
;;;1339     tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
000002  f64f73ff          MOV      r3,#0xffff
000006  f42242e0          BIC      r2,r2,#0x7000         ;1337
00000a  ea032101          AND      r1,r3,r1,LSL #8
00000e  4311              ORRS     r1,r1,r2
;;;1340     /* Write to TIMx CCMR1 register */
;;;1341     TIMx->CCMR1 = tmpccmr1;
000010  8301              STRH     r1,[r0,#0x18]
;;;1342   }
000012  4770              BX       lr
;;;1343   
                          ENDP


                          AREA ||i.TIM_ForcedOC3Config||, CODE, READONLY, ALIGN=1

                  TIM_ForcedOC3Config PROC
;;;1352     */
;;;1353   void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
000000  8b82              LDRH     r2,[r0,#0x1c]
;;;1354   {
;;;1355     uint16_t tmpccmr2 = 0;
;;;1356     /* Check the parameters */
;;;1357     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1358     assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
;;;1359     tmpccmr2 = TIMx->CCMR2;
;;;1360     /* Reset the OC1M Bits */
;;;1361     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
000002  f0220270          BIC      r2,r2,#0x70
;;;1362     /* Configure The Forced output Mode */
;;;1363     tmpccmr2 |= TIM_ForcedAction;
000006  430a              ORRS     r2,r2,r1
;;;1364     /* Write to TIMx CCMR2 register */
;;;1365     TIMx->CCMR2 = tmpccmr2;
000008  8382              STRH     r2,[r0,#0x1c]
;;;1366   }
00000a  4770              BX       lr
;;;1367   
                          ENDP


                          AREA ||i.TIM_ForcedOC4Config||, CODE, READONLY, ALIGN=1

                  TIM_ForcedOC4Config PROC
;;;1376     */
;;;1377   void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
000000  8b82              LDRH     r2,[r0,#0x1c]
;;;1378   {
;;;1379     uint16_t tmpccmr2 = 0;
;;;1380     /* Check the parameters */
;;;1381     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1382     assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
;;;1383     tmpccmr2 = TIMx->CCMR2;
;;;1384     /* Reset the OC2M Bits */
;;;1385     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
;;;1386     /* Configure The Forced output Mode */
;;;1387     tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
000002  f64f73ff          MOV      r3,#0xffff
000006  f42242e0          BIC      r2,r2,#0x7000         ;1385
00000a  ea032101          AND      r1,r3,r1,LSL #8
00000e  4311              ORRS     r1,r1,r2
;;;1388     /* Write to TIMx CCMR2 register */
;;;1389     TIMx->CCMR2 = tmpccmr2;
000010  8381              STRH     r1,[r0,#0x1c]
;;;1390   }
000012  4770              BX       lr
;;;1391   
                          ENDP


                          AREA ||i.TIM_GenerateEvent||, CODE, READONLY, ALIGN=1

                  TIM_GenerateEvent PROC
;;;898      */
;;;899    void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
000000  8281              STRH     r1,[r0,#0x14]
;;;900    { 
;;;901      /* Check the parameters */
;;;902      assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;903      assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
;;;904      
;;;905      /* Set the event sources */
;;;906      TIMx->EGR = TIM_EventSource;
;;;907    }
000002  4770              BX       lr
;;;908    
                          ENDP


                          AREA ||i.TIM_GetCapture1||, CODE, READONLY, ALIGN=1

                  TIM_GetCapture1 PROC
;;;2446     */
;;;2447   uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
000000  8e80              LDRH     r0,[r0,#0x34]
;;;2448   {
;;;2449     /* Check the parameters */
;;;2450     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;2451     /* Get the Capture 1 Register value */
;;;2452     return TIMx->CCR1;
;;;2453   }
000002  4770              BX       lr
;;;2454   
                          ENDP


                          AREA ||i.TIM_GetCapture2||, CODE, READONLY, ALIGN=1

                  TIM_GetCapture2 PROC
;;;2459     */
;;;2460   uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
000000  8f00              LDRH     r0,[r0,#0x38]
;;;2461   {
;;;2462     /* Check the parameters */
;;;2463     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;2464     /* Get the Capture 2 Register value */
;;;2465     return TIMx->CCR2;
;;;2466   }
000002  4770              BX       lr
;;;2467   
                          ENDP


                          AREA ||i.TIM_GetCapture3||, CODE, READONLY, ALIGN=1

                  TIM_GetCapture3 PROC
;;;2472     */
;;;2473   uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
000000  8f80              LDRH     r0,[r0,#0x3c]
;;;2474   {
;;;2475     /* Check the parameters */
;;;2476     assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
;;;2477     /* Get the Capture 3 Register value */
;;;2478     return TIMx->CCR3;
;;;2479   }
000002  4770              BX       lr
;;;2480   
                          ENDP


                          AREA ||i.TIM_GetCapture4||, CODE, READONLY, ALIGN=1

                  TIM_GetCapture4 PROC
;;;2485     */
;;;2486   uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
000000  f8b00040          LDRH     r0,[r0,#0x40]
;;;2487   {
;;;2488     /* Check the parameters */
;;;2489     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;2490     /* Get the Capture 4 Register value */
;;;2491     return TIMx->CCR4;
;;;2492   }
000004  4770              BX       lr
;;;2493   
                          ENDP


                          AREA ||i.TIM_GetCounter||, CODE, READONLY, ALIGN=1

                  TIM_GetCounter PROC
;;;2498     */
;;;2499   uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
000000  8c80              LDRH     r0,[r0,#0x24]
;;;2500   {
;;;2501     /* Check the parameters */
;;;2502     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2503     /* Get the Counter Register value */
;;;2504     return TIMx->CNT;
;;;2505   }
000002  4770              BX       lr
;;;2506   
                          ENDP


                          AREA ||i.TIM_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  TIM_GetFlagStatus PROC
;;;2545     */
;;;2546   FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
000000  4602              MOV      r2,r0
;;;2547   { 
;;;2548     ITStatus bitstatus = RESET;  
000002  2000              MOVS     r0,#0
;;;2549     /* Check the parameters */
;;;2550     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2551     assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
;;;2552     
;;;2553     if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
000004  8a12              LDRH     r2,[r2,#0x10]
000006  420a              TST      r2,r1
000008  d000              BEQ      |L35.12|
;;;2554     {
;;;2555       bitstatus = SET;
00000a  2001              MOVS     r0,#1
                  |L35.12|
;;;2556     }
;;;2557     else
;;;2558     {
;;;2559       bitstatus = RESET;
;;;2560     }
;;;2561     return bitstatus;
;;;2562   }
00000c  4770              BX       lr
;;;2563   
                          ENDP


                          AREA ||i.TIM_GetITStatus||, CODE, READONLY, ALIGN=1

                  TIM_GetITStatus PROC
;;;2621     */
;;;2622   ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
000000  4602              MOV      r2,r0
;;;2623   {
;;;2624     ITStatus bitstatus = RESET;  
000002  2000              MOVS     r0,#0
;;;2625     uint16_t itstatus = 0x0, itenable = 0x0;
;;;2626     /* Check the parameters */
;;;2627     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2628     assert_param(IS_TIM_GET_IT(TIM_IT));
;;;2629      
;;;2630     itstatus = TIMx->SR & TIM_IT;
000004  8a13              LDRH     r3,[r2,#0x10]
;;;2631     
;;;2632     itenable = TIMx->DIER & TIM_IT;
000006  8992              LDRH     r2,[r2,#0xc]
000008  420b              TST      r3,r1                 ;2630
00000a  ea020201          AND      r2,r2,r1
00000e  d002              BEQ      |L36.22|
;;;2633     if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
000010  2a00              CMP      r2,#0
000012  d000              BEQ      |L36.22|
;;;2634     {
;;;2635       bitstatus = SET;
000014  2001              MOVS     r0,#1
                  |L36.22|
;;;2636     }
;;;2637     else
;;;2638     {
;;;2639       bitstatus = RESET;
;;;2640     }
;;;2641     return bitstatus;
;;;2642   }
000016  4770              BX       lr
;;;2643   
                          ENDP


                          AREA ||i.TIM_GetPrescaler||, CODE, READONLY, ALIGN=1

                  TIM_GetPrescaler PROC
;;;2511     */
;;;2512   uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
000000  8d00              LDRH     r0,[r0,#0x28]
;;;2513   {
;;;2514     /* Check the parameters */
;;;2515     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2516     /* Get the Prescaler Register value */
;;;2517     return TIMx->PSC;
;;;2518   }
000002  4770              BX       lr
;;;2519   
                          ENDP


                          AREA ||i.TIM_ICInit||, CODE, READONLY, ALIGN=1

                  TIM_ICInit PROC
;;;584      */
;;;585    void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;586    {
000004  460d              MOV      r5,r1
;;;587      /* Check the parameters */
;;;588      assert_param(IS_TIM_CHANNEL(TIM_ICInitStruct->TIM_Channel));
;;;589      assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
;;;590      assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
;;;591      assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
;;;592      assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
;;;593      
;;;594      if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
000006  880e              LDRH     r6,[r1,#0]
;;;595      {
;;;596        assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;597        /* TI1 Configuration */
;;;598        TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
000008  8849              LDRH     r1,[r1,#2]
00000a  88aa              LDRH     r2,[r5,#4]
00000c  892b              LDRH     r3,[r5,#8]
00000e  4604              MOV      r4,r0                 ;586
000010  b316              CBZ      r6,|L38.88|
;;;599                   TIM_ICInitStruct->TIM_ICSelection,
;;;600                   TIM_ICInitStruct->TIM_ICFilter);
;;;601        /* Set the Input Capture Prescaler value */
;;;602        TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
;;;603      }
;;;604      else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
000012  2e04              CMP      r6,#4
000014  d028              BEQ      |L38.104|
;;;605      {
;;;606        assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;607        /* TI2 Configuration */
;;;608        TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
;;;609                   TIM_ICInitStruct->TIM_ICSelection,
;;;610                   TIM_ICInitStruct->TIM_ICFilter);
;;;611        /* Set the Input Capture Prescaler value */
;;;612        TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
;;;613      }
;;;614      else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
000016  2e08              CMP      r6,#8
000018  8c26              LDRH     r6,[r4,#0x20]
00001a  f64f70ff          MOV      r0,#0xffff
00001e  d02b              BEQ      |L38.120|
000020  f4265680          BIC      r6,r6,#0x1000
000024  8426              STRH     r6,[r4,#0x20]
000026  8ba7              LDRH     r7,[r4,#0x1c]
000028  8c26              LDRH     r6,[r4,#0x20]
00002a  ea002202          AND      r2,r0,r2,LSL #8
00002e  ea003101          AND      r1,r0,r1,LSL #12
000032  f4274773          BIC      r7,r7,#0xf300
000036  433a              ORRS     r2,r2,r7
000038  ea003003          AND      r0,r0,r3,LSL #12
00003c  4310              ORRS     r0,r0,r2
00003e  f4265200          BIC      r2,r6,#0x2000
000042  430a              ORRS     r2,r2,r1
000044  f4425180          ORR      r1,r2,#0x1000
000048  83a0              STRH     r0,[r4,#0x1c]
00004a  8421              STRH     r1,[r4,#0x20]
;;;615      {
;;;616        assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;617        /* TI3 Configuration */
;;;618        TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
;;;619                   TIM_ICInitStruct->TIM_ICSelection,
;;;620                   TIM_ICInitStruct->TIM_ICFilter);
;;;621        /* Set the Input Capture Prescaler value */
;;;622        TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
;;;623      }
;;;624      else
;;;625      {
;;;626        assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;627        /* TI4 Configuration */
;;;628        TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
;;;629                   TIM_ICInitStruct->TIM_ICSelection,
;;;630                   TIM_ICInitStruct->TIM_ICFilter);
;;;631        /* Set the Input Capture Prescaler value */
;;;632        TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
00004c  88e9              LDRH     r1,[r5,#6]
00004e  4620              MOV      r0,r4
000050  e8bd41f0          POP      {r4-r8,lr}
000054  f7ffbffe          B.W      TIM_SetIC4Prescaler
                  |L38.88|
000058  f7fffffe          BL       TI1_Config
00005c  88e9              LDRH     r1,[r5,#6]            ;602
00005e  4620              MOV      r0,r4                 ;602
000060  e8bd41f0          POP      {r4-r8,lr}            ;602
000064  f7ffbffe          B.W      TIM_SetIC1Prescaler
                  |L38.104|
000068  f7fffffe          BL       TI2_Config
00006c  88e9              LDRH     r1,[r5,#6]            ;612
00006e  4620              MOV      r0,r4                 ;612
000070  e8bd41f0          POP      {r4-r8,lr}            ;612
000074  f7ffbffe          B.W      TIM_SetIC2Prescaler
                  |L38.120|
000078  f4267680          BIC      r6,r6,#0x100          ;612
00007c  8426              STRH     r6,[r4,#0x20]         ;612
00007e  8ba7              LDRH     r7,[r4,#0x1c]         ;612
000080  8c26              LDRH     r6,[r4,#0x20]         ;612
000082  ea002101          AND      r1,r0,r1,LSL #8       ;612
000086  ea001003          AND      r0,r0,r3,LSL #4       ;612
00008a  4310              ORRS     r0,r0,r2              ;612
00008c  f02707f3          BIC      r7,r7,#0xf3           ;612
000090  4338              ORRS     r0,r0,r7              ;612
000092  f4267200          BIC      r2,r6,#0x200          ;612
000096  430a              ORRS     r2,r2,r1              ;612
000098  f4427180          ORR      r1,r2,#0x100          ;612
00009c  83a0              STRH     r0,[r4,#0x1c]         ;612
00009e  8421              STRH     r1,[r4,#0x20]         ;612
0000a0  88e9              LDRH     r1,[r5,#6]            ;622
0000a2  4620              MOV      r0,r4                 ;622
0000a4  e8bd41f0          POP      {r4-r8,lr}            ;622
0000a8  f7ffbffe          B.W      TIM_SetIC3Prescaler
;;;633      }
;;;634    }
;;;635    
                          ENDP


                          AREA ||i.TIM_ICStructInit||, CODE, READONLY, ALIGN=1

                  TIM_ICStructInit PROC
;;;760      */
;;;761    void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
000000  2100              MOVS     r1,#0
;;;762    {
;;;763      /* Set the default configuration */
;;;764      TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
000002  8001              STRH     r1,[r0,#0]
;;;765      TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
000004  8041              STRH     r1,[r0,#2]
;;;766      TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
000006  2201              MOVS     r2,#1
000008  8082              STRH     r2,[r0,#4]
;;;767      TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
00000a  80c1              STRH     r1,[r0,#6]
;;;768      TIM_ICInitStruct->TIM_ICFilter = 0x00;
00000c  8101              STRH     r1,[r0,#8]
;;;769    }
00000e  4770              BX       lr
;;;770    
                          ENDP


                          AREA ||i.TIM_ITConfig||, CODE, READONLY, ALIGN=1

                  TIM_ITConfig PROC
;;;861      */
;;;862    void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
000000  2a00              CMP      r2,#0
;;;863    {  
;;;864      /* Check the parameters */
;;;865      assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;866      assert_param(IS_TIM_IT(TIM_IT));
;;;867      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;868      
;;;869      if (NewState != DISABLE)
;;;870      {
;;;871        /* Enable the Interrupt sources */
;;;872        TIMx->DIER |= TIM_IT;
;;;873      }
;;;874      else
;;;875      {
;;;876        /* Disable the Interrupt sources */
;;;877        TIMx->DIER &= (uint16_t)~TIM_IT;
000002  8982              LDRH     r2,[r0,#0xc]
000004  d001              BEQ      |L40.10|
000006  430a              ORRS     r2,r2,r1              ;872
000008  e000              B        |L40.12|
                  |L40.10|
00000a  438a              BICS     r2,r2,r1
                  |L40.12|
00000c  8182              STRH     r2,[r0,#0xc]          ;872
;;;878      }
;;;879    }
00000e  4770              BX       lr
;;;880    
                          ENDP


                          AREA ||i.TIM_ITRxExternalClockConfig||, CODE, READONLY, ALIGN=1

                  TIM_ITRxExternalClockConfig PROC
;;;997      */
;;;998    void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
000000  b500              PUSH     {lr}
;;;999    {
000002  4603              MOV      r3,r0
;;;1000     /* Check the parameters */
;;;1001     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1002     assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
;;;1003     /* Select the Internal Trigger */
;;;1004     TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
000004  f7fffffe          BL       TIM_SelectInputTrigger
;;;1005     /* Select the External clock mode1 */
;;;1006     TIMx->SMCR |= TIM_SlaveMode_External1;
000008  8918              LDRH     r0,[r3,#8]
00000a  f0400007          ORR      r0,r0,#7
00000e  8118              STRH     r0,[r3,#8]
;;;1007   }
000010  bd00              POP      {pc}
;;;1008   
                          ENDP


                          AREA ||i.TIM_InternalClockConfig||, CODE, READONLY, ALIGN=1

                  TIM_InternalClockConfig PROC
;;;978      */
;;;979    void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
000000  8901              LDRH     r1,[r0,#8]
;;;980    {
;;;981      /* Check the parameters */
;;;982      assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;983      /* Disable slave mode to clock the prescaler directly with the internal clock */
;;;984      TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
000002  f0210107          BIC      r1,r1,#7
000006  8101              STRH     r1,[r0,#8]
;;;985    }
000008  4770              BX       lr
;;;986    
                          ENDP


                          AREA ||i.TIM_OC1FastConfig||, CODE, READONLY, ALIGN=1

                  TIM_OC1FastConfig PROC
;;;1595     */
;;;1596   void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;1597   {
;;;1598     uint16_t tmpccmr1 = 0;
;;;1599     /* Check the parameters */
;;;1600     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;1601     assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
;;;1602     /* Get the TIMx CCMR1 register value */
;;;1603     tmpccmr1 = TIMx->CCMR1;
;;;1604     /* Reset the OC1FE Bit */
;;;1605     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
000002  f0220204          BIC      r2,r2,#4
;;;1606     /* Enable or Disable the Output Compare Fast Bit */
;;;1607     tmpccmr1 |= TIM_OCFast;
000006  430a              ORRS     r2,r2,r1
;;;1608     /* Write to TIMx CCMR1 */
;;;1609     TIMx->CCMR1 = tmpccmr1;
000008  8302              STRH     r2,[r0,#0x18]
;;;1610   }
00000a  4770              BX       lr
;;;1611   
                          ENDP


                          AREA ||i.TIM_OC1Init||, CODE, READONLY, ALIGN=2

                  TIM_OC1Init PROC
;;;276      */
;;;277    void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;278    {
;;;279      uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
;;;280       
;;;281      /* Check the parameters */
;;;282      assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;283      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
;;;284      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
;;;285      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
;;;286     /* Disable the Channel 1: Reset the CC1E Bit */
;;;287      TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
000002  8c02              LDRH     r2,[r0,#0x20]
000004  f0220201          BIC      r2,r2,#1
000008  8402              STRH     r2,[r0,#0x20]
;;;288      /* Get the TIMx CCER register value */
;;;289      tmpccer = TIMx->CCER;
00000a  8c02              LDRH     r2,[r0,#0x20]
;;;290      /* Get the TIMx CR2 register value */
;;;291      tmpcr2 =  TIMx->CR2;
00000c  8883              LDRH     r3,[r0,#4]
;;;292      
;;;293      /* Get the TIMx CCMR1 register value */
;;;294      tmpccmrx = TIMx->CCMR1;
00000e  8b04              LDRH     r4,[r0,#0x18]
;;;295        
;;;296      /* Reset the Output Compare Mode Bits */
;;;297      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
;;;298      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
;;;299    
;;;300      /* Select the Output Compare Mode */
;;;301      tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
;;;302      
;;;303      /* Reset the Output Polarity level */
;;;304      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
000010  f0220202          BIC      r2,r2,#2
000014  f0240573          BIC      r5,r4,#0x73           ;298
000018  880c              LDRH     r4,[r1,#0]            ;301
00001a  432c              ORRS     r4,r4,r5              ;301
;;;305      /* Set the Output Compare Polarity */
;;;306      tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
00001c  890d              LDRH     r5,[r1,#8]
00001e  4315              ORRS     r5,r5,r2
;;;307      
;;;308      /* Set the Output State */
;;;309      tmpccer |= TIM_OCInitStruct->TIM_OutputState;
000020  884a              LDRH     r2,[r1,#2]
000022  432a              ORRS     r2,r2,r5
;;;310        
;;;311      if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
000024  4d11              LDR      r5,|L44.108|
000026  42a8              CMP      r0,r5
000028  d00b              BEQ      |L44.66|
00002a  4d11              LDR      r5,|L44.112|
00002c  42a8              CMP      r0,r5
00002e  d008              BEQ      |L44.66|
000030  4d10              LDR      r5,|L44.116|
000032  42a8              CMP      r0,r5
000034  d005              BEQ      |L44.66|
;;;312         (TIMx == TIM16)|| (TIMx == TIM17))
000036  4d10              LDR      r5,|L44.120|
000038  42a8              CMP      r0,r5
00003a  d002              BEQ      |L44.66|
00003c  4d0f              LDR      r5,|L44.124|
00003e  42a8              CMP      r0,r5
000040  d10d              BNE      |L44.94|
                  |L44.66|
;;;313      {
;;;314        assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
;;;315        assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
;;;316        assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
;;;317        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
;;;318        
;;;319        /* Reset the Output N Polarity level */
;;;320        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
000042  f0220508          BIC      r5,r2,#8
;;;321        /* Set the Output N Polarity */
;;;322        tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
000046  894a              LDRH     r2,[r1,#0xa]
;;;323        
;;;324        /* Reset the Output N State */
;;;325        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
;;;326        /* Set the Output N State */
;;;327        tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
;;;328        
;;;329        /* Reset the Ouput Compare and Output Compare N IDLE State */
;;;330        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
;;;331        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
000048  f4237340          BIC      r3,r3,#0x300
00004c  432a              ORRS     r2,r2,r5              ;322
00004e  f0220504          BIC      r5,r2,#4              ;325
000052  888a              LDRH     r2,[r1,#4]            ;327
000054  432a              ORRS     r2,r2,r5              ;327
;;;332        
;;;333        /* Set the Output Idle state */
;;;334        tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
000056  898d              LDRH     r5,[r1,#0xc]
000058  431d              ORRS     r5,r5,r3
;;;335        /* Set the Output N Idle state */
;;;336        tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
00005a  89cb              LDRH     r3,[r1,#0xe]
00005c  432b              ORRS     r3,r3,r5
                  |L44.94|
;;;337      }
;;;338      /* Write to TIMx CR2 */
;;;339      TIMx->CR2 = tmpcr2;
00005e  8083              STRH     r3,[r0,#4]
;;;340      
;;;341      /* Write to TIMx CCMR1 */
;;;342      TIMx->CCMR1 = tmpccmrx;
000060  8304              STRH     r4,[r0,#0x18]
;;;343    
;;;344      /* Set the Capture Compare Register value */
;;;345      TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
000062  88c9              LDRH     r1,[r1,#6]
000064  8681              STRH     r1,[r0,#0x34]
;;;346     
;;;347      /* Write to TIMx CCER */
;;;348      TIMx->CCER = tmpccer;
000066  8402              STRH     r2,[r0,#0x20]
;;;349    }
000068  bd30              POP      {r4,r5,pc}
;;;350    
                          ENDP

00006a  0000              DCW      0x0000
                  |L44.108|
                          DCD      0x40012c00
                  |L44.112|
                          DCD      0x40013400
                  |L44.116|
                          DCD      0x40014000
                  |L44.120|
                          DCD      0x40014400
                  |L44.124|
                          DCD      0x40014800

                          AREA ||i.TIM_OC1NPolarityConfig||, CODE, READONLY, ALIGN=1

                  TIM_OC1NPolarityConfig PROC
;;;1817     */
;;;1818   void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
000000  8c02              LDRH     r2,[r0,#0x20]
;;;1819   {
;;;1820     uint16_t tmpccer = 0;
;;;1821     /* Check the parameters */
;;;1822     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
;;;1823     assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
;;;1824      
;;;1825     tmpccer = TIMx->CCER;
;;;1826     /* Set or Reset the CC1NP Bit */
;;;1827     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
000002  f0220208          BIC      r2,r2,#8
;;;1828     tmpccer |= TIM_OCNPolarity;
000006  430a              ORRS     r2,r2,r1
;;;1829     /* Write to TIMx CCER register */
;;;1830     TIMx->CCER = tmpccer;
000008  8402              STRH     r2,[r0,#0x20]
;;;1831   }
00000a  4770              BX       lr
;;;1832   
                          ENDP


                          AREA ||i.TIM_OC1PolarityConfig||, CODE, READONLY, ALIGN=1

                  TIM_OC1PolarityConfig PROC
;;;1794     */
;;;1795   void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
000000  8c02              LDRH     r2,[r0,#0x20]
;;;1796   {
;;;1797     uint16_t tmpccer = 0;
;;;1798     /* Check the parameters */
;;;1799     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;1800     assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
;;;1801     tmpccer = TIMx->CCER;
;;;1802     /* Set or Reset the CC1P Bit */
;;;1803     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
000002  f0220202          BIC      r2,r2,#2
;;;1804     tmpccer |= TIM_OCPolarity;
000006  430a              ORRS     r2,r2,r1
;;;1805     /* Write to TIMx CCER register */
;;;1806     TIMx->CCER = tmpccer;
000008  8402              STRH     r2,[r0,#0x20]
;;;1807   }
00000a  4770              BX       lr
;;;1808   
                          ENDP


                          AREA ||i.TIM_OC1PreloadConfig||, CODE, READONLY, ALIGN=1

                  TIM_OC1PreloadConfig PROC
;;;1498     */
;;;1499   void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;1500   {
;;;1501     uint16_t tmpccmr1 = 0;
;;;1502     /* Check the parameters */
;;;1503     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;1504     assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
;;;1505     tmpccmr1 = TIMx->CCMR1;
;;;1506     /* Reset the OC1PE Bit */
;;;1507     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
000002  f0220208          BIC      r2,r2,#8
;;;1508     /* Enable or Disable the Output Compare Preload feature */
;;;1509     tmpccmr1 |= TIM_OCPreload;
000006  430a              ORRS     r2,r2,r1
;;;1510     /* Write to TIMx CCMR1 register */
;;;1511     TIMx->CCMR1 = tmpccmr1;
000008  8302              STRH     r2,[r0,#0x18]
;;;1512   }
00000a  4770              BX       lr
;;;1513   
                          ENDP


                          AREA ||i.TIM_OC2FastConfig||, CODE, READONLY, ALIGN=1

                  TIM_OC2FastConfig PROC
;;;1621     */
;;;1622   void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;1623   {
;;;1624     uint16_t tmpccmr1 = 0;
;;;1625     /* Check the parameters */
;;;1626     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1627     assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
;;;1628     /* Get the TIMx CCMR1 register value */
;;;1629     tmpccmr1 = TIMx->CCMR1;
;;;1630     /* Reset the OC2FE Bit */
;;;1631     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
;;;1632     /* Enable or Disable the Output Compare Fast Bit */
;;;1633     tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
000002  f64f73ff          MOV      r3,#0xffff
000006  f4226280          BIC      r2,r2,#0x400          ;1631
00000a  ea032101          AND      r1,r3,r1,LSL #8
00000e  4311              ORRS     r1,r1,r2
;;;1634     /* Write to TIMx CCMR1 */
;;;1635     TIMx->CCMR1 = tmpccmr1;
000010  8301              STRH     r1,[r0,#0x18]
;;;1636   }
000012  4770              BX       lr
;;;1637   
                          ENDP


                          AREA ||i.TIM_OC2Init||, CODE, READONLY, ALIGN=2

                  TIM_OC2Init PROC
;;;359      */
;;;360    void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;361    {
;;;362      uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
;;;363       
;;;364      /* Check the parameters */
;;;365      assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
;;;366      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
;;;367      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
;;;368      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
;;;369       /* Disable the Channel 2: Reset the CC2E Bit */
;;;370      TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
000002  8c02              LDRH     r2,[r0,#0x20]
000004  f0220210          BIC      r2,r2,#0x10
000008  8402              STRH     r2,[r0,#0x20]
;;;371      
;;;372      /* Get the TIMx CCER register value */  
;;;373      tmpccer = TIMx->CCER;
00000a  8c02              LDRH     r2,[r0,#0x20]
;;;374      /* Get the TIMx CR2 register value */
;;;375      tmpcr2 =  TIMx->CR2;
00000c  8884              LDRH     r4,[r0,#4]
;;;376      
;;;377      /* Get the TIMx CCMR1 register value */
;;;378      tmpccmrx = TIMx->CCMR1;
00000e  8b03              LDRH     r3,[r0,#0x18]
;;;379        
;;;380      /* Reset the Output Compare mode and Capture/Compare selection Bits */
;;;381      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
;;;382      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
;;;383      
;;;384      /* Select the Output Compare Mode */
;;;385      tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
000010  880d              LDRH     r5,[r1,#0]
000012  f42346e6          BIC      r6,r3,#0x7300         ;382
000016  f64f73ff          MOV      r3,#0xffff
00001a  ea032505          AND      r5,r3,r5,LSL #8
00001e  4335              ORRS     r5,r5,r6
;;;386      
;;;387      /* Reset the Output Polarity level */
;;;388      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
;;;389      /* Set the Output Compare Polarity */
;;;390      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
000020  890e              LDRH     r6,[r1,#8]
000022  f0220220          BIC      r2,r2,#0x20           ;388
000026  ea031606          AND      r6,r3,r6,LSL #4
00002a  4316              ORRS     r6,r6,r2
;;;391      
;;;392      /* Set the Output State */
;;;393      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
00002c  884a              LDRH     r2,[r1,#2]
00002e  ea031202          AND      r2,r3,r2,LSL #4
000032  4332              ORRS     r2,r2,r6
;;;394        
;;;395      if((TIMx == TIM1) || (TIMx == TIM8))
000034  4e10              LDR      r6,|L49.120|
000036  42b0              CMP      r0,r6
000038  d002              BEQ      |L49.64|
00003a  4e10              LDR      r6,|L49.124|
00003c  42b0              CMP      r0,r6
00003e  d115              BNE      |L49.108|
                  |L49.64|
;;;396      {
;;;397        assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
;;;398        assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
;;;399        assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
;;;400        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
;;;401        
;;;402        /* Reset the Output N Polarity level */
;;;403        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
000040  f0220680          BIC      r6,r2,#0x80
;;;404        /* Set the Output N Polarity */
;;;405        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
000044  894a              LDRH     r2,[r1,#0xa]
;;;406        
;;;407        /* Reset the Output N State */
;;;408        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
;;;409        /* Set the Output N State */
;;;410        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
;;;411        
;;;412        /* Reset the Ouput Compare and Output Compare N IDLE State */
;;;413        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
;;;414        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
000046  f4246440          BIC      r4,r4,#0xc00
00004a  ea031202          AND      r2,r3,r2,LSL #4       ;405
00004e  4332              ORRS     r2,r2,r6              ;405
000050  f0220640          BIC      r6,r2,#0x40           ;408
000054  888a              LDRH     r2,[r1,#4]            ;410
000056  ea031202          AND      r2,r3,r2,LSL #4       ;410
00005a  4332              ORRS     r2,r2,r6              ;410
;;;415        
;;;416        /* Set the Output Idle state */
;;;417        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
00005c  898e              LDRH     r6,[r1,#0xc]
00005e  ea030686          AND      r6,r3,r6,LSL #2
000062  4326              ORRS     r6,r6,r4
;;;418        /* Set the Output N Idle state */
;;;419        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
000064  89cc              LDRH     r4,[r1,#0xe]
000066  ea030484          AND      r4,r3,r4,LSL #2
00006a  4334              ORRS     r4,r4,r6
                  |L49.108|
;;;420      }
;;;421      /* Write to TIMx CR2 */
;;;422      TIMx->CR2 = tmpcr2;
00006c  8084              STRH     r4,[r0,#4]
;;;423      
;;;424      /* Write to TIMx CCMR1 */
;;;425      TIMx->CCMR1 = tmpccmrx;
00006e  8305              STRH     r5,[r0,#0x18]
;;;426    
;;;427      /* Set the Capture Compare Register value */
;;;428      TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
000070  88c9              LDRH     r1,[r1,#6]
000072  8701              STRH     r1,[r0,#0x38]
;;;429      
;;;430      /* Write to TIMx CCER */
;;;431      TIMx->CCER = tmpccer;
000074  8402              STRH     r2,[r0,#0x20]
;;;432    }
000076  bd70              POP      {r4-r6,pc}
;;;433    
                          ENDP

                  |L49.120|
                          DCD      0x40012c00
                  |L49.124|
                          DCD      0x40013400

                          AREA ||i.TIM_OC2NPolarityConfig||, CODE, READONLY, ALIGN=1

                  TIM_OC2NPolarityConfig PROC
;;;1864     */
;;;1865   void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
000000  8c02              LDRH     r2,[r0,#0x20]
;;;1866   {
;;;1867     uint16_t tmpccer = 0;
;;;1868     /* Check the parameters */
;;;1869     assert_param(IS_TIM_LIST1_PERIPH(TIMx));
;;;1870     assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
;;;1871     
;;;1872     tmpccer = TIMx->CCER;
;;;1873     /* Set or Reset the CC2NP Bit */
;;;1874     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
;;;1875     tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
000002  f64f73ff          MOV      r3,#0xffff
000006  f0220280          BIC      r2,r2,#0x80           ;1874
00000a  ea031101          AND      r1,r3,r1,LSL #4
00000e  4311              ORRS     r1,r1,r2
;;;1876     /* Write to TIMx CCER register */
;;;1877     TIMx->CCER = tmpccer;
000010  8401              STRH     r1,[r0,#0x20]
;;;1878   }
000012  4770              BX       lr
;;;1879   
                          ENDP


                          AREA ||i.TIM_OC2PolarityConfig||, CODE, READONLY, ALIGN=1

                  TIM_OC2PolarityConfig PROC
;;;1841     */
;;;1842   void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
000000  8c02              LDRH     r2,[r0,#0x20]
;;;1843   {
;;;1844     uint16_t tmpccer = 0;
;;;1845     /* Check the parameters */
;;;1846     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1847     assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
;;;1848     tmpccer = TIMx->CCER;
;;;1849     /* Set or Reset the CC2P Bit */
;;;1850     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
;;;1851     tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
000002  f64f73ff          MOV      r3,#0xffff
000006  f0220220          BIC      r2,r2,#0x20           ;1850
00000a  ea031101          AND      r1,r3,r1,LSL #4
00000e  4311              ORRS     r1,r1,r2
;;;1852     /* Write to TIMx CCER register */
;;;1853     TIMx->CCER = tmpccer;
000010  8401              STRH     r1,[r0,#0x20]
;;;1854   }
000012  4770              BX       lr
;;;1855   
                          ENDP


                          AREA ||i.TIM_OC2PreloadConfig||, CODE, READONLY, ALIGN=1

                  TIM_OC2PreloadConfig PROC
;;;1523     */
;;;1524   void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;1525   {
;;;1526     uint16_t tmpccmr1 = 0;
;;;1527     /* Check the parameters */
;;;1528     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1529     assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
;;;1530     tmpccmr1 = TIMx->CCMR1;
;;;1531     /* Reset the OC2PE Bit */
;;;1532     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
;;;1533     /* Enable or Disable the Output Compare Preload feature */
;;;1534     tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
000002  f64f73ff          MOV      r3,#0xffff
000006  f4226200          BIC      r2,r2,#0x800          ;1532
00000a  ea032101          AND      r1,r3,r1,LSL #8
00000e  4311              ORRS     r1,r1,r2
;;;1535     /* Write to TIMx CCMR1 register */
;;;1536     TIMx->CCMR1 = tmpccmr1;
000010  8301              STRH     r1,[r0,#0x18]
;;;1537   }
000012  4770              BX       lr
;;;1538   
                          ENDP


                          AREA ||i.TIM_OC3FastConfig||, CODE, READONLY, ALIGN=1

                  TIM_OC3FastConfig PROC
;;;1646     */
;;;1647   void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
000000  8b82              LDRH     r2,[r0,#0x1c]
;;;1648   {
;;;1649     uint16_t tmpccmr2 = 0;
;;;1650     /* Check the parameters */
;;;1651     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1652     assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
;;;1653     /* Get the TIMx CCMR2 register value */
;;;1654     tmpccmr2 = TIMx->CCMR2;
;;;1655     /* Reset the OC3FE Bit */
;;;1656     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
000002  f0220204          BIC      r2,r2,#4
;;;1657     /* Enable or Disable the Output Compare Fast Bit */
;;;1658     tmpccmr2 |= TIM_OCFast;
000006  430a              ORRS     r2,r2,r1
;;;1659     /* Write to TIMx CCMR2 */
;;;1660     TIMx->CCMR2 = tmpccmr2;
000008  8382              STRH     r2,[r0,#0x1c]
;;;1661   }
00000a  4770              BX       lr
;;;1662   
                          ENDP


                          AREA ||i.TIM_OC3Init||, CODE, READONLY, ALIGN=2

                  TIM_OC3Init PROC
;;;441      */
;;;442    void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;443    {
;;;444      uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
;;;445       
;;;446      /* Check the parameters */
;;;447      assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
;;;448      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
;;;449      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
;;;450      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
;;;451      /* Disable the Channel 2: Reset the CC2E Bit */
;;;452      TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
000002  8c02              LDRH     r2,[r0,#0x20]
000004  f4227280          BIC      r2,r2,#0x100
000008  8402              STRH     r2,[r0,#0x20]
;;;453      
;;;454      /* Get the TIMx CCER register value */
;;;455      tmpccer = TIMx->CCER;
00000a  8c02              LDRH     r2,[r0,#0x20]
;;;456      /* Get the TIMx CR2 register value */
;;;457      tmpcr2 =  TIMx->CR2;
00000c  8884              LDRH     r4,[r0,#4]
;;;458      
;;;459      /* Get the TIMx CCMR2 register value */
;;;460      tmpccmrx = TIMx->CCMR2;
00000e  8b83              LDRH     r3,[r0,#0x1c]
;;;461        
;;;462      /* Reset the Output Compare mode and Capture/Compare selection Bits */
;;;463      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
;;;464      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
;;;465      /* Select the Output Compare Mode */
;;;466      tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
000010  880d              LDRH     r5,[r1,#0]
000012  f0230373          BIC      r3,r3,#0x73           ;464
000016  431d              ORRS     r5,r5,r3
;;;467      
;;;468      /* Reset the Output Polarity level */
;;;469      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
000018  f4227300          BIC      r3,r2,#0x200
;;;470      /* Set the Output Compare Polarity */
;;;471      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
00001c  890e              LDRH     r6,[r1,#8]
00001e  f64f72ff          MOV      r2,#0xffff
000022  ea022606          AND      r6,r2,r6,LSL #8
000026  431e              ORRS     r6,r6,r3
;;;472      
;;;473      /* Set the Output State */
;;;474      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
000028  884b              LDRH     r3,[r1,#2]
00002a  ea022303          AND      r3,r2,r3,LSL #8
00002e  4333              ORRS     r3,r3,r6
;;;475        
;;;476      if((TIMx == TIM1) || (TIMx == TIM8))
000030  4e10              LDR      r6,|L54.116|
000032  42b0              CMP      r0,r6
000034  d002              BEQ      |L54.60|
000036  4e10              LDR      r6,|L54.120|
000038  42b0              CMP      r0,r6
00003a  d115              BNE      |L54.104|
                  |L54.60|
;;;477      {
;;;478        assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
;;;479        assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
;;;480        assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
;;;481        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
;;;482        
;;;483        /* Reset the Output N Polarity level */
;;;484        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
00003c  f4236600          BIC      r6,r3,#0x800
;;;485        /* Set the Output N Polarity */
;;;486        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
000040  894b              LDRH     r3,[r1,#0xa]
;;;487        /* Reset the Output N State */
;;;488        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
;;;489        
;;;490        /* Set the Output N State */
;;;491        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
;;;492        /* Reset the Ouput Compare and Output Compare N IDLE State */
;;;493        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
;;;494        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
000042  f4245440          BIC      r4,r4,#0x3000
000046  ea022303          AND      r3,r2,r3,LSL #8       ;486
00004a  4333              ORRS     r3,r3,r6              ;486
00004c  f4236680          BIC      r6,r3,#0x400          ;488
000050  888b              LDRH     r3,[r1,#4]            ;491
000052  ea022303          AND      r3,r2,r3,LSL #8       ;491
000056  4333              ORRS     r3,r3,r6              ;491
;;;495        /* Set the Output Idle state */
;;;496        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
000058  898e              LDRH     r6,[r1,#0xc]
00005a  ea021606          AND      r6,r2,r6,LSL #4
00005e  4326              ORRS     r6,r6,r4
;;;497        /* Set the Output N Idle state */
;;;498        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
000060  89cc              LDRH     r4,[r1,#0xe]
000062  ea021404          AND      r4,r2,r4,LSL #4
000066  4334              ORRS     r4,r4,r6
                  |L54.104|
;;;499      }
;;;500      /* Write to TIMx CR2 */
;;;501      TIMx->CR2 = tmpcr2;
000068  8084              STRH     r4,[r0,#4]
;;;502      
;;;503      /* Write to TIMx CCMR2 */
;;;504      TIMx->CCMR2 = tmpccmrx;
00006a  8385              STRH     r5,[r0,#0x1c]
;;;505    
;;;506      /* Set the Capture Compare Register value */
;;;507      TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
00006c  88c9              LDRH     r1,[r1,#6]
00006e  8781              STRH     r1,[r0,#0x3c]
;;;508      
;;;509      /* Write to TIMx CCER */
;;;510      TIMx->CCER = tmpccer;
000070  8403              STRH     r3,[r0,#0x20]
;;;511    }
000072  bd70              POP      {r4-r6,pc}
;;;512    
                          ENDP

                  |L54.116|
                          DCD      0x40012c00
                  |L54.120|
                          DCD      0x40013400

                          AREA ||i.TIM_OC3NPolarityConfig||, CODE, READONLY, ALIGN=1

                  TIM_OC3NPolarityConfig PROC
;;;1911     */
;;;1912   void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
000000  8c02              LDRH     r2,[r0,#0x20]
;;;1913   {
;;;1914     uint16_t tmpccer = 0;
;;;1915    
;;;1916     /* Check the parameters */
;;;1917     assert_param(IS_TIM_LIST1_PERIPH(TIMx));
;;;1918     assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
;;;1919       
;;;1920     tmpccer = TIMx->CCER;
;;;1921     /* Set or Reset the CC3NP Bit */
;;;1922     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
;;;1923     tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
000002  f64f73ff          MOV      r3,#0xffff
000006  f4226200          BIC      r2,r2,#0x800          ;1922
00000a  ea032101          AND      r1,r3,r1,LSL #8
00000e  4311              ORRS     r1,r1,r2
;;;1924     /* Write to TIMx CCER register */
;;;1925     TIMx->CCER = tmpccer;
000010  8401              STRH     r1,[r0,#0x20]
;;;1926   }
000012  4770              BX       lr
;;;1927   
                          ENDP


                          AREA ||i.TIM_OC3PolarityConfig||, CODE, READONLY, ALIGN=1

                  TIM_OC3PolarityConfig PROC
;;;1888     */
;;;1889   void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
000000  8c02              LDRH     r2,[r0,#0x20]
;;;1890   {
;;;1891     uint16_t tmpccer = 0;
;;;1892     /* Check the parameters */
;;;1893     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1894     assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
;;;1895     tmpccer = TIMx->CCER;
;;;1896     /* Set or Reset the CC3P Bit */
;;;1897     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
;;;1898     tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
000002  f64f73ff          MOV      r3,#0xffff
000006  f4227200          BIC      r2,r2,#0x200          ;1897
00000a  ea032101          AND      r1,r3,r1,LSL #8
00000e  4311              ORRS     r1,r1,r2
;;;1899     /* Write to TIMx CCER register */
;;;1900     TIMx->CCER = tmpccer;
000010  8401              STRH     r1,[r0,#0x20]
;;;1901   }
000012  4770              BX       lr
;;;1902   
                          ENDP


                          AREA ||i.TIM_OC3PreloadConfig||, CODE, READONLY, ALIGN=1

                  TIM_OC3PreloadConfig PROC
;;;1547     */
;;;1548   void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
000000  8b82              LDRH     r2,[r0,#0x1c]
;;;1549   {
;;;1550     uint16_t tmpccmr2 = 0;
;;;1551     /* Check the parameters */
;;;1552     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1553     assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
;;;1554     tmpccmr2 = TIMx->CCMR2;
;;;1555     /* Reset the OC3PE Bit */
;;;1556     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
000002  f0220208          BIC      r2,r2,#8
;;;1557     /* Enable or Disable the Output Compare Preload feature */
;;;1558     tmpccmr2 |= TIM_OCPreload;
000006  430a              ORRS     r2,r2,r1
;;;1559     /* Write to TIMx CCMR2 register */
;;;1560     TIMx->CCMR2 = tmpccmr2;
000008  8382              STRH     r2,[r0,#0x1c]
;;;1561   }
00000a  4770              BX       lr
;;;1562   
                          ENDP


                          AREA ||i.TIM_OC4FastConfig||, CODE, READONLY, ALIGN=1

                  TIM_OC4FastConfig PROC
;;;1671     */
;;;1672   void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
000000  8b82              LDRH     r2,[r0,#0x1c]
;;;1673   {
;;;1674     uint16_t tmpccmr2 = 0;
;;;1675     /* Check the parameters */
;;;1676     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1677     assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
;;;1678     /* Get the TIMx CCMR2 register value */
;;;1679     tmpccmr2 = TIMx->CCMR2;
;;;1680     /* Reset the OC4FE Bit */
;;;1681     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
;;;1682     /* Enable or Disable the Output Compare Fast Bit */
;;;1683     tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
000002  f64f73ff          MOV      r3,#0xffff
000006  f4226280          BIC      r2,r2,#0x400          ;1681
00000a  ea032101          AND      r1,r3,r1,LSL #8
00000e  4311              ORRS     r1,r1,r2
;;;1684     /* Write to TIMx CCMR2 */
;;;1685     TIMx->CCMR2 = tmpccmr2;
000010  8381              STRH     r1,[r0,#0x1c]
;;;1686   }
000012  4770              BX       lr
;;;1687   
                          ENDP


                          AREA ||i.TIM_OC4Init||, CODE, READONLY, ALIGN=2

                  TIM_OC4Init PROC
;;;520      */
;;;521    void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;522    {
;;;523      uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
;;;524       
;;;525      /* Check the parameters */
;;;526      assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
;;;527      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
;;;528      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
;;;529      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
;;;530      /* Disable the Channel 2: Reset the CC4E Bit */
;;;531      TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
000002  8c02              LDRH     r2,[r0,#0x20]
000004  f4225280          BIC      r2,r2,#0x1000
000008  8402              STRH     r2,[r0,#0x20]
;;;532      
;;;533      /* Get the TIMx CCER register value */
;;;534      tmpccer = TIMx->CCER;
00000a  8c04              LDRH     r4,[r0,#0x20]
;;;535      /* Get the TIMx CR2 register value */
;;;536      tmpcr2 =  TIMx->CR2;
00000c  8882              LDRH     r2,[r0,#4]
;;;537      
;;;538      /* Get the TIMx CCMR2 register value */
;;;539      tmpccmrx = TIMx->CCMR2;
00000e  8b83              LDRH     r3,[r0,#0x1c]
;;;540        
;;;541      /* Reset the Output Compare mode and Capture/Compare selection Bits */
;;;542      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
;;;543      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
;;;544      
;;;545      /* Select the Output Compare Mode */
;;;546      tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
000010  880d              LDRH     r5,[r1,#0]
000012  f42346e6          BIC      r6,r3,#0x7300         ;543
000016  f64f73ff          MOV      r3,#0xffff
00001a  ea032505          AND      r5,r3,r5,LSL #8
00001e  4335              ORRS     r5,r5,r6
;;;547      
;;;548      /* Reset the Output Polarity level */
;;;549      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
000020  f4245600          BIC      r6,r4,#0x2000
;;;550      /* Set the Output Compare Polarity */
;;;551      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
000024  890c              LDRH     r4,[r1,#8]
000026  ea033404          AND      r4,r3,r4,LSL #12
00002a  4334              ORRS     r4,r4,r6
;;;552      
;;;553      /* Set the Output State */
;;;554      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
00002c  884e              LDRH     r6,[r1,#2]
00002e  ea033606          AND      r6,r3,r6,LSL #12
000032  4326              ORRS     r6,r6,r4
;;;555        
;;;556      if((TIMx == TIM1) || (TIMx == TIM8))
000034  4c09              LDR      r4,|L59.92|
000036  42a0              CMP      r0,r4
000038  d002              BEQ      |L59.64|
00003a  4c09              LDR      r4,|L59.96|
00003c  42a0              CMP      r0,r4
00003e  d105              BNE      |L59.76|
                  |L59.64|
;;;557      {
;;;558        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
;;;559        /* Reset the Ouput Compare IDLE State */
;;;560        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
000040  f4224480          BIC      r4,r2,#0x4000
;;;561        /* Set the Output Idle state */
;;;562        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
000044  898a              LDRH     r2,[r1,#0xc]
000046  ea031282          AND      r2,r3,r2,LSL #6
00004a  4322              ORRS     r2,r2,r4
                  |L59.76|
;;;563      }
;;;564      /* Write to TIMx CR2 */
;;;565      TIMx->CR2 = tmpcr2;
00004c  8082              STRH     r2,[r0,#4]
;;;566      
;;;567      /* Write to TIMx CCMR2 */  
;;;568      TIMx->CCMR2 = tmpccmrx;
00004e  8385              STRH     r5,[r0,#0x1c]
;;;569    
;;;570      /* Set the Capture Compare Register value */
;;;571      TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
000050  88c9              LDRH     r1,[r1,#6]
000052  f8a01040          STRH     r1,[r0,#0x40]
;;;572      
;;;573      /* Write to TIMx CCER */
;;;574      TIMx->CCER = tmpccer;
000056  8406              STRH     r6,[r0,#0x20]
;;;575    }
000058  bd70              POP      {r4-r6,pc}
;;;576    
                          ENDP

00005a  0000              DCW      0x0000
                  |L59.92|
                          DCD      0x40012c00
                  |L59.96|
                          DCD      0x40013400

                          AREA ||i.TIM_OC4PolarityConfig||, CODE, READONLY, ALIGN=1

                  TIM_OC4PolarityConfig PROC
;;;1936     */
;;;1937   void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
000000  8c02              LDRH     r2,[r0,#0x20]
;;;1938   {
;;;1939     uint16_t tmpccer = 0;
;;;1940     /* Check the parameters */
;;;1941     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1942     assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
;;;1943     tmpccer = TIMx->CCER;
;;;1944     /* Set or Reset the CC4P Bit */
;;;1945     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
;;;1946     tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
000002  f64f73ff          MOV      r3,#0xffff
000006  f4225200          BIC      r2,r2,#0x2000         ;1945
00000a  ea033101          AND      r1,r3,r1,LSL #12
00000e  4311              ORRS     r1,r1,r2
;;;1947     /* Write to TIMx CCER register */
;;;1948     TIMx->CCER = tmpccer;
000010  8401              STRH     r1,[r0,#0x20]
;;;1949   }
000012  4770              BX       lr
;;;1950   
                          ENDP


                          AREA ||i.TIM_OC4PreloadConfig||, CODE, READONLY, ALIGN=1

                  TIM_OC4PreloadConfig PROC
;;;1571     */
;;;1572   void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
000000  8b82              LDRH     r2,[r0,#0x1c]
;;;1573   {
;;;1574     uint16_t tmpccmr2 = 0;
;;;1575     /* Check the parameters */
;;;1576     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1577     assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
;;;1578     tmpccmr2 = TIMx->CCMR2;
;;;1579     /* Reset the OC4PE Bit */
;;;1580     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
;;;1581     /* Enable or Disable the Output Compare Preload feature */
;;;1582     tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
000002  f64f73ff          MOV      r3,#0xffff
000006  f4226200          BIC      r2,r2,#0x800          ;1580
00000a  ea032101          AND      r1,r3,r1,LSL #8
00000e  4311              ORRS     r1,r1,r2
;;;1583     /* Write to TIMx CCMR2 register */
;;;1584     TIMx->CCMR2 = tmpccmr2;
000010  8381              STRH     r1,[r0,#0x1c]
;;;1585   }
000012  4770              BX       lr
;;;1586   
                          ENDP


                          AREA ||i.TIM_OCStructInit||, CODE, READONLY, ALIGN=1

                  TIM_OCStructInit PROC
;;;741      */
;;;742    void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
000000  2100              MOVS     r1,#0
;;;743    {
;;;744      /* Set the default configuration */
;;;745      TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
000002  8001              STRH     r1,[r0,#0]
;;;746      TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
000004  8041              STRH     r1,[r0,#2]
;;;747      TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
000006  8081              STRH     r1,[r0,#4]
;;;748      TIM_OCInitStruct->TIM_Pulse = 0x0000;
000008  80c1              STRH     r1,[r0,#6]
;;;749      TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
00000a  8101              STRH     r1,[r0,#8]
;;;750      TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
00000c  8141              STRH     r1,[r0,#0xa]
;;;751      TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
00000e  8181              STRH     r1,[r0,#0xc]
;;;752      TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
000010  81c1              STRH     r1,[r0,#0xe]
;;;753    }
000012  4770              BX       lr
;;;754    
                          ENDP


                          AREA ||i.TIM_PWMIConfig||, CODE, READONLY, ALIGN=1

                  TIM_PWMIConfig PROC
;;;643      */
;;;644    void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;645    {
000004  460c              MOV      r4,r1
;;;646      uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
000006  2600              MOVS     r6,#0
;;;647      uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
;;;648      /* Check the parameters */
;;;649      assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;650      /* Select the Opposite Input Polarity */
;;;651      if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
000008  8849              LDRH     r1,[r1,#2]
00000a  4607              MOV      r7,r0                 ;645
00000c  2501              MOVS     r5,#1                 ;647
00000e  b901              CBNZ     r1,|L63.18|
;;;652      {
;;;653        icoppositepolarity = TIM_ICPolarity_Falling;
000010  2602              MOVS     r6,#2
                  |L63.18|
;;;654      }
;;;655      else
;;;656      {
;;;657        icoppositepolarity = TIM_ICPolarity_Rising;
;;;658      }
;;;659      /* Select the Opposite Input */
;;;660      if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
000012  88a2              LDRH     r2,[r4,#4]
000014  2a01              CMP      r2,#1
000016  d100              BNE      |L63.26|
;;;661      {
;;;662        icoppositeselection = TIM_ICSelection_IndirectTI;
000018  2502              MOVS     r5,#2
                  |L63.26|
;;;663      }
;;;664      else
;;;665      {
;;;666        icoppositeselection = TIM_ICSelection_DirectTI;
;;;667      }
;;;668      if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
00001a  8820              LDRH     r0,[r4,#0]
;;;669      {
;;;670        /* TI1 Configuration */
;;;671        TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
00001c  8923              LDRH     r3,[r4,#8]
00001e  2800              CMP      r0,#0                 ;668
;;;672                   TIM_ICInitStruct->TIM_ICFilter);
;;;673        /* Set the Input Capture Prescaler value */
;;;674        TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
;;;675        /* TI2 Configuration */
;;;676        TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
;;;677        /* Set the Input Capture Prescaler value */
;;;678        TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
;;;679      }
;;;680      else
;;;681      { 
;;;682        /* TI2 Configuration */
;;;683        TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
000020  4638              MOV      r0,r7
000022  d011              BEQ      |L63.72|
000024  f7fffffe          BL       TI2_Config
;;;684                   TIM_ICInitStruct->TIM_ICFilter);
;;;685        /* Set the Input Capture Prescaler value */
;;;686        TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
000028  88e1              LDRH     r1,[r4,#6]
00002a  4638              MOV      r0,r7
00002c  f7fffffe          BL       TIM_SetIC2Prescaler
;;;687        /* TI1 Configuration */
;;;688        TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
000030  8923              LDRH     r3,[r4,#8]
000032  462a              MOV      r2,r5
000034  4631              MOV      r1,r6
000036  4638              MOV      r0,r7
000038  f7fffffe          BL       TI1_Config
;;;689        /* Set the Input Capture Prescaler value */
;;;690        TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
00003c  88e1              LDRH     r1,[r4,#6]
00003e  4638              MOV      r0,r7
000040  e8bd41f0          POP      {r4-r8,lr}
000044  f7ffbffe          B.W      TIM_SetIC1Prescaler
                  |L63.72|
000048  f7fffffe          BL       TI1_Config
00004c  88e1              LDRH     r1,[r4,#6]            ;674
00004e  4638              MOV      r0,r7                 ;674
000050  f7fffffe          BL       TIM_SetIC1Prescaler
000054  8923              LDRH     r3,[r4,#8]            ;676
000056  462a              MOV      r2,r5                 ;676
000058  4631              MOV      r1,r6                 ;676
00005a  4638              MOV      r0,r7                 ;676
00005c  f7fffffe          BL       TI2_Config
000060  88e1              LDRH     r1,[r4,#6]            ;678
000062  4638              MOV      r0,r7                 ;678
000064  e8bd41f0          POP      {r4-r8,lr}            ;678
000068  f7ffbffe          B.W      TIM_SetIC2Prescaler
;;;691      }
;;;692    }
;;;693    
                          ENDP


                          AREA ||i.TIM_PrescalerConfig||, CODE, READONLY, ALIGN=1

                  TIM_PrescalerConfig PROC
;;;1165     */
;;;1166   void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
000000  8501              STRH     r1,[r0,#0x28]
;;;1167   {
;;;1168     /* Check the parameters */
;;;1169     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;1170     assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
;;;1171     /* Set the Prescaler value */
;;;1172     TIMx->PSC = Prescaler;
;;;1173     /* Set or reset the UG Bit */
;;;1174     TIMx->EGR = TIM_PSCReloadMode;
000002  8282              STRH     r2,[r0,#0x14]
;;;1175   }
000004  4770              BX       lr
;;;1176   
                          ENDP


                          AREA ||i.TIM_SelectCCDMA||, CODE, READONLY, ALIGN=1

                  TIM_SelectCCDMA PROC
;;;1447     */
;;;1448   void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;1449   {
;;;1450     /* Check the parameters */
;;;1451     assert_param(IS_TIM_LIST4_PERIPH(TIMx));
;;;1452     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1453     if (NewState != DISABLE)
;;;1454     {
;;;1455       /* Set the CCDS Bit */
;;;1456       TIMx->CR2 |= TIM_CR2_CCDS;
;;;1457     }
;;;1458     else
;;;1459     {
;;;1460       /* Reset the CCDS Bit */
;;;1461       TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
000002  8881              LDRH     r1,[r0,#4]
000004  d002              BEQ      |L65.12|
000006  f0410108          ORR      r1,r1,#8              ;1456
00000a  e001              B        |L65.16|
                  |L65.12|
00000c  f0210108          BIC      r1,r1,#8
                  |L65.16|
000010  8081              STRH     r1,[r0,#4]            ;1456
;;;1462     }
;;;1463   }
000012  4770              BX       lr
;;;1464   
                          ENDP


                          AREA ||i.TIM_SelectCOM||, CODE, READONLY, ALIGN=1

                  TIM_SelectCOM PROC
;;;1422     */
;;;1423   void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;1424   {
;;;1425     /* Check the parameters */
;;;1426     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
;;;1427     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1428     if (NewState != DISABLE)
;;;1429     {
;;;1430       /* Set the COM Bit */
;;;1431       TIMx->CR2 |= TIM_CR2_CCUS;
;;;1432     }
;;;1433     else
;;;1434     {
;;;1435       /* Reset the COM Bit */
;;;1436       TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
000002  8881              LDRH     r1,[r0,#4]
000004  d002              BEQ      |L66.12|
000006  f0410104          ORR      r1,r1,#4              ;1431
00000a  e001              B        |L66.16|
                  |L66.12|
00000c  f0210104          BIC      r1,r1,#4
                  |L66.16|
000010  8081              STRH     r1,[r0,#4]            ;1431
;;;1437     }
;;;1438   }
000012  4770              BX       lr
;;;1439   
                          ENDP


                          AREA ||i.TIM_SelectHallSensor||, CODE, READONLY, ALIGN=1

                  TIM_SelectHallSensor PROC
;;;2133     */
;;;2134   void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;2135   {
;;;2136     /* Check the parameters */
;;;2137     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;2138     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2139     if (NewState != DISABLE)
;;;2140     {
;;;2141       /* Set the TI1S Bit */
;;;2142       TIMx->CR2 |= TIM_CR2_TI1S;
;;;2143     }
;;;2144     else
;;;2145     {
;;;2146       /* Reset the TI1S Bit */
;;;2147       TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
000002  8881              LDRH     r1,[r0,#4]
000004  d002              BEQ      |L67.12|
000006  f0410180          ORR      r1,r1,#0x80           ;2142
00000a  e001              B        |L67.16|
                  |L67.12|
00000c  f0210180          BIC      r1,r1,#0x80
                  |L67.16|
000010  8081              STRH     r1,[r0,#4]            ;2142
;;;2148     }
;;;2149   }
000012  4770              BX       lr
;;;2150   
                          ENDP


                          AREA ||i.TIM_SelectInputTrigger||, CODE, READONLY, ALIGN=1

                  TIM_SelectInputTrigger PROC
;;;1218     */
;;;1219   void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
000000  8902              LDRH     r2,[r0,#8]
;;;1220   {
;;;1221     uint16_t tmpsmcr = 0;
;;;1222     /* Check the parameters */
;;;1223     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1224     assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
;;;1225     /* Get the TIMx SMCR register value */
;;;1226     tmpsmcr = TIMx->SMCR;
;;;1227     /* Reset the TS Bits */
;;;1228     tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
000002  f0220270          BIC      r2,r2,#0x70
;;;1229     /* Set the Input Trigger source */
;;;1230     tmpsmcr |= TIM_InputTriggerSource;
000006  430a              ORRS     r2,r2,r1
;;;1231     /* Write to TIMx SMCR */
;;;1232     TIMx->SMCR = tmpsmcr;
000008  8102              STRH     r2,[r0,#8]
;;;1233   }
00000a  4770              BX       lr
;;;1234   
                          ENDP


                          AREA ||i.TIM_SelectMasterSlaveMode||, CODE, READONLY, ALIGN=1

                  TIM_SelectMasterSlaveMode PROC
;;;2235     */
;;;2236   void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
000000  8902              LDRH     r2,[r0,#8]
;;;2237   {
;;;2238     /* Check the parameters */
;;;2239     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;2240     assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
;;;2241     /* Reset the MSM Bit */
;;;2242     TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
000002  f0220280          BIC      r2,r2,#0x80
000006  8102              STRH     r2,[r0,#8]
;;;2243     
;;;2244     /* Set or Reset the MSM Bit */
;;;2245     TIMx->SMCR |= TIM_MasterSlaveMode;
000008  8902              LDRH     r2,[r0,#8]
00000a  430a              ORRS     r2,r2,r1
00000c  8102              STRH     r2,[r0,#8]
;;;2246   }
00000e  4770              BX       lr
;;;2247   
                          ENDP


                          AREA ||i.TIM_SelectOCxM||, CODE, READONLY, ALIGN=1

                  TIM_SelectOCxM PROC
;;;2034     */
;;;2035   void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
000000  b530              PUSH     {r4,r5,lr}
;;;2036   {
;;;2037     uint32_t tmp = 0;
;;;2038     uint16_t tmp1 = 0;
;;;2039   
;;;2040     /* Check the parameters */
;;;2041     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;2042     assert_param(IS_TIM_CHANNEL(TIM_Channel));
;;;2043     assert_param(IS_TIM_OCM(TIM_OCMode));
;;;2044   
;;;2045     tmp = (uint32_t) TIMx;
;;;2046     tmp += CCMR_Offset;
;;;2047   
;;;2048     tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
000002  2401              MOVS     r4,#1
;;;2049   
;;;2050     /* Disable the Channel: Reset the CCxE Bit */
;;;2051     TIMx->CCER &= (uint16_t) ~tmp1;
000004  8c05              LDRH     r5,[r0,#0x20]
000006  f1000318          ADD      r3,r0,#0x18           ;2046
00000a  408c              LSLS     r4,r4,r1              ;2048
00000c  43a5              BICS     r5,r5,r4
00000e  8405              STRH     r5,[r0,#0x20]
000010  b189              CBZ      r1,|L70.54|
;;;2052   
;;;2053     if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
000012  2908              CMP      r1,#8
000014  d00f              BEQ      |L70.54|
000016  1f09              SUBS     r1,r1,#4
;;;2054     {
;;;2055       tmp += (TIM_Channel>>1);
;;;2056   
;;;2057       /* Reset the OCxM bits in the CCMRx register */
;;;2058       *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
;;;2059      
;;;2060       /* Configure the OCxM bits in the CCMRx register */
;;;2061       *(__IO uint32_t *) tmp |= TIM_OCMode;
;;;2062     }
;;;2063     else
;;;2064     {
;;;2065       tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
000018  f3c1004e          UBFX     r0,r1,#1,#15
00001c  4418              ADD      r0,r0,r3
;;;2066   
;;;2067       /* Reset the OCxM bits in the CCMRx register */
;;;2068       *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
00001e  6801              LDR      r1,[r0,#0]
000020  f42141e0          BIC      r1,r1,#0x7000
000024  6001              STR      r1,[r0,#0]
;;;2069       
;;;2070       /* Configure the OCxM bits in the CCMRx register */
;;;2071       *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
000026  6801              LDR      r1,[r0,#0]
000028  f64f73ff          MOV      r3,#0xffff
00002c  ea032202          AND      r2,r3,r2,LSL #8
                  |L70.48|
000030  4311              ORRS     r1,r1,r2              ;2061
000032  6001              STR      r1,[r0,#0]            ;2061
;;;2072     }
;;;2073   }
000034  bd30              POP      {r4,r5,pc}
                  |L70.54|
000036  eb030051          ADD      r0,r3,r1,LSR #1       ;2055
00003a  6801              LDR      r1,[r0,#0]            ;2058
00003c  f0210170          BIC      r1,r1,#0x70           ;2058
000040  6001              STR      r1,[r0,#0]            ;2058
000042  6801              LDR      r1,[r0,#0]            ;2061
000044  e7f4              B        |L70.48|
;;;2074   
                          ENDP


                          AREA ||i.TIM_SelectOnePulseMode||, CODE, READONLY, ALIGN=1

                  TIM_SelectOnePulseMode PROC
;;;2159     */
;;;2160   void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
000000  8802              LDRH     r2,[r0,#0]
;;;2161   {
;;;2162     /* Check the parameters */
;;;2163     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2164     assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
;;;2165     /* Reset the OPM Bit */
;;;2166     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
000002  f0220208          BIC      r2,r2,#8
000006  8002              STRH     r2,[r0,#0]
;;;2167     /* Configure the OPM Mode */
;;;2168     TIMx->CR1 |= TIM_OPMode;
000008  8802              LDRH     r2,[r0,#0]
00000a  430a              ORRS     r2,r2,r1
00000c  8002              STRH     r2,[r0,#0]
;;;2169   }
00000e  4770              BX       lr
;;;2170   
                          ENDP


                          AREA ||i.TIM_SelectOutputTrigger||, CODE, READONLY, ALIGN=1

                  TIM_SelectOutputTrigger PROC
;;;2191     */
;;;2192   void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
000000  8882              LDRH     r2,[r0,#4]
;;;2193   {
;;;2194     /* Check the parameters */
;;;2195     assert_param(IS_TIM_LIST7_PERIPH(TIMx));
;;;2196     assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
;;;2197     /* Reset the MMS Bits */
;;;2198     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
000002  f0220270          BIC      r2,r2,#0x70
000006  8082              STRH     r2,[r0,#4]
;;;2199     /* Select the TRGO source */
;;;2200     TIMx->CR2 |=  TIM_TRGOSource;
000008  8882              LDRH     r2,[r0,#4]
00000a  430a              ORRS     r2,r2,r1
00000c  8082              STRH     r2,[r0,#4]
;;;2201   }
00000e  4770              BX       lr
;;;2202   
                          ENDP


                          AREA ||i.TIM_SelectSlaveMode||, CODE, READONLY, ALIGN=1

                  TIM_SelectSlaveMode PROC
;;;2214     */
;;;2215   void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
000000  8902              LDRH     r2,[r0,#8]
;;;2216   {
;;;2217     /* Check the parameters */
;;;2218     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;2219     assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
;;;2220    /* Reset the SMS Bits */
;;;2221     TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
000002  f0220207          BIC      r2,r2,#7
000006  8102              STRH     r2,[r0,#8]
;;;2222     /* Select the Slave Mode */
;;;2223     TIMx->SMCR |= TIM_SlaveMode;
000008  8902              LDRH     r2,[r0,#8]
00000a  430a              ORRS     r2,r2,r1
00000c  8102              STRH     r2,[r0,#8]
;;;2224   }
00000e  4770              BX       lr
;;;2225   
                          ENDP


                          AREA ||i.TIM_SetAutoreload||, CODE, READONLY, ALIGN=1

                  TIM_SetAutoreload PROC
;;;2267     */
;;;2268   void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
000000  8581              STRH     r1,[r0,#0x2c]
;;;2269   {
;;;2270     /* Check the parameters */
;;;2271     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2272     /* Set the Autoreload Register value */
;;;2273     TIMx->ARR = Autoreload;
;;;2274   }
000002  4770              BX       lr
;;;2275   
                          ENDP


                          AREA ||i.TIM_SetClockDivision||, CODE, READONLY, ALIGN=1

                  TIM_SetClockDivision PROC
;;;2430     */
;;;2431   void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
000000  8802              LDRH     r2,[r0,#0]
;;;2432   {
;;;2433     /* Check the parameters */
;;;2434     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;2435     assert_param(IS_TIM_CKD_DIV(TIM_CKD));
;;;2436     /* Reset the CKD Bits */
;;;2437     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
000002  f4227240          BIC      r2,r2,#0x300
000006  8002              STRH     r2,[r0,#0]
;;;2438     /* Set the CKD value */
;;;2439     TIMx->CR1 |= TIM_CKD;
000008  8802              LDRH     r2,[r0,#0]
00000a  430a              ORRS     r2,r2,r1
00000c  8002              STRH     r2,[r0,#0]
;;;2440   }
00000e  4770              BX       lr
;;;2441   
                          ENDP


                          AREA ||i.TIM_SetCompare1||, CODE, READONLY, ALIGN=1

                  TIM_SetCompare1 PROC
;;;2281     */
;;;2282   void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
000000  8681              STRH     r1,[r0,#0x34]
;;;2283   {
;;;2284     /* Check the parameters */
;;;2285     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;2286     /* Set the Capture Compare1 Register value */
;;;2287     TIMx->CCR1 = Compare1;
;;;2288   }
000002  4770              BX       lr
;;;2289   
                          ENDP


                          AREA ||i.TIM_SetCompare2||, CODE, READONLY, ALIGN=1

                  TIM_SetCompare2 PROC
;;;2295     */
;;;2296   void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
000000  8701              STRH     r1,[r0,#0x38]
;;;2297   {
;;;2298     /* Check the parameters */
;;;2299     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;2300     /* Set the Capture Compare2 Register value */
;;;2301     TIMx->CCR2 = Compare2;
;;;2302   }
000002  4770              BX       lr
;;;2303   
                          ENDP


                          AREA ||i.TIM_SetCompare3||, CODE, READONLY, ALIGN=1

                  TIM_SetCompare3 PROC
;;;2309     */
;;;2310   void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
000000  8781              STRH     r1,[r0,#0x3c]
;;;2311   {
;;;2312     /* Check the parameters */
;;;2313     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;2314     /* Set the Capture Compare3 Register value */
;;;2315     TIMx->CCR3 = Compare3;
;;;2316   }
000002  4770              BX       lr
;;;2317   
                          ENDP


                          AREA ||i.TIM_SetCompare4||, CODE, READONLY, ALIGN=1

                  TIM_SetCompare4 PROC
;;;2323     */
;;;2324   void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
000000  f8a01040          STRH     r1,[r0,#0x40]
;;;2325   {
;;;2326     /* Check the parameters */
;;;2327     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;2328     /* Set the Capture Compare4 Register value */
;;;2329     TIMx->CCR4 = Compare4;
;;;2330   }
000004  4770              BX       lr
;;;2331   
                          ENDP


                          AREA ||i.TIM_SetCounter||, CODE, READONLY, ALIGN=1

                  TIM_SetCounter PROC
;;;2253     */
;;;2254   void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
000000  8481              STRH     r1,[r0,#0x24]
;;;2255   {
;;;2256     /* Check the parameters */
;;;2257     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2258     /* Set the Counter Register value */
;;;2259     TIMx->CNT = Counter;
;;;2260   }
000002  4770              BX       lr
;;;2261   
                          ENDP


                          AREA ||i.TIM_SetIC1Prescaler||, CODE, READONLY, ALIGN=1

                  TIM_SetIC1Prescaler PROC
;;;2342     */
;;;2343   void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;2344   {
;;;2345     /* Check the parameters */
;;;2346     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;2347     assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
;;;2348     /* Reset the IC1PSC Bits */
;;;2349     TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
000002  f022020c          BIC      r2,r2,#0xc
000006  8302              STRH     r2,[r0,#0x18]
;;;2350     /* Set the IC1PSC value */
;;;2351     TIMx->CCMR1 |= TIM_ICPSC;
000008  8b02              LDRH     r2,[r0,#0x18]
00000a  430a              ORRS     r2,r2,r1
00000c  8302              STRH     r2,[r0,#0x18]
;;;2352   }
00000e  4770              BX       lr
;;;2353   
                          ENDP


                          AREA ||i.TIM_SetIC2Prescaler||, CODE, READONLY, ALIGN=1

                  TIM_SetIC2Prescaler PROC
;;;2364     */
;;;2365   void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;2366   {
;;;2367     /* Check the parameters */
;;;2368     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;2369     assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
;;;2370     /* Reset the IC2PSC Bits */
;;;2371     TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
000002  f4226240          BIC      r2,r2,#0xc00
000006  8302              STRH     r2,[r0,#0x18]
;;;2372     /* Set the IC2PSC value */
;;;2373     TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
000008  8b02              LDRH     r2,[r0,#0x18]
00000a  f64f73ff          MOV      r3,#0xffff
00000e  ea032101          AND      r1,r3,r1,LSL #8
000012  430a              ORRS     r2,r2,r1
000014  8302              STRH     r2,[r0,#0x18]
;;;2374   }
000016  4770              BX       lr
;;;2375   
                          ENDP


                          AREA ||i.TIM_SetIC3Prescaler||, CODE, READONLY, ALIGN=1

                  TIM_SetIC3Prescaler PROC
;;;2386     */
;;;2387   void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
000000  8b82              LDRH     r2,[r0,#0x1c]
;;;2388   {
;;;2389     /* Check the parameters */
;;;2390     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;2391     assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
;;;2392     /* Reset the IC3PSC Bits */
;;;2393     TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
000002  f022020c          BIC      r2,r2,#0xc
000006  8382              STRH     r2,[r0,#0x1c]
;;;2394     /* Set the IC3PSC value */
;;;2395     TIMx->CCMR2 |= TIM_ICPSC;
000008  8b82              LDRH     r2,[r0,#0x1c]
00000a  430a              ORRS     r2,r2,r1
00000c  8382              STRH     r2,[r0,#0x1c]
;;;2396   }
00000e  4770              BX       lr
;;;2397   
                          ENDP


                          AREA ||i.TIM_SetIC4Prescaler||, CODE, READONLY, ALIGN=1

                  TIM_SetIC4Prescaler PROC
;;;2408     */
;;;2409   void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
000000  8b82              LDRH     r2,[r0,#0x1c]
;;;2410   {  
;;;2411     /* Check the parameters */
;;;2412     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;2413     assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
;;;2414     /* Reset the IC4PSC Bits */
;;;2415     TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
000002  f4226240          BIC      r2,r2,#0xc00
000006  8382              STRH     r2,[r0,#0x1c]
;;;2416     /* Set the IC4PSC value */
;;;2417     TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
000008  8b82              LDRH     r2,[r0,#0x1c]
00000a  f64f73ff          MOV      r3,#0xffff
00000e  ea032101          AND      r1,r3,r1,LSL #8
000012  430a              ORRS     r2,r2,r1
000014  8382              STRH     r2,[r0,#0x1c]
;;;2418   }
000016  4770              BX       lr
;;;2419   
                          ENDP


                          AREA ||i.TIM_TIxExternalClockConfig||, CODE, READONLY, ALIGN=1

                  TIM_TIxExternalClockConfig PROC
;;;1024     */
;;;1025   void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
000000  b570              PUSH     {r4-r6,lr}
;;;1026                                   uint16_t TIM_ICPolarity, uint16_t ICFilter)
;;;1027   {
000002  4616              MOV      r6,r2
000004  460d              MOV      r5,r1
;;;1028     /* Check the parameters */
;;;1029     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1030     assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
;;;1031     assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
;;;1032     assert_param(IS_TIM_IC_FILTER(ICFilter));
;;;1033     /* Configure the Timer Input Clock Source */
;;;1034     if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
000006  2960              CMP      r1,#0x60
000008  4604              MOV      r4,r0                 ;1027
;;;1035     {
;;;1036       TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
;;;1037     }
;;;1038     else
;;;1039     {
;;;1040       TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
00000a  f04f0201          MOV      r2,#1
00000e  4631              MOV      r1,r6
000010  d00a              BEQ      |L85.40|
000012  f7fffffe          BL       TI1_Config
                  |L85.22|
;;;1041     }
;;;1042     /* Select the Trigger source */
;;;1043     TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
000016  4629              MOV      r1,r5
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       TIM_SelectInputTrigger
;;;1044     /* Select the External clock mode1 */
;;;1045     TIMx->SMCR |= TIM_SlaveMode_External1;
00001e  8920              LDRH     r0,[r4,#8]
000020  f0400007          ORR      r0,r0,#7
000024  8120              STRH     r0,[r4,#8]
;;;1046   }
000026  bd70              POP      {r4-r6,pc}
                  |L85.40|
000028  f7fffffe          BL       TI2_Config
00002c  e7f3              B        |L85.22|
;;;1047   
                          ENDP


                          AREA ||i.TIM_TimeBaseInit||, CODE, READONLY, ALIGN=2

                  TIM_TimeBaseInit PROC
;;;223      */
;;;224    void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;225    {
;;;226      uint16_t tmpcr1 = 0;
;;;227    
;;;228      /* Check the parameters */
;;;229      assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
;;;230      assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
;;;231      assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));
;;;232    
;;;233      tmpcr1 = TIMx->CR1;  
000002  8802              LDRH     r2,[r0,#0]
;;;234    
;;;235      if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
000004  4b1b              LDR      r3,|L86.116|
000006  4c1c              LDR      r4,|L86.120|
000008  4298              CMP      r0,r3
00000a  d00d              BEQ      |L86.40|
00000c  42a0              CMP      r0,r4
00000e  d00b              BEQ      |L86.40|
000010  f1b04f80          CMP      r0,#0x40000000
000014  d008              BEQ      |L86.40|
000016  4d19              LDR      r5,|L86.124|
000018  42a8              CMP      r0,r5
00001a  d005              BEQ      |L86.40|
;;;236         (TIMx == TIM4) || (TIMx == TIM5)) 
00001c  4d18              LDR      r5,|L86.128|
00001e  42a8              CMP      r0,r5
000020  d002              BEQ      |L86.40|
000022  4d18              LDR      r5,|L86.132|
000024  42a8              CMP      r0,r5
000026  d103              BNE      |L86.48|
                  |L86.40|
;;;237      {
;;;238        /* Select the Counter Mode */
;;;239        tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
000028  f0220570          BIC      r5,r2,#0x70
;;;240        tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
00002c  884a              LDRH     r2,[r1,#2]
00002e  432a              ORRS     r2,r2,r5
                  |L86.48|
;;;241      }
;;;242     
;;;243      if((TIMx != TIM6) && (TIMx != TIM7))
000030  4d15              LDR      r5,|L86.136|
000032  42a8              CMP      r0,r5
000034  d006              BEQ      |L86.68|
000036  4d15              LDR      r5,|L86.140|
000038  42a8              CMP      r0,r5
00003a  d003              BEQ      |L86.68|
;;;244      {
;;;245        /* Set the clock division */
;;;246        tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
00003c  f4227540          BIC      r5,r2,#0x300
;;;247        tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
000040  88ca              LDRH     r2,[r1,#6]
000042  432a              ORRS     r2,r2,r5
                  |L86.68|
;;;248      }
;;;249    
;;;250      TIMx->CR1 = tmpcr1;
000044  8002              STRH     r2,[r0,#0]
;;;251    
;;;252      /* Set the Autoreload value */
;;;253      TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
000046  888a              LDRH     r2,[r1,#4]
000048  8582              STRH     r2,[r0,#0x2c]
;;;254     
;;;255      /* Set the Prescaler value */
;;;256      TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
00004a  880a              LDRH     r2,[r1,#0]
00004c  8502              STRH     r2,[r0,#0x28]
;;;257        
;;;258      if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
00004e  4298              CMP      r0,r3
000050  d00a              BEQ      |L86.104|
000052  42a0              CMP      r0,r4
000054  d008              BEQ      |L86.104|
000056  4a0e              LDR      r2,|L86.144|
000058  4290              CMP      r0,r2
00005a  d005              BEQ      |L86.104|
00005c  4a0d              LDR      r2,|L86.148|
00005e  4290              CMP      r0,r2
000060  d002              BEQ      |L86.104|
000062  4a0d              LDR      r2,|L86.152|
000064  4290              CMP      r0,r2
000066  d101              BNE      |L86.108|
                  |L86.104|
;;;259      {
;;;260        /* Set the Repetition Counter value */
;;;261        TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
000068  7a09              LDRB     r1,[r1,#8]
00006a  8601              STRH     r1,[r0,#0x30]
                  |L86.108|
;;;262      }
;;;263    
;;;264      /* Generate an update event to reload the Prescaler and the Repetition counter
;;;265         values immediately */
;;;266      TIMx->EGR = TIM_PSCReloadMode_Immediate;           
00006c  2101              MOVS     r1,#1
00006e  8281              STRH     r1,[r0,#0x14]
;;;267    }
000070  bd30              POP      {r4,r5,pc}
;;;268    
                          ENDP

000072  0000              DCW      0x0000
                  |L86.116|
                          DCD      0x40012c00
                  |L86.120|
                          DCD      0x40013400
                  |L86.124|
                          DCD      0x40000400
                  |L86.128|
                          DCD      0x40000800
                  |L86.132|
                          DCD      0x40000c00
                  |L86.136|
                          DCD      0x40001000
                  |L86.140|
                          DCD      0x40001400
                  |L86.144|
                          DCD      0x40014000
                  |L86.148|
                          DCD      0x40014400
                  |L86.152|
                          DCD      0x40014800

                          AREA ||i.TIM_TimeBaseStructInit||, CODE, READONLY, ALIGN=1

                  TIM_TimeBaseStructInit PROC
;;;725      */
;;;726    void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
000000  f64f71ff          MOV      r1,#0xffff
;;;727    {
;;;728      /* Set the default configuration */
;;;729      TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
000004  8081              STRH     r1,[r0,#4]
;;;730      TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
000006  2100              MOVS     r1,#0
000008  8001              STRH     r1,[r0,#0]
;;;731      TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
00000a  80c1              STRH     r1,[r0,#6]
;;;732      TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
00000c  8041              STRH     r1,[r0,#2]
;;;733      TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
00000e  7201              STRB     r1,[r0,#8]
;;;734    }
000010  4770              BX       lr
;;;735    
                          ENDP


                          AREA ||i.TIM_UpdateDisableConfig||, CODE, READONLY, ALIGN=1

                  TIM_UpdateDisableConfig PROC
;;;2081     */
;;;2082   void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;2083   {
;;;2084     /* Check the parameters */
;;;2085     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2086     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2087     if (NewState != DISABLE)
;;;2088     {
;;;2089       /* Set the Update Disable Bit */
;;;2090       TIMx->CR1 |= TIM_CR1_UDIS;
;;;2091     }
;;;2092     else
;;;2093     {
;;;2094       /* Reset the Update Disable Bit */
;;;2095       TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
000002  8801              LDRH     r1,[r0,#0]
000004  d002              BEQ      |L88.12|
000006  f0410102          ORR      r1,r1,#2              ;2090
00000a  e001              B        |L88.16|
                  |L88.12|
00000c  f0210102          BIC      r1,r1,#2
                  |L88.16|
000010  8001              STRH     r1,[r0,#0]            ;2090
;;;2096     }
;;;2097   }
000012  4770              BX       lr
;;;2098   
                          ENDP


                          AREA ||i.TIM_UpdateRequestConfig||, CODE, READONLY, ALIGN=1

                  TIM_UpdateRequestConfig PROC
;;;2109     */
;;;2110   void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
000000  2900              CMP      r1,#0
;;;2111   {
;;;2112     /* Check the parameters */
;;;2113     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2114     assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
;;;2115     if (TIM_UpdateSource != TIM_UpdateSource_Global)
;;;2116     {
;;;2117       /* Set the URS Bit */
;;;2118       TIMx->CR1 |= TIM_CR1_URS;
;;;2119     }
;;;2120     else
;;;2121     {
;;;2122       /* Reset the URS Bit */
;;;2123       TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
000002  8801              LDRH     r1,[r0,#0]
000004  d002              BEQ      |L89.12|
000006  f0410104          ORR      r1,r1,#4              ;2118
00000a  e001              B        |L89.16|
                  |L89.12|
00000c  f0210104          BIC      r1,r1,#4
                  |L89.16|
000010  8001              STRH     r1,[r0,#0]            ;2118
;;;2124     }
;;;2125   }
000012  4770              BX       lr
;;;2126   
                          ENDP

