; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -opwm.o --asm_dir=.\ --list_dir=.\ --depend=pwm.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\ -I..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210E_EVAL -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL --omf_browse=pwm.crf ..\Pwm.c]
                          THUMB

                          AREA ||i.PWM1_Init||, CODE, READONLY, ALIGN=2

                  PWM1_Init PROC
;;;3      u16 arrSave=0;
;;;4      void PWM1_Init(u16 arr)  //arr 为周期 1LSB=100us  
000000  b530              PUSH     {r4,r5,lr}
;;;5      {  
000002  4604              MOV      r4,r0
;;;6      	GPIO_InitTypeDef GPIO_InitStructure;
;;;7      	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;8      	TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;9      	
;;;10       arrSave=arr;
000004  4821              LDR      r0,|L1.140|
000006  b089              SUB      sp,sp,#0x24           ;5
;;;11     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);	                   //使能定时器3时钟
000008  2101              MOVS     r1,#1
00000a  8004              STRH     r4,[r0,#0]            ;10
00000c  2002              MOVS     r0,#2
00000e  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;12     																																								//使能GPIO外设和AFIO复用功能模块时钟
;;;13       RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC  | RCC_APB2Periph_AFIO, ENABLE);
000012  2101              MOVS     r1,#1
000014  2011              MOVS     r0,#0x11
000016  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;14     
;;;15       GPIO_PinRemapConfig(GPIO_FullRemap_TIM3, ENABLE);                        //Timer3部分重映射  TIM3_CH2->B5    
00001a  2101              MOVS     r1,#1
00001c  481c              LDR      r0,|L1.144|
00001e  f7fffffe          BL       GPIO_PinRemapConfig
;;;16      
;;;17        /*设置该引脚为复用输出功能,输出TIM3 CH2的PWM脉冲波形	GPIOB.5*/
;;;18     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;        //TIM3_CH1
000022  2040              MOVS     r0,#0x40
000024  f8ad001c          STRH     r0,[sp,#0x1c]
;;;19     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  //复用推挽输出
000028  2018              MOVS     r0,#0x18
00002a  f88d001f          STRB     r0,[sp,#0x1f]
;;;20     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00002e  2003              MOVS     r0,#3
000030  f88d001e          STRB     r0,[sp,#0x1e]
;;;21     	GPIO_Init(GPIOC, &GPIO_InitStructure);           //初始化GPIO
000034  a907              ADD      r1,sp,#0x1c
000036  4817              LDR      r0,|L1.148|
000038  f7fffffe          BL       GPIO_Init
;;;22     	 
;;;23        /*初始化TIM3*/
;;;24     	TIM_TimeBaseStructure.TIM_Period = arr-1; //设置在下一个更新事件装入活动的自动重装载寄存器周期的值
00003c  1e64              SUBS     r4,r4,#1
00003e  f8ad4004          STRH     r4,[sp,#4]
;;;25     	TIM_TimeBaseStructure.TIM_Prescaler =7199; //设置用来作为TIMx时钟频率除数的预分频值 
000042  f641401f          MOV      r0,#0x1c1f
000046  f8ad0000          STRH     r0,[sp,#0]
;;;26     	TIM_TimeBaseStructure.TIM_ClockDivision = 0; //设置时钟分割:TDTS = Tck_tim,TIM3时钟为72MHZ
00004a  2400              MOVS     r4,#0
;;;27     	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM向上计数模式
;;;28     	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure); //根据TIM_TimeBaseInitStruct中指定的参数初始化TIMx的时间基数单位
00004c  4d12              LDR      r5,|L1.152|
00004e  f8ad4006          STRH     r4,[sp,#6]            ;26
000052  f8ad4002          STRH     r4,[sp,#2]            ;27
000056  4669              MOV      r1,sp
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       TIM_TimeBaseInit
;;;29     	
;;;30     	/*初始化TIM3 Channel2 PWM模式*/	 
;;;31     	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; //选择定时器模式:TIM脉冲宽度调制模式1
00005e  2060              MOVS     r0,#0x60
000060  f8ad000c          STRH     r0,[sp,#0xc]
;;;32      	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable; //比较输出使能
000064  2001              MOVS     r0,#1
000066  f8ad000e          STRH     r0,[sp,#0xe]
;;;33     	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High; //输出极性:TIM输出比较极性高
00006a  f8ad4014          STRH     r4,[sp,#0x14]
;;;34     	TIM_OC1Init(TIM3, &TIM_OCInitStructure);  //根据T指定的参数初始化外设TIM3 OC1
00006e  a903              ADD      r1,sp,#0xc
000070  4628              MOV      r0,r5
000072  f7fffffe          BL       TIM_OC1Init
;;;35     
;;;36     	TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable);  //使能TIM3在CCR1上的预装载寄存器
000076  2108              MOVS     r1,#8
000078  4628              MOV      r0,r5
00007a  f7fffffe          BL       TIM_OC1PreloadConfig
;;;37      
;;;38     	TIM_Cmd(TIM3, ENABLE);  //使能TIM3
00007e  2101              MOVS     r1,#1
000080  4628              MOV      r0,r5
000082  f7fffffe          BL       TIM_Cmd
;;;39     }
000086  b009              ADD      sp,sp,#0x24
000088  bd30              POP      {r4,r5,pc}
;;;40     void PWM1_SetHighTime(u16 HighTime)     //PWM1 设置输出高电平时间
                          ENDP

00008a  0000              DCW      0x0000
                  |L1.140|
                          DCD      ||.data||
                  |L1.144|
                          DCD      0x001a0c00
                  |L1.148|
                          DCD      0x40011000
                  |L1.152|
                          DCD      0x40000400

                          AREA ||i.PWM1_SetHighTime||, CODE, READONLY, ALIGN=2

                  PWM1_SetHighTime PROC
;;;39     }
;;;40     void PWM1_SetHighTime(u16 HighTime)     //PWM1 设置输出高电平时间
000000  4904              LDR      r1,|L2.20|
;;;41     {
;;;42     	if(HighTime>arrSave)
000002  8809              LDRH     r1,[r1,#0]  ; arrSave
000004  4288              CMP      r0,r1
000006  d900              BLS      |L2.10|
000008  4608              MOV      r0,r1
                  |L2.10|
;;;43     		HighTime=arrSave;
;;;44     	TIM_SetCompare1(TIM3,HighTime);
00000a  4601              MOV      r1,r0
00000c  4802              LDR      r0,|L2.24|
00000e  f7ffbffe          B.W      TIM_SetCompare1
;;;45     }
;;;46     void PWM2_Init(u16 arr)  //arr 为周期 1LSB=100us  
                          ENDP

000012  0000              DCW      0x0000
                  |L2.20|
                          DCD      ||.data||
                  |L2.24|
                          DCD      0x40000400

                          AREA ||i.PWM2_Init||, CODE, READONLY, ALIGN=2

                  PWM2_Init PROC
;;;45     }
;;;46     void PWM2_Init(u16 arr)  //arr 为周期 1LSB=100us  
000000  b530              PUSH     {r4,r5,lr}
;;;47     {  
000002  4604              MOV      r4,r0
;;;48     	GPIO_InitTypeDef GPIO_InitStructure;
;;;49     	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;50     	TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;51     	
;;;52       arrSave=arr;
000004  4821              LDR      r0,|L3.140|
000006  b089              SUB      sp,sp,#0x24           ;47
;;;53     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);	                   //使能定时器3时钟
000008  2101              MOVS     r1,#1
00000a  8004              STRH     r4,[r0,#0]            ;52
00000c  2004              MOVS     r0,#4
00000e  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;54     																																								//使能GPIO外设和AFIO复用功能模块时钟
;;;55       RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD  | RCC_APB2Periph_AFIO, ENABLE);
000012  2101              MOVS     r1,#1
000014  2021              MOVS     r0,#0x21
000016  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;56     
;;;57       GPIO_PinRemapConfig(GPIO_Remap_TIM4, ENABLE);                        //Timer3部分重映射  TIM3_CH2->B5    
00001a  2101              MOVS     r1,#1
00001c  030d              LSLS     r5,r1,#12
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       GPIO_PinRemapConfig
;;;58      
;;;59        /*设置该引脚为复用输出功能,输出TIM3 CH2的PWM脉冲波形	GPIOB.5*/
;;;60     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;        //TIM3_CH1
000024  f8ad501c          STRH     r5,[sp,#0x1c]
;;;61     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  //复用推挽输出
000028  2018              MOVS     r0,#0x18
00002a  f88d001f          STRB     r0,[sp,#0x1f]
;;;62     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00002e  2003              MOVS     r0,#3
000030  f88d001e          STRB     r0,[sp,#0x1e]
;;;63     	GPIO_Init(GPIOD, &GPIO_InitStructure);           //初始化GPIO
000034  a907              ADD      r1,sp,#0x1c
000036  4816              LDR      r0,|L3.144|
000038  f7fffffe          BL       GPIO_Init
;;;64     	 
;;;65        /*初始化TIM3*/
;;;66     	TIM_TimeBaseStructure.TIM_Period = arr-1; //设置在下一个更新事件装入活动的自动重装载寄存器周期的值
00003c  1e64              SUBS     r4,r4,#1
00003e  f8ad4004          STRH     r4,[sp,#4]
;;;67     	TIM_TimeBaseStructure.TIM_Prescaler =7199; //设置用来作为TIMx时钟频率除数的预分频值 
000042  f641401f          MOV      r0,#0x1c1f
000046  f8ad0000          STRH     r0,[sp,#0]
;;;68     	TIM_TimeBaseStructure.TIM_ClockDivision = 0; //设置时钟分割:TDTS = Tck_tim,TIM3时钟为72MHZ
00004a  2400              MOVS     r4,#0
;;;69     	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM向上计数模式
;;;70     	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure); //根据TIM_TimeBaseInitStruct中指定的参数初始化TIMx的时间基数单位
00004c  4d11              LDR      r5,|L3.148|
00004e  f8ad4006          STRH     r4,[sp,#6]            ;68
000052  f8ad4002          STRH     r4,[sp,#2]            ;69
000056  4669              MOV      r1,sp
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       TIM_TimeBaseInit
;;;71     	
;;;72     	/*初始化TIM3 Channel2 PWM模式*/	 
;;;73     	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; //选择定时器模式:TIM脉冲宽度调制模式1
00005e  2060              MOVS     r0,#0x60
000060  f8ad000c          STRH     r0,[sp,#0xc]
;;;74      	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable; //比较输出使能
000064  2001              MOVS     r0,#1
000066  f8ad000e          STRH     r0,[sp,#0xe]
;;;75     	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High; //输出极性:TIM输出比较极性高
00006a  f8ad4014          STRH     r4,[sp,#0x14]
;;;76     	TIM_OC1Init(TIM4, &TIM_OCInitStructure);  //根据T指定的参数初始化外设TIM3 OC1
00006e  a903              ADD      r1,sp,#0xc
000070  4628              MOV      r0,r5
000072  f7fffffe          BL       TIM_OC1Init
;;;77     
;;;78     	TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);  //使能TIM3在CCR1上的预装载寄存器
000076  2108              MOVS     r1,#8
000078  4628              MOV      r0,r5
00007a  f7fffffe          BL       TIM_OC1PreloadConfig
;;;79      
;;;80     	TIM_Cmd(TIM4, ENABLE);  //使能TIM3
00007e  2101              MOVS     r1,#1
000080  4628              MOV      r0,r5
000082  f7fffffe          BL       TIM_Cmd
;;;81     }
000086  b009              ADD      sp,sp,#0x24
000088  bd30              POP      {r4,r5,pc}
;;;82     void PWM2_SetHighTime(u16 HighTime)     //PWM2 设置输出高电平时间
                          ENDP

00008a  0000              DCW      0x0000
                  |L3.140|
                          DCD      ||.data||
                  |L3.144|
                          DCD      0x40011400
                  |L3.148|
                          DCD      0x40000800

                          AREA ||i.PWM2_SetHighTime||, CODE, READONLY, ALIGN=2

                  PWM2_SetHighTime PROC
;;;81     }
;;;82     void PWM2_SetHighTime(u16 HighTime)     //PWM2 设置输出高电平时间
000000  4904              LDR      r1,|L4.20|
;;;83     {
;;;84     	if(HighTime>arrSave)
000002  8809              LDRH     r1,[r1,#0]  ; arrSave
000004  4288              CMP      r0,r1
000006  d900              BLS      |L4.10|
000008  4608              MOV      r0,r1
                  |L4.10|
;;;85     		HighTime=arrSave;
;;;86     	TIM_SetCompare1(TIM4,HighTime);
00000a  4601              MOV      r1,r0
00000c  4802              LDR      r0,|L4.24|
00000e  f7ffbffe          B.W      TIM_SetCompare1
;;;87     }
;;;88     
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      ||.data||
                  |L4.24|
                          DCD      0x40000800

                          AREA ||.data||, DATA, ALIGN=1

                  arrSave
000000  0000              DCW      0x0000
