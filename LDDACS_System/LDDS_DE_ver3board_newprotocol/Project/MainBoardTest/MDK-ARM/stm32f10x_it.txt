; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -ostm32f10x_it.o --asm_dir=.\ --list_dir=.\ --depend=stm32f10x_it.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\ -I..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210E_EVAL -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL --omf_browse=stm32f10x_it.crf ..\stm32f10x_it.c]
                          THUMB

                          AREA ||i.BusFault_Handler||, CODE, READONLY, ALIGN=1

                  BusFault_Handler PROC
                  |L1.0|
;;;130      */
;;;131    void BusFault_Handler(void)
000000  e7fe              B        |L1.0|
;;;132    {
;;;133      /* Go to infinite loop when Bus Fault exception occurs */
;;;134      while (1)
;;;135      {
;;;136      }
;;;137    }
;;;138    
                          ENDP


                          AREA ||i.DebugMon_Handler||, CODE, READONLY, ALIGN=1

                  DebugMon_Handler PROC
;;;165      */
;;;166    void DebugMon_Handler(void)
000000  4770              BX       lr
;;;167    {
;;;168    }
;;;169    
                          ENDP


                          AREA ||i.HardFault_Handler||, CODE, READONLY, ALIGN=1

                  HardFault_Handler PROC
                  |L3.0|
;;;104      */
;;;105    void HardFault_Handler(void)
000000  e7fe              B        |L3.0|
;;;106    {
;;;107      /* Go to infinite loop when Hard Fault exception occurs */
;;;108      while (1)
;;;109      {
;;;110      }
;;;111    }
;;;112    
                          ENDP


                          AREA ||i.MemManage_Handler||, CODE, READONLY, ALIGN=1

                  MemManage_Handler PROC
                  |L4.0|
;;;117      */
;;;118    void MemManage_Handler(void)
000000  e7fe              B        |L4.0|
;;;119    {
;;;120      /* Go to infinite loop when Memory Manage exception occurs */
;;;121      while (1)
;;;122      {
;;;123      }
;;;124    }
;;;125    
                          ENDP


                          AREA ||i.NMI_Handler||, CODE, READONLY, ALIGN=1

                  NMI_Handler PROC
;;;95       */
;;;96     void NMI_Handler(void)
000000  4770              BX       lr
;;;97     {
;;;98     }
;;;99     
                          ENDP


                          AREA ||i.PendSV_Handler||, CODE, READONLY, ALIGN=1

                  PendSV_Handler PROC
;;;174      */
;;;175    void PendSV_Handler(void)
000000  4770              BX       lr
;;;176    {
;;;177    }
;;;178    
                          ENDP


                          AREA ||i.SVC_Handler||, CODE, READONLY, ALIGN=1

                  SVC_Handler PROC
;;;156      */
;;;157    void SVC_Handler(void)
000000  4770              BX       lr
;;;158    {
;;;159    }
;;;160    
                          ENDP


                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=1

                  SysTick_Handler PROC
;;;183      */
;;;184    void SysTick_Handler(void)
000000  4770              BX       lr
;;;185    {
;;;186    }
;;;187    
                          ENDP


                          AREA ||i.TIM1_UP_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM1_UP_IRQHandler PROC
;;;207    
;;;208    void TIM1_UP_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;209    {
;;;210      static int ScanTime = 2;  //端口固有扫描周期15s						 
;;;211      if(TIM_GetITStatus(TIM1, TIM_IT_Update) != RESET)
000002  4c11              LDR      r4,|L9.72|
000004  2101              MOVS     r1,#1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       TIM_GetITStatus
00000c  2800              CMP      r0,#0
00000e  d00f              BEQ      |L9.48|
;;;212      { 
;;;213    	 TIM_ClearITPendingBit(TIM1, TIM_FLAG_Update);   
000010  2101              MOVS     r1,#1
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       TIM_ClearITPendingBit
;;;214    
;;;215    	if(TaskSel == NON)
000018  4c0c              LDR      r4,|L9.76|
00001a  7920              LDRB     r0,[r4,#4]  ; TaskSel
;;;216    	{
;;;217    	    ScanTime--;
;;;218    		if(ScanTime == 0)
;;;219    	    {
;;;220    	      readPorts();
;;;221    	      readPID(ReadPIDBuffer);
;;;222    	      ScanTime = 2;
00001c  2502              MOVS     r5,#2
00001e  b140              CBZ      r0,|L9.50|
;;;223         	}
;;;224        }
;;;225    	else
;;;226    	{
;;;227    	    if(receiveFlag)  	
000020  78a0              LDRB     r0,[r4,#2]  ; receiveFlag
000022  2800              CMP      r0,#0
000024  d004              BEQ      |L9.48|
;;;228        	{
;;;229    	      receiveFlag=0;
000026  2000              MOVS     r0,#0
000028  70a0              STRB     r0,[r4,#2]
;;;230    	      DataProcess();
00002a  f7fffffe          BL       DataProcess
                  |L9.46|
00002e  6165              STR      r5,[r4,#0x14]         ;222  ; ScanTime
                  |L9.48|
;;;231    		  ScanTime = 2;
;;;232    
;;;233    	    }
;;;234    	   
;;;235    	}
;;;236      }	    	   
;;;237    }
000030  bd70              POP      {r4-r6,pc}
                  |L9.50|
000032  6960              LDR      r0,[r4,#0x14]         ;217  ; ScanTime
000034  1e40              SUBS     r0,r0,#1              ;217
000036  6160              STR      r0,[r4,#0x14]         ;218  ; ScanTime
000038  d1fa              BNE      |L9.48|
00003a  f7fffffe          BL       readPorts
00003e  4804              LDR      r0,|L9.80|
000040  f7fffffe          BL       readPID
000044  e7f3              B        |L9.46|
;;;238    
                          ENDP

000046  0000              DCW      0x0000
                  |L9.72|
                          DCD      0x40012c00
                  |L9.76|
                          DCD      ||.data||
                  |L9.80|
                          DCD      ||area_number.24||

                          AREA ||i.TIM2_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM2_IRQHandler PROC
;;;239    
;;;240    void TIM2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;241    {
;;;242    				 
;;;243      if(TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
000002  2101              MOVS     r1,#1
000004  078c              LSLS     r4,r1,#30
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       TIM_GetITStatus
00000c  2800              CMP      r0,#0
00000e  d005              BEQ      |L10.28|
;;;244      { 
;;;245       	 TIM_ClearITPendingBit(TIM2, TIM_FLAG_Update); 
000010  4620              MOV      r0,r4
000012  e8bd4010          POP      {r4,lr}
000016  2101              MOVS     r1,#1
000018  f7ffbffe          B.W      TIM_ClearITPendingBit
                  |L10.28|
;;;246    //    if(counttemp==1000)  	
;;;247    //	{
;;;248    //	   UIreceiveFlag=0;
;;;249    //	   UIDataProcess();
;;;250    //
;;;251    //	   	counttemp=0;
;;;252    //	}
;;;253    //		   counttemp++;
;;;254      }	    	   
;;;255    
;;;256       
;;;257    }
00001c  bd10              POP      {r4,pc}
;;;258    
                          ENDP


                          AREA ||i.TIM3_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM3_IRQHandler PROC
;;;259    
;;;260    void TIM3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;261    {     
;;;262    
;;;263       if (TIM_GetITStatus(TIM3, TIM_IT_Update) == SET)
000002  4c0d              LDR      r4,|L11.56|
000004  2101              MOVS     r1,#1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       TIM_GetITStatus
00000c  2801              CMP      r0,#1
00000e  d111              BNE      |L11.52|
;;;264       {
;;;265          TIM_ClearITPendingBit(TIM3,TIM_FLAG_Update);      
000010  2101              MOVS     r1,#1
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       TIM_ClearITPendingBit
;;;266        
;;;267             	algorithmstart =1;
000018  4908              LDR      r1,|L11.60|
00001a  2001              MOVS     r0,#1
00001c  7008              STRB     r0,[r1,#0]
;;;268    			timercnt=0;
00001e  4808              LDR      r0,|L11.64|
000020  2100              MOVS     r1,#0
;;;269    			receivedCount = 0; 
;;;270    	  TIM_ITConfig(TIM3, TIM_IT_Update, DISABLE); 
000022  460a              MOV      r2,r1
000024  6081              STR      r1,[r0,#8]            ;269  ; timercnt
000026  7041              STRB     r1,[r0,#1]            ;269
000028  4620              MOV      r0,r4
00002a  e8bd4010          POP      {r4,lr}
00002e  2101              MOVS     r1,#1
000030  f7ffbffe          B.W      TIM_ITConfig
                  |L11.52|
;;;271    
;;;272       }
;;;273      
;;;274    }
000034  bd10              POP      {r4,pc}
;;;275    
                          ENDP

000036  0000              DCW      0x0000
                  |L11.56|
                          DCD      0x40000400
                  |L11.60|
                          DCD      algorithmstart
                  |L11.64|
                          DCD      ||.data||

                          AREA ||i.TIM4_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM4_IRQHandler PROC
;;;276    /*定时器4中断处理*/
;;;277    void TIM4_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;278    {
;;;279        u8 i;
;;;280    
;;;281       if (TIM_GetITStatus(TIM4, TIM_IT_Update) == SET)
000002  4c12              LDR      r4,|L12.76|
000004  2101              MOVS     r1,#1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       TIM_GetITStatus
00000c  2801              CMP      r0,#1
00000e  d11b              BNE      |L12.72|
;;;282       {
;;;283          TIM_ClearITPendingBit(TIM4,TIM_FLAG_Update); 
000010  2101              MOVS     r1,#1
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       TIM_ClearITPendingBit
;;;284    	  
;;;285    	  mCount++;
000018  4a0d              LDR      r2,|L12.80|
00001a  7950              LDRB     r0,[r2,#5]  ; mCount
00001c  1c40              ADDS     r0,r0,#1
00001e  b2c0              UXTB     r0,r0
000020  7150              STRB     r0,[r2,#5]
;;;286    	  if(mCount==0x50)
000022  2850              CMP      r0,#0x50
000024  d110              BNE      |L12.72|
;;;287    	  {
;;;288    	     mCount=0;
000026  2300              MOVS     r3,#0
;;;289    	     for(i=0;i<24;i++)
;;;290    		 {
;;;291       	       UIReceivedBuffer[i]=0x00; 
000028  480a              LDR      r0,|L12.84|
00002a  7153              STRB     r3,[r2,#5]            ;288
00002c  4619              MOV      r1,r3                 ;289
                  |L12.46|
00002e  5443              STRB     r3,[r0,r1]
000030  1c49              ADDS     r1,r1,#1              ;289
000032  b2c9              UXTB     r1,r1                 ;289
000034  2918              CMP      r1,#0x18              ;289
000036  d3fa              BCC      |L12.46|
;;;292    
;;;293    		 }
;;;294              UIreceivedCount=0; 
000038  7013              STRB     r3,[r2,#0]
;;;295    		
;;;296     		
;;;297             TIM_ITConfig(TIM4, TIM_IT_Update, DISABLE); 
00003a  4620              MOV      r0,r4
00003c  2200              MOVS     r2,#0
00003e  e8bd4010          POP      {r4,lr}
000042  2101              MOVS     r1,#1
000044  f7ffbffe          B.W      TIM_ITConfig
                  |L12.72|
;;;298    	  }	 
;;;299       }
;;;300    }
000048  bd10              POP      {r4,pc}
;;;301    
                          ENDP

00004a  0000              DCW      0x0000
                  |L12.76|
                          DCD      0x40000800
                  |L12.80|
                          DCD      ||.data||
                  |L12.84|
                          DCD      ||area_number.24||+0xa4

                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;301    
;;;302    void USART1_IRQHandler(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;303    {
;;;304    // static unsigned int receivedCount = 0;
;;;305     char receivedData;
;;;306    // char highByte,lowByte;
;;;307    // char flag = 0; //the status flag of completion of receiving data
;;;308     int isTrue = 0;	// Check Code is right?
;;;309     //int i;
;;;310     
;;;311     if(USART_GetFlagStatus(USART1,USART_FLAG_ORE))
000004  4c35              LDR      r4,|L13.220|
000006  2600              MOVS     r6,#0                 ;308
000008  2108              MOVS     r1,#8
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       USART_GetFlagStatus
000010  b130              CBZ      r0,|L13.32|
;;;312     {
;;;313       	receivedData = Usart_GetChar(USART1);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       Usart_GetChar
;;;314    	USART_ClearITPendingBit(USART1, USART_FLAG_ORE);
000018  2108              MOVS     r1,#8
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       USART_ClearITPendingBit
                  |L13.32|
;;;315    
;;;316     }
;;;317    
;;;318     if(USART_GetITStatus(USART1, USART_IT_RXNE))
000020  f2405925          MOV      r9,#0x525
000024  4649              MOV      r1,r9
000026  46a0              MOV      r8,r4
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       USART_GetITStatus
;;;319     {
;;;320    
;;;321    	  receivedData = USART_ReceiveData(USART1); 
;;;322    	  ReceivedBuffer[receivedCount++] = receivedData;
00002e  4d2c              LDR      r5,|L13.224|
000030  4c2c              LDR      r4,|L13.228|
000032  b1d0              CBZ      r0,|L13.106|
000034  4640              MOV      r0,r8                 ;321
000036  f7fffffe          BL       USART_ReceiveData
00003a  7869              LDRB     r1,[r5,#1]  ; receivedCount
00003c  5460              STRB     r0,[r4,r1]
00003e  1c49              ADDS     r1,r1,#1
000040  b2c8              UXTB     r0,r1
000042  7068              STRB     r0,[r5,#1]
;;;323    	  
;;;324    	  if(receivedCount==1)
000044  2801              CMP      r0,#1
000046  d10c              BNE      |L13.98|
;;;325            {
;;;326                TIM_Cmd(TIM1, DISABLE);  
000048  4f27              LDR      r7,|L13.232|
00004a  2100              MOVS     r1,#0
00004c  4638              MOV      r0,r7
00004e  f7fffffe          BL       TIM_Cmd
;;;327    	        TIM_SetCounter(TIM1,0);
000052  2100              MOVS     r1,#0
000054  4638              MOV      r0,r7
000056  f7fffffe          BL       TIM_SetCounter
;;;328    		   	TIM_Cmd(TIM1, ENABLE);  
00005a  2101              MOVS     r1,#1
00005c  4638              MOV      r0,r7
00005e  f7fffffe          BL       TIM_Cmd
                  |L13.98|
;;;329            }
;;;330    		USART_ClearITPendingBit(USART1,USART_IT_RXNE);
000062  4649              MOV      r1,r9
000064  4640              MOV      r0,r8
000066  f7fffffe          BL       USART_ClearITPendingBit
                  |L13.106|
;;;331    
;;;332       } 
;;;333    
;;;334      if(receivedCount == 12)
00006a  7868              LDRB     r0,[r5,#1]  ; receivedCount
00006c  2701              MOVS     r7,#1                 ;322
00006e  280c              CMP      r0,#0xc
000070  d10f              BNE      |L13.146|
;;;335       {
;;;336    	  if((ReceivedBuffer[0]==0x55)&&(ReceivedBuffer[1]==0x66)&&(ReceivedBuffer[10]==0x66)&&(ReceivedBuffer[11]==0x55))
000072  7820              LDRB     r0,[r4,#0]  ; ReceivedBuffer
000074  2855              CMP      r0,#0x55
000076  d127              BNE      |L13.200|
000078  7860              LDRB     r0,[r4,#1]  ; ReceivedBuffer
00007a  2866              CMP      r0,#0x66
00007c  d124              BNE      |L13.200|
00007e  7aa0              LDRB     r0,[r4,#0xa]  ; ReceivedBuffer
000080  2866              CMP      r0,#0x66
000082  d121              BNE      |L13.200|
000084  7ae0              LDRB     r0,[r4,#0xb]  ; ReceivedBuffer
000086  2855              CMP      r0,#0x55
000088  d11e              BNE      |L13.200|
;;;337    	    	  isTrue = PacketHeaderAnalysis(ReceivedBuffer);
00008a  4816              LDR      r0,|L13.228|
00008c  f7fffffe          BL       PacketHeaderAnalysis
000090  4606              MOV      r6,r0
                  |L13.146|
;;;338    	}	
;;;339     
;;;340      if(receivedCount == 68)
000092  7868              LDRB     r0,[r5,#1]  ; receivedCount
000094  2844              CMP      r0,#0x44
000096  d111              BNE      |L13.188|
;;;341       {
;;;342    	  if((ReceivedBuffer[0]==0x55)&&(ReceivedBuffer[1]==0x77)&&(ReceivedBuffer[66]==0x77)&&(ReceivedBuffer[67]==0x55))
000098  7820              LDRB     r0,[r4,#0]  ; ReceivedBuffer
00009a  2855              CMP      r0,#0x55
00009c  d10e              BNE      |L13.188|
00009e  7860              LDRB     r0,[r4,#1]  ; ReceivedBuffer
0000a0  2877              CMP      r0,#0x77
0000a2  d10b              BNE      |L13.188|
0000a4  f8940042          LDRB     r0,[r4,#0x42]  ; ReceivedBuffer
0000a8  2877              CMP      r0,#0x77
0000aa  d107              BNE      |L13.188|
0000ac  f8940043          LDRB     r0,[r4,#0x43]  ; ReceivedBuffer
0000b0  2855              CMP      r0,#0x55
0000b2  d103              BNE      |L13.188|
;;;343    	    	  isTrue = PacketHeaderAnalysis(ReceivedBuffer);
0000b4  480b              LDR      r0,|L13.228|
0000b6  f7fffffe          BL       PacketHeaderAnalysis
0000ba  4606              MOV      r6,r0
                  |L13.188|
;;;344       }
;;;345    	if(isTrue)
0000bc  b126              CBZ      r6,|L13.200|
;;;346    	{
;;;347    		 ReceivedNum = receivedCount;
0000be  7868              LDRB     r0,[r5,#1]  ; receivedCount
;;;348    	     receivedCount = 0; 
0000c0  60e8              STR      r0,[r5,#0xc]  ; ReceivedNum
0000c2  2000              MOVS     r0,#0
0000c4  7068              STRB     r0,[r5,#1]
;;;349    		 receiveFlag=1;
0000c6  70af              STRB     r7,[r5,#2]
                  |L13.200|
0000c8  4808              LDR      r0,|L13.236|
;;;350         	 isTrue=0;
;;;351    
;;;352    	}	
;;;353    
;;;354     //清除中断标志位
;;;355        DE1=1;
0000ca  6007              STR      r7,[r0,#0]
;;;356    	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE); 
0000cc  4649              MOV      r1,r9
0000ce  4640              MOV      r0,r8
0000d0  e8bd47f0          POP      {r4-r10,lr}
0000d4  f04f0201          MOV      r2,#1
0000d8  f7ffbffe          B.W      USART_ITConfig
;;;357    
;;;358    
;;;359    }
;;;360    
                          ENDP

                  |L13.220|
                          DCD      0x40013800
                  |L13.224|
                          DCD      ||.data||
                  |L13.228|
                          DCD      ||area_number.24||+0x60
                  |L13.232|
                          DCD      0x40012c00
                  |L13.236|
                          DCD      0x422101a0

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;370      */
;;;371    void USART2_IRQHandler(void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;372    {
;;;373     	char receivedData=0;
;;;374    	char isTrue=0;
000004  2700              MOVS     r7,#0
;;;375    //	char highByte,lowByte;
;;;376     	char flag = 0,i=0; //the status flag of completion of receiving data
;;;377    
;;;378    // 	int isTrue = 0;	// Check Code is right?
;;;379    
;;;380      
;;;381        if(USART_GetFlagStatus(USART2,USART_FLAG_ORE)==SET)
000006  4d3c              LDR      r5,|L14.248|
000008  463e              MOV      r6,r7                 ;376
00000a  463c              MOV      r4,r7                 ;376
00000c  2108              MOVS     r1,#8
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       USART_GetFlagStatus
000014  2801              CMP      r0,#1
000016  d106              BNE      |L14.38|
;;;382        {
;;;383            USART_ClearFlag(USART2,USART_FLAG_ORE); //读SR其实就是清除标志
000018  2108              MOVS     r1,#8
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       USART_ClearFlag
;;;384            USART_ReceiveData(USART2);		
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       USART_ReceiveData
                  |L14.38|
;;;385        }
;;;386    
;;;387       if(USART_GetITStatus(USART2,USART_IT_RXNE)!=RESET)
000026  f2405125          MOV      r1,#0x525
00002a  4833              LDR      r0,|L14.248|
00002c  f7fffffe          BL       USART_GetITStatus
;;;388        {
;;;389    	  receivedData = USART_ReceiveData(USART2); 
;;;390    	  UIReceivedBufferTemp[UIreceivedCount++] = receivedData;
000030  4d32              LDR      r5,|L14.252|
000032  f8df90cc          LDR      r9,|L14.256|
000036  b300              CBZ      r0,|L14.122|
000038  f8dfa0bc          LDR      r10,|L14.248|
00003c  4650              MOV      r0,r10                ;389
00003e  f7fffffe          BL       USART_ReceiveData
000042  7829              LDRB     r1,[r5,#0]  ; UIreceivedCount
000044  f8090001          STRB     r0,[r9,r1]
000048  1c49              ADDS     r1,r1,#1
00004a  b2c8              UXTB     r0,r1
00004c  7028              STRB     r0,[r5,#0]
;;;391    	  
;;;392    	  if(UIreceivedCount==1)
00004e  2801              CMP      r0,#1
000050  d10e              BNE      |L14.112|
;;;393            {
;;;394                 TIM_Cmd(TIM2, DISABLE);  //关闭定时器
000052  f04f4880          MOV      r8,#0x40000000
000056  2100              MOVS     r1,#0
000058  4640              MOV      r0,r8
00005a  f7fffffe          BL       TIM_Cmd
;;;395    	         TIM_SetCounter(TIM2,0);//清除计时
00005e  2100              MOVS     r1,#0
000060  4640              MOV      r0,r8
000062  f7fffffe          BL       TIM_SetCounter
;;;396    		     TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
000066  2201              MOVS     r2,#1
000068  4611              MOV      r1,r2
00006a  4826              LDR      r0,|L14.260|
00006c  f7fffffe          BL       TIM_ITConfig
                  |L14.112|
;;;397            }
;;;398    		USART_ClearITPendingBit(USART2,USART_IT_RXNE);
000070  f2405125          MOV      r1,#0x525
000074  4650              MOV      r0,r10
000076  f7fffffe          BL       USART_ClearITPendingBit
                  |L14.122|
;;;399        }    
;;;400    
;;;401      if(UIreceivedCount == 24)
00007a  7829              LDRB     r1,[r5,#0]  ; UIreceivedCount
00007c  f04f0b01          MOV      r11,#1                ;390
000080  2918              CMP      r1,#0x18
000082  d128              BNE      |L14.214|
;;;402       {
;;;403    
;;;404    	  UIReceivedNum = UIreceivedCount;
;;;405    	  UIreceivedCount = 0; 
000084  f04f0a00          MOV      r10,#0
000088  6129              STR      r1,[r5,#0x10]  ; UIReceivedNum
00008a  f885a000          STRB     r10,[r5,#0]
;;;406    
;;;407    	  if((UIReceivedBufferTemp[0]==0x55)&&(UIReceivedBufferTemp[1]==0x66)&&(UIReceivedBufferTemp[22]==0x66)&&(UIReceivedBufferTemp[23]==0x55))
00008e  f8990000          LDRB     r0,[r9,#0]  ; UIReceivedBufferTemp
000092  46a8              MOV      r8,r5                 ;404
000094  464d              MOV      r5,r9
000096  2855              CMP      r0,#0x55
000098  d10d              BNE      |L14.182|
00009a  7868              LDRB     r0,[r5,#1]  ; UIReceivedBufferTemp
00009c  2866              CMP      r0,#0x66
00009e  d10a              BNE      |L14.182|
0000a0  7da8              LDRB     r0,[r5,#0x16]  ; UIReceivedBufferTemp
0000a2  2866              CMP      r0,#0x66
0000a4  d107              BNE      |L14.182|
0000a6  7de8              LDRB     r0,[r5,#0x17]  ; UIReceivedBufferTemp
0000a8  2855              CMP      r0,#0x55
0000aa  d104              BNE      |L14.182|
;;;408    		{
;;;409    		  flag = 1;
0000ac  2601              MOVS     r6,#1
;;;410    		}
;;;411          if(flag)
;;;412    	        isTrue =  CheckUIReceivedData(UIReceivedBufferTemp)  ;
0000ae  4814              LDR      r0,|L14.256|
0000b0  f7fffffe          BL       CheckUIReceivedData
0000b4  b2c7              UXTB     r7,r0
                  |L14.182|
;;;413        
;;;414         if(flag&isTrue)
0000b6  423e              TST      r6,r7
0000b8  d00d              BEQ      |L14.214|
;;;415        	{
;;;416    	      	for(i=0;i<24;i++) 
;;;417                    UIReceivedBuffer[i]=UIReceivedBufferTemp[i];
0000ba  4811              LDR      r0,|L14.256|
0000bc  3818              SUBS     r0,r0,#0x18
                  |L14.190|
0000be  5d29              LDRB     r1,[r5,r4]
0000c0  5501              STRB     r1,[r0,r4]
0000c2  1c64              ADDS     r4,r4,#1              ;416
0000c4  b2e4              UXTB     r4,r4                 ;416
0000c6  2c18              CMP      r4,#0x18              ;416
0000c8  d3f9              BCC      |L14.190|
;;;418    		      	
;;;419    		    UIDataProcess();
0000ca  f7fffffe          BL       UIDataProcess
;;;420    			isTrue=0;		
;;;421    			flag = 0;
;;;422    			UIreceiveFlag=1;
0000ce  f888b003          STRB     r11,[r8,#3]
;;;423    	    	UIreceivedCount = 0;  
0000d2  f888a000          STRB     r10,[r8,#0]
                  |L14.214|
0000d6  490c              LDR      r1,|L14.264|
;;;424    	   }
;;;425    	
;;;426        }	
;;;427     
;;;428       //  USART_ITConfig(USART2,USART_IT_TXE,DISABLE);			  	//发送完成 关闭中断
;;;429    	DE2=1;
0000d8  f8c1b000          STR      r11,[r1,#0]
;;;430    	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE); 
0000dc  f04f0201          MOV      r2,#1
0000e0  f2405125          MOV      r1,#0x525
0000e4  4804              LDR      r0,|L14.248|
0000e6  f7fffffe          BL       USART_ITConfig
;;;431        TIM_Cmd(TIM2, ENABLE);  
0000ea  e8bd5ff0          POP      {r4-r12,lr}
0000ee  2101              MOVS     r1,#1
0000f0  0788              LSLS     r0,r1,#30
0000f2  f7ffbffe          B.W      TIM_Cmd
;;;432    
;;;433    }
;;;434    
                          ENDP

0000f6  0000              DCW      0x0000
                  |L14.248|
                          DCD      0x40004400
                  |L14.252|
                          DCD      ||.data||
                  |L14.256|
                          DCD      ||area_number.24||+0xbc
                  |L14.260|
                          DCD      0x40000800
                  |L14.264|
                          DCD      0x4222819c

                          AREA ||i.UartSendData||, CODE, READONLY, ALIGN=1

                  UartSendData PROC
;;;493    *********************************************************************************************************/
;;;494    void UartSendData(int num,char* sendbuffer)
000000  b570              PUSH     {r4-r6,lr}
;;;495    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;496       int i;
;;;497       for(i=0;i<num;i++)
000006  2400              MOVS     r4,#0
000008  e003              B        |L15.18|
                  |L15.10|
;;;498       {
;;;499         Uart_SendChar(sendbuffer[i]); 
00000a  5d30              LDRB     r0,[r6,r4]
00000c  f7fffffe          BL       Uart_SendChar
000010  1c64              ADDS     r4,r4,#1              ;497
                  |L15.18|
000012  42ac              CMP      r4,r5                 ;497
000014  dbf9              BLT      |L15.10|
;;;500       }
;;;501    }
000016  bd70              POP      {r4-r6,pc}
;;;502    
                          ENDP


                          AREA ||i.Uart_SendChar||, CODE, READONLY, ALIGN=2

                  Uart_SendChar PROC
;;;458    *********************************************************************************************************/
;;;459    void Uart_SendChar(char dat)
000000  b570              PUSH     {r4-r6,lr}
;;;460    {  
;;;461        while (USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);//等待上一个字节发送完毕
000002  4c09              LDR      r4,|L16.40|
000004  4605              MOV      r5,r0                 ;460
                  |L16.6|
000006  2140              MOVS     r1,#0x40
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USART_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L16.6|
;;;462       USART_ClearFlag(USART2,USART_FLAG_TC);
000012  2140              MOVS     r1,#0x40
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       USART_ClearFlag
;;;463        USART_SendData(USART2,dat);   
00001a  4629              MOV      r1,r5
00001c  4620              MOV      r0,r4
00001e  e8bd4070          POP      {r4-r6,lr}
000022  f7ffbffe          B.W      USART_SendData
;;;464    }
;;;465    
                          ENDP

000026  0000              DCW      0x0000
                  |L16.40|
                          DCD      0x40004400

                          AREA ||i.UsageFault_Handler||, CODE, READONLY, ALIGN=1

                  UsageFault_Handler PROC
                  |L17.0|
;;;143      */
;;;144    void UsageFault_Handler(void)
000000  e7fe              B        |L17.0|
;;;145    {
;;;146      /* Go to infinite loop when Usage Fault exception occurs */
;;;147      while (1)
;;;148      {
;;;149      }
;;;150    }
;;;151    
                          ENDP


                          AREA ||i.UsartSendData||, CODE, READONLY, ALIGN=1

                  UsartSendData PROC
;;;475    
;;;476    void UsartSendData(int num,char* sendbuffer)
000000  b570              PUSH     {r4-r6,lr}
;;;477    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;478       int i;
;;;479       for(i=0;i<num;i++)
000006  2400              MOVS     r4,#0
000008  e003              B        |L18.18|
                  |L18.10|
;;;480       {
;;;481         Usart_SendChar(sendbuffer[i]); 
00000a  5d30              LDRB     r0,[r6,r4]
00000c  f7fffffe          BL       Usart_SendChar
000010  1c64              ADDS     r4,r4,#1              ;479
                  |L18.18|
000012  42ac              CMP      r4,r5                 ;479
000014  dbf9              BLT      |L18.10|
;;;482       }
;;;483    }
000016  bd70              POP      {r4-r6,pc}
;;;484    
                          ENDP


                          AREA ||i.Usart_GetChar||, CODE, READONLY, ALIGN=1

                  Usart_GetChar PROC
;;;510    *********************************************************************************************************/
;;;511    char Usart_GetChar(USART_TypeDef* USARTx)
000000  b510              PUSH     {r4,lr}
;;;512    {
;;;513    	char dat;
;;;514    //	while(!USART_GetFlagStatus(USARTx,USART_FLAG_RXNE));
;;;515    	dat = (char)(USART_ReceiveData(USARTx)&0xff);	
000002  f7fffffe          BL       USART_ReceiveData
000006  b2c0              UXTB     r0,r0
;;;516    	return dat;		
;;;517    }
000008  bd10              POP      {r4,pc}
;;;518    
                          ENDP


                          AREA ||i.Usart_SendChar||, CODE, READONLY, ALIGN=2

                  Usart_SendChar PROC
;;;444    
;;;445    void Usart_SendChar(char dat)
000000  b570              PUSH     {r4-r6,lr}
;;;446    {
;;;447        while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);//等待上一个字节发送完毕
000002  4c07              LDR      r4,|L20.32|
000004  4605              MOV      r5,r0                 ;446
                  |L20.6|
000006  2140              MOVS     r1,#0x40
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USART_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L20.6|
;;;448        USART_SendData(USART1,dat);   
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  e8bd4070          POP      {r4-r6,lr}
00001a  f7ffbffe          B.W      USART_SendData
;;;449    }
;;;450    
                          ENDP

00001e  0000              DCW      0x0000
                  |L20.32|
                          DCD      0x40013800

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ReadPortsBuffer
                          %        132

                          AREA ||area_number.23||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.23||, ||.bss||
                  WritePortsBuffer
                          %        104

                          AREA ||area_number.24||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.24||, ||.bss||
                  ReadPIDBuffer
                          %        96
                  ReceivedBuffer
                          %        68
                  UIReceivedBuffer
                          %        24
                  UIReceivedBufferTemp
                          %        24

                          AREA ||area_number.25||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.25||, ||.bss||
                  WritePIDBuffer
                          %        97

                          AREA ||area_number.26||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.bss||
                  SentBuffer
                          %        97

                          AREA ||area_number.27||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.27||, ||.bss||
                  UISendBuffer
                          %        24

                          AREA ||area_number.28||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.28||, ||.bss||
                  UIwriteRegister
                          %        12

                          AREA ||.data||, DATA, ALIGN=2

                  UIreceivedCount
000000  00                DCB      0x00
                  receivedCount
000001  00                DCB      0x00
                  receiveFlag
000002  00                DCB      0x00
                  UIreceiveFlag
000003  00                DCB      0x00
                  TaskSel
000004  00                DCB      0x00
                  mCount
000005  000000            DCB      0x00,0x00,0x00
                  timercnt
                          DCD      0x00000000
                  ReceivedNum
                          DCD      0x00000000
                  UIReceivedNum
                          DCD      0x00000000
                  ScanTime
                          DCD      0x00000002

                          AREA ||area_number.31||, DATA, ALIGN=1

                          EXPORTAS ||area_number.31||, ||.data||
                  SumRec
000000  0000              DCW      0x0000

                          AREA ||area_number.32||, DATA, ALIGN=1

                          EXPORTAS ||area_number.32||, ||.data||
                  SumCal
000000  0000              DCW      0x0000

                          AREA ||area_number.33||, DATA, ALIGN=2

                          EXPORTAS ||area_number.33||, ||.data||
                  ReceivedData
                          DCD      ReceivedBuffer+0xa

                          AREA ||area_number.34||, DATA, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.data||
                  SentData
                          DCD      SentBuffer+0xa

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  ReqSubBuffer
000000  55660701          DCB      0x55,0x66,0x07,0x01
000004  01010101          DCB      0x01,0x01,0x01,0x01
000008  01010101          DCB      0x01,0x01,0x01,0x01
00000c  01010101          DCB      0x01,0x01,0x01,0x01
000010  01010101          DCB      0x01,0x01,0x01,0x01
000014  01126655          DCB      0x01,0x12,0x66,0x55

                          AREA ||area_number.36||, DATA, ALIGN=0

                          EXPORTAS ||area_number.36||, ||.data||
                  ReqSysBuffer
000000  55660801          DCB      0x55,0x66,0x08,0x01
000004  01010101          DCB      0x01,0x01,0x01,0x01
000008  01010101          DCB      0x01,0x01,0x01,0x01
00000c  01010101          DCB      0x01,0x01,0x01,0x01
000010  01010101          DCB      0x01,0x01,0x01,0x01
000014  01126655          DCB      0x01,0x12,0x66,0x55

                          AREA ||area_number.37||, DATA, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.data||
                  counttemp
                          DCD      0x00000000

                          AREA ||area_number.38||, DATA, ALIGN=2

                          EXPORTAS ||area_number.38||, ||.data||
                  UIReceivedData
                          DCD      UIReceivedBuffer+0x3

                          AREA ||area_number.39||, DATA, ALIGN=2

                          EXPORTAS ||area_number.39||, ||.data||
                  UISendData
                          DCD      UISendBuffer+0x3

                          AREA ||area_number.40||, DATA, ALIGN=0

                          EXPORTAS ||area_number.40||, ||.data||
                  UITaskSel
000000  00                DCB      0x00

                          AREA ||area_number.41||, DATA, ALIGN=0

                          EXPORTAS ||area_number.41||, ||.data||
                  nCount
000000  00                DCB      0x00
