; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -oad.o --asm_dir=.\ --list_dir=.\ --depend=ad.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\ -I..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210E_EVAL -I..\RTD -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL --omf_browse=ad.crf ..\AD.c]
                          THUMB

                          AREA ||i.ADC1_GPIO_Config||, CODE, READONLY, ALIGN=2

                  ADC1_GPIO_Config PROC
;;;7      u32 sum=0;
;;;8      void ADC1_GPIO_Config(void)
000000  b508              PUSH     {r3,lr}
;;;9      { 
;;;10     	GPIO_InitTypeDef 
;;;11     	GPIO_InitStructure; 
;;;12     	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE); 
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;13     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_GPIOA,ENABLE); 
00000a  2101              MOVS     r1,#1
00000c  f44f7001          MOV      r0,#0x204
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;14     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1|GPIO_Pin_2 |GPIO_Pin_3 |GPIO_Pin_4 |GPIO_Pin_5 |GPIO_Pin_6; 
000014  207e              MOVS     r0,#0x7e
000016  f8ad0000          STRH     r0,[sp,#0]
;;;15     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN; 
00001a  2000              MOVS     r0,#0
00001c  f88d0003          STRB     r0,[sp,#3]
;;;16     	GPIO_Init(GPIOA, &GPIO_InitStructure); 
000020  4669              MOV      r1,sp
000022  4802              LDR      r0,|L1.44|
000024  f7fffffe          BL       GPIO_Init
;;;17     } 
000028  bd08              POP      {r3,pc}
;;;18     
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      0x40010800

                          AREA ||i.ADC1_Mode_Config||, CODE, READONLY, ALIGN=2

                  ADC1_Mode_Config PROC
;;;18     
;;;19     void ADC1_Mode_Config(void) 
000000  b530              PUSH     {r4,r5,lr}
;;;20     { 
;;;21     		DMA_InitTypeDef DMA_InitStructure; 
;;;22     		ADC_InitTypeDef ADC_InitStructure; 
;;;23     		DMA_DeInit(DMA1_Channel1); 
000002  4d3d              LDR      r5,|L2.248|
000004  b091              SUB      sp,sp,#0x44           ;20
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       DMA_DeInit
;;;24     		DMA_InitStructure.DMA_PeripheralBaseAddr =ADC1_DR_Address; 
00000c  483b              LDR      r0,|L2.252|
;;;25     		DMA_InitStructure.DMA_MemoryBaseAddr =(u32)&ADC_ConvertedValue; 
00000e  9000              STR      r0,[sp,#0]
000010  483b              LDR      r0,|L2.256|
;;;26     		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC; 
000012  2400              MOVS     r4,#0
000014  e9cd0401          STRD     r0,r4,[sp,#4]
;;;27     		DMA_InitStructure.DMA_BufferSize = 60; 
000018  203c              MOVS     r0,#0x3c
00001a  e9cd0403          STRD     r0,r4,[sp,#0xc]
;;;28     		DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; 
;;;29     		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; 
00001e  2080              MOVS     r0,#0x80
;;;30     		DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord; 
000020  9005              STR      r0,[sp,#0x14]
000022  0040              LSLS     r0,r0,#1
;;;31     		DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord; 
000024  9006              STR      r0,[sp,#0x18]
000026  0080              LSLS     r0,r0,#2
;;;32     		DMA_InitStructure.DMA_Mode = DMA_Mode_Circular; 
000028  9007              STR      r0,[sp,#0x1c]
00002a  2020              MOVS     r0,#0x20
;;;33     		DMA_InitStructure.DMA_Priority = DMA_Priority_High; 
00002c  9008              STR      r0,[sp,#0x20]
00002e  0200              LSLS     r0,r0,#8
;;;34     		DMA_InitStructure.DMA_M2M = DMA_M2M_Disable; 
;;;35     		DMA_Init(DMA1_Channel1, &DMA_InitStructure); 
000030  e9cd0409          STRD     r0,r4,[sp,#0x24]
000034  4669              MOV      r1,sp
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       DMA_Init
;;;36     		DMA_Cmd(DMA1_Channel1, ENABLE); 
00003c  2101              MOVS     r1,#1
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       DMA_Cmd
;;;37     
;;;38     		ADC_InitStructure.ADC_Mode = ADC_Mode_Independent; 
;;;39     		ADC_InitStructure.ADC_ScanConvMode = ENABLE;
000044  2001              MOVS     r0,#1
000046  f88d0030          STRB     r0,[sp,#0x30]
;;;40     		ADC_InitStructure.ADC_ContinuousConvMode = ENABLE; 
00004a  f88d0031          STRB     r0,[sp,#0x31]
00004e  940b              STR      r4,[sp,#0x2c]         ;39
;;;41     		ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None; 
000050  f44f2060          MOV      r0,#0xe0000
000054  e9cd040d          STRD     r0,r4,[sp,#0x34]
;;;42     		ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right; 
;;;43     		ADC_InitStructure.ADC_NbrOfChannel = 6; 
;;;44     		ADC_Init(ADC1, &ADC_InitStructure); 
000058  4c28              LDR      r4,|L2.252|
00005a  2006              MOVS     r0,#6                 ;43
00005c  f88d003c          STRB     r0,[sp,#0x3c]         ;43
000060  3c4c              SUBS     r4,r4,#0x4c
000062  a90b              ADD      r1,sp,#0x2c
000064  4620              MOV      r0,r4
000066  f7fffffe          BL       ADC_Init
;;;45     
;;;46     		RCC_ADCCLKConfig(RCC_PCLK2_Div8); 
00006a  f44f4040          MOV      r0,#0xc000
00006e  f7fffffe          BL       RCC_ADCCLKConfig
;;;47     
;;;48     		ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_239Cycles5); 
000072  2201              MOVS     r2,#1
000074  2307              MOVS     r3,#7
000076  4611              MOV      r1,r2
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       ADC_RegularChannelConfig
;;;49     		ADC_RegularChannelConfig(ADC1, ADC_Channel_2, 2, ADC_SampleTime_239Cycles5); 
00007e  2202              MOVS     r2,#2
000080  2307              MOVS     r3,#7
000082  4611              MOV      r1,r2
000084  4620              MOV      r0,r4
000086  f7fffffe          BL       ADC_RegularChannelConfig
;;;50     		ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 3, ADC_SampleTime_239Cycles5); 
00008a  2203              MOVS     r2,#3
00008c  2307              MOVS     r3,#7
00008e  4611              MOV      r1,r2
000090  4620              MOV      r0,r4
000092  f7fffffe          BL       ADC_RegularChannelConfig
;;;51     		ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 4, ADC_SampleTime_239Cycles5);
000096  2204              MOVS     r2,#4
000098  2307              MOVS     r3,#7
00009a  4611              MOV      r1,r2
00009c  4620              MOV      r0,r4
00009e  f7fffffe          BL       ADC_RegularChannelConfig
;;;52     		ADC_RegularChannelConfig(ADC1, ADC_Channel_5, 5, ADC_SampleTime_239Cycles5); 
0000a2  2205              MOVS     r2,#5
0000a4  2307              MOVS     r3,#7
0000a6  4611              MOV      r1,r2
0000a8  4620              MOV      r0,r4
0000aa  f7fffffe          BL       ADC_RegularChannelConfig
;;;53     		ADC_RegularChannelConfig(ADC1, ADC_Channel_6, 6, ADC_SampleTime_239Cycles5);
0000ae  2206              MOVS     r2,#6
0000b0  2307              MOVS     r3,#7
0000b2  4611              MOV      r1,r2
0000b4  4620              MOV      r0,r4
0000b6  f7fffffe          BL       ADC_RegularChannelConfig
;;;54     
;;;55     		ADC_DMACmd(ADC1, ENABLE); 
0000ba  2101              MOVS     r1,#1
0000bc  4620              MOV      r0,r4
0000be  f7fffffe          BL       ADC_DMACmd
;;;56     
;;;57     		ADC_Cmd(ADC1, ENABLE); 
0000c2  2101              MOVS     r1,#1
0000c4  4620              MOV      r0,r4
0000c6  f7fffffe          BL       ADC_Cmd
;;;58     
;;;59     		ADC_ResetCalibration(ADC1); 
0000ca  4620              MOV      r0,r4
0000cc  f7fffffe          BL       ADC_ResetCalibration
                  |L2.208|
;;;60     
;;;61     		while(ADC_GetResetCalibrationStatus(ADC1)); 
0000d0  4620              MOV      r0,r4
0000d2  f7fffffe          BL       ADC_GetResetCalibrationStatus
0000d6  2800              CMP      r0,#0
0000d8  d1fa              BNE      |L2.208|
;;;62     
;;;63     		ADC_StartCalibration(ADC1); 
0000da  4620              MOV      r0,r4
0000dc  f7fffffe          BL       ADC_StartCalibration
                  |L2.224|
;;;64     
;;;65     		while(ADC_GetCalibrationStatus(ADC1)); 
0000e0  4620              MOV      r0,r4
0000e2  f7fffffe          BL       ADC_GetCalibrationStatus
0000e6  2800              CMP      r0,#0
0000e8  d1fa              BNE      |L2.224|
;;;66     
;;;67     		ADC_SoftwareStartConvCmd(ADC1, ENABLE); 
0000ea  2101              MOVS     r1,#1
0000ec  4620              MOV      r0,r4
0000ee  f7fffffe          BL       ADC_SoftwareStartConvCmd
;;;68     
;;;69     }
0000f2  b011              ADD      sp,sp,#0x44
0000f4  bd30              POP      {r4,r5,pc}
;;;70     
                          ENDP

0000f6  0000              DCW      0x0000
                  |L2.248|
                          DCD      0x40020008
                  |L2.252|
                          DCD      0x4001244c
                  |L2.256|
                          DCD      ADC_ConvertedValue

                          AREA ||i.ADC_allchannels||, CODE, READONLY, ALIGN=1

                  ADC_allchannels PROC
;;;90     
;;;91     void ADC_allchannels(float *adc_value,char* flag)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;92     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;93       	int i;
;;;94     	for(i = 0; i < 12; i++)
000008  2400              MOVS     r4,#0
;;;95     	{
;;;96     	  adc_value[i]= ReadAdOfChannel(i,flag[i]);
;;;97     	//  ReadAdOfChannel(unsigned char  Channel,unsigned char CurrentFlag)
;;;98     	  delay_us(2000);
00000a  f44f67fa          MOV      r7,#0x7d0
                  |L3.14|
00000e  5d31              LDRB     r1,[r6,r4]            ;96
000010  b2e0              UXTB     r0,r4                 ;96
000012  f7fffffe          BL       ReadAdOfChannel
000016  f8450024          STR      r0,[r5,r4,LSL #2]     ;96
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       delay_us
000020  1c64              ADDS     r4,r4,#1              ;94
000022  2c0c              CMP      r4,#0xc               ;94
000024  dbf3              BLT      |L3.14|
;;;99     	}
;;;100    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;101    
                          ENDP


                          AREA ||i.ReadAdOfChannel||, CODE, READONLY, ALIGN=2

                  ReadAdOfChannel PROC
;;;71     
;;;72     float ReadAdOfChannel(u8 ch,u8 mode)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;73     {
;;;74     	int i;
;;;75     	
;;;76     	sum=0;
000004  4c26              LDR      r4,|L4.160|
000006  2200              MOVS     r2,#0
;;;77     	for(i=0;i<10;i++)
;;;78     	{
;;;79     		sum+=ADC_ConvertedValue[i][ch-1];
000008  4d26              LDR      r5,|L4.164|
00000a  4613              MOV      r3,r2                 ;77
00000c  f8c42000          STR.W    r2,[r4,#0]
                  |L4.16|
000010  eb030643          ADD      r6,r3,r3,LSL #1
000014  eb050686          ADD      r6,r5,r6,LSL #2
000018  eb060640          ADD      r6,r6,r0,LSL #1
00001c  1c5b              ADDS     r3,r3,#1              ;77
00001e  f8366c02          LDRH     r6,[r6,#-2]
000022  2b0a              CMP      r3,#0xa               ;77
000024  4432              ADD      r2,r2,r6
000026  dbf3              BLT      |L4.16|
;;;80     	}
;;;81     	if(mode==MODE_CURRENT)
;;;82     	{
;;;83     		return (2.50*sum/10/4096*(13.0/3)*1000/(196.97));
000028  6022              STR      r2,[r4,#0]  ; sum
00002a  4c1f              LDR      r4,|L4.168|
00002c  4d1f              LDR      r5,|L4.172|
00002e  f8df8080          LDR      r8,|L4.176|
000032  4610              MOV      r0,r2                 ;77
000034  f06f060b          MVN      r6,#0xb
000038  f04f3755          MOV      r7,#0x55555555
00003c  2901              CMP      r1,#1                 ;81
00003e  d014              BEQ      |L4.106|
;;;84     	}
;;;85     	else
;;;86     	{
;;;87     		return (2.50*sum/10/4096*(13.0/3));
000040  f7fffffe          BL       __aeabi_ui2d
000044  2200              MOVS     r2,#0
000046  4623              MOV      r3,r4
000048  f7fffffe          BL       __aeabi_dmul
00004c  2200              MOVS     r2,#0
00004e  462b              MOV      r3,r5
000050  f7fffffe          BL       __aeabi_ddiv
000054  4632              MOV      r2,r6
000056  f7fffffe          BL       __ARM_scalbn
00005a  463a              MOV      r2,r7
00005c  4643              MOV      r3,r8
00005e  f7fffffe          BL       __aeabi_dmul
                  |L4.98|
000062  e8bd41f0          POP      {r4-r8,lr}
000066  f7ffbffe          B.W      __aeabi_d2f
                  |L4.106|
00006a  f7fffffe          BL       __aeabi_ui2d
00006e  2200              MOVS     r2,#0                 ;83
000070  4623              MOV      r3,r4                 ;83
000072  f7fffffe          BL       __aeabi_dmul
000076  2200              MOVS     r2,#0                 ;83
000078  462b              MOV      r3,r5                 ;83
00007a  f7fffffe          BL       __aeabi_ddiv
00007e  4632              MOV      r2,r6                 ;83
000080  f7fffffe          BL       __ARM_scalbn
000084  463a              MOV      r2,r7                 ;83
000086  4643              MOV      r3,r8                 ;83
000088  f7fffffe          BL       __aeabi_dmul
00008c  2200              MOVS     r2,#0                 ;83
00008e  4b09              LDR      r3,|L4.180|
000090  f7fffffe          BL       __aeabi_dmul
000094  4a08              LDR      r2,|L4.184|
000096  4b09              LDR      r3,|L4.188|
000098  f7fffffe          BL       __aeabi_ddiv
00009c  e7e1              B        |L4.98|
;;;88     	}
;;;89     }
;;;90     
                          ENDP

00009e  0000              DCW      0x0000
                  |L4.160|
                          DCD      ||.data||
                  |L4.164|
                          DCD      ADC_ConvertedValue
                  |L4.168|
                          DCD      0x40040000
                  |L4.172|
                          DCD      0x40240000
                  |L4.176|
                          DCD      0x40115555
                  |L4.180|
                          DCD      0x408f4000
                  |L4.184|
                          DCD      0x3d70a3d7
                  |L4.188|
                          DCD      0x40689f0a

                          AREA ||.data||, DATA, ALIGN=2

                  ||sum||
                          DCD      0x00000000
