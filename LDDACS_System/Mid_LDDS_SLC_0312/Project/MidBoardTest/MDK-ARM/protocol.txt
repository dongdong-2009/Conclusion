; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -oprotocol.o --asm_dir=.\ --list_dir=.\ --depend=protocol.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\ -I..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210E_EVAL -I..\RTD -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL --omf_browse=protocol.crf ..\protocol.c]
                          THUMB

                          AREA ||i.CheckReceivedData||, CODE, READONLY, ALIGN=1

                  CheckReceivedData PROC
;;;74     ///////////////////////////////////////////////////
;;;75     int CheckReceivedData(u8* dataBuffer)
000000  7941              LDRB     r1,[r0,#5]
;;;76     {
;;;77        int i; 
;;;78        long result = 0;
000002  2200              MOVS     r2,#0
;;;79        int checkCode = 0;
;;;80         if((dataBuffer[5]==2)&&(dataBuffer[6]==2)&&(dataBuffer[6]==2))
000004  2902              CMP      r1,#2
000006  d102              BNE      |L1.14|
000008  7981              LDRB     r1,[r0,#6]
00000a  2902              CMP      r1,#2
00000c  d012              BEQ      |L1.52|
                  |L1.14|
;;;81     	return 0;
;;;82     	if(dataBuffer[2]!=7)
00000e  7881              LDRB     r1,[r0,#2]
000010  2907              CMP      r1,#7
000012  d10f              BNE      |L1.52|
;;;83     	return 0;
;;;84        for(i=3;i<21;i++)
000014  2103              MOVS     r1,#3
                  |L1.22|
;;;85        {
;;;86           result += dataBuffer[i];
000016  5c43              LDRB     r3,[r0,r1]
000018  1c49              ADDS     r1,r1,#1              ;84
00001a  441a              ADD      r2,r2,r3
00001c  2915              CMP      r1,#0x15              ;84
00001e  dbfa              BLT      |L1.22|
;;;87        }
;;;88        checkCode = result % 100;
000020  2164              MOVS     r1,#0x64
000022  fb92f3f1          SDIV     r3,r2,r1
000026  fb012113          MLS      r1,r1,r3,r2
;;;89     
;;;90     
;;;91        if(checkCode == dataBuffer[21])
00002a  7d40              LDRB     r0,[r0,#0x15]
00002c  4288              CMP      r0,r1
00002e  d101              BNE      |L1.52|
;;;92        return 1;
000030  2001              MOVS     r0,#1
;;;93        else
;;;94        return 0;
;;;95     }
000032  4770              BX       lr
                  |L1.52|
000034  2000              MOVS     r0,#0                 ;94
000036  4770              BX       lr
;;;96     
                          ENDP


                          AREA ||i.CheckSentData||, CODE, READONLY, ALIGN=1

                  CheckSentData PROC
;;;102    ///////////////////////////////////////////////////
;;;103    char CheckSentData(u8* dataBuffer)
000000  2200              MOVS     r2,#0
;;;104    {
;;;105     int i; 
;;;106       long result = 0;
;;;107       char checkCode;
;;;108    
;;;109       for(i=3;i<21;i++)
000002  2103              MOVS     r1,#3
                  |L2.4|
;;;110       {
;;;111          result += dataBuffer[i];
000004  5c43              LDRB     r3,[r0,r1]
000006  1c49              ADDS     r1,r1,#1              ;109
000008  441a              ADD      r2,r2,r3
00000a  2915              CMP      r1,#0x15              ;109
00000c  dbfa              BLT      |L2.4|
;;;112       }
;;;113       checkCode = result % 100;
00000e  2064              MOVS     r0,#0x64
000010  fb92f1f0          SDIV     r1,r2,r0
000014  fb002011          MLS      r0,r0,r1,r2
000018  b2c0              UXTB     r0,r0
;;;114    
;;;115       return checkCode;
;;;116    }
00001a  4770              BX       lr
;;;117    
                          ENDP


                          AREA ||i.DataProcess||, CODE, READONLY, ALIGN=2

                  DataProcess PROC
;;;127    
;;;128    void DataProcess(void)
000000  b510              PUSH     {r4,lr}
;;;129    {
;;;130    	 readPorts();
000002  f7fffffe          BL       readPorts
;;;131    	 readCtrlSignal();
000006  f7fffffe          BL       readCtrlSignal
;;;132    	 sendBufferFill(SentBuffer);
00000a  4806              LDR      r0,|L3.36|
00000c  f7fffffe          BL       sendBufferFill
;;;133    	 PacketHeaderGeneration(SentBuffer);
000010  4804              LDR      r0,|L3.36|
000012  f7fffffe          BL       PacketHeaderGeneration
;;;134    	 writeCtrlSignal();
000016  f7fffffe          BL       writeCtrlSignal
;;;135         writePorts();
00001a  e8bd4010          POP      {r4,lr}
00001e  f7ffbffe          B.W      writePorts
;;;136    
;;;137    //	 MiddleDataGeneration(85,ReadPortsBuffer,SentData);		  
;;;138    
;;;139    }
;;;140    
                          ENDP

000022  0000              DCW      0x0000
                  |L3.36|
                          DCD      SentBuffer

                          AREA ||i.PacketHeaderAnalysis||, CODE, READONLY, ALIGN=2

                  PacketHeaderAnalysis PROC
;;;19     ///////////////////////////////////////////////////
;;;20     int PacketHeaderAnalysis(u8 * receivedData)
000000  b51e              PUSH     {r1-r4,lr}
;;;21     {
;;;22        int i;
;;;23        int isTrue = 0; 	//校验是否正确 1--true
;;;24        unsigned int address;
;;;25        char data[LENGTH];
;;;26        for(i=0;i<LENGTH;i++)
000002  2100              MOVS     r1,#0
000004  466a              MOV      r2,sp                 ;25
                  |L4.6|
;;;27             data[i] = receivedData[i];
000006  5c43              LDRB     r3,[r0,r1]
000008  5453              STRB     r3,[r2,r1]
00000a  1c49              ADDS     r1,r1,#1              ;26
00000c  290a              CMP      r1,#0xa               ;26
00000e  dbfa              BLT      |L4.6|
;;;28        ReceivedCheckCode = data[6];
000010  4c12              LDR      r4,|L4.92|
000012  f89d1006          LDRB     r1,[sp,#6]
;;;29        ReceivedDataLength = data[7]*100 + data[8];
;;;30        isTrue = CheckReceivedData(receivedData+LENGTH); 
000016  300a              ADDS     r0,r0,#0xa
000018  7021              STRB     r1,[r4,#0]            ;28
00001a  f89d1007          LDRB     r1,[sp,#7]            ;29
00001e  f89d2008          LDRB     r2,[sp,#8]            ;29
000022  eb0103c1          ADD      r3,r1,r1,LSL #3       ;29
000026  eb031101          ADD      r1,r3,r1,LSL #4       ;29
00002a  eb020181          ADD      r1,r2,r1,LSL #2       ;29
00002e  60a1              STR      r1,[r4,#8]  ; ReceivedDataLength
000030  f7fffffe          BL       CheckReceivedData
;;;31     
;;;32        if(isTrue)
000034  2800              CMP      r0,#0
000036  d00d              BEQ      |L4.84|
;;;33        {   
;;;34          address = data[2]*100 + data[3];
000038  f89d1002          LDRB     r1,[sp,#2]
00003c  f89d0003          LDRB     r0,[sp,#3]
000040  eb0102c1          ADD      r2,r1,r1,LSL #3
000044  eb021101          ADD      r1,r2,r1,LSL #4
000048  eb000081          ADD      r0,r0,r1,LSL #2
;;;35     
;;;36     	  if(MCUaddress==address)
00004c  6861              LDR      r1,[r4,#4]  ; MCUaddress
00004e  4281              CMP      r1,r0
000050  d101              BNE      |L4.86|
;;;37     	   { 
;;;38     		 return 1;
000052  2001              MOVS     r0,#1
                  |L4.84|
;;;39     	    }
;;;40      
;;;41      	  return 0;   
;;;42        }
;;;43        return 0;   
;;;44     }
000054  bd1e              POP      {r1-r4,pc}
                  |L4.86|
000056  2000              MOVS     r0,#0                 ;41
000058  bd1e              POP      {r1-r4,pc}
;;;45     
                          ENDP

00005a  0000              DCW      0x0000
                  |L4.92|
                          DCD      ||.data||

                          AREA ||i.PacketHeaderGeneration||, CODE, READONLY, ALIGN=2

                  PacketHeaderGeneration PROC
;;;53     ///////////////////////////////////////////////////////////////////////////////////////
;;;54     void PacketHeaderGeneration(u8* sentData)
000000  b570              PUSH     {r4-r6,lr}
;;;55     {
;;;56        sentData[0] = 0x55;
000002  2555              MOVS     r5,#0x55
000004  7005              STRB     r5,[r0,#0]
;;;57        sentData[1] = 0x66;
000006  2666              MOVS     r6,#0x66
000008  4604              MOV      r4,r0                 ;55
00000a  7046              STRB     r6,[r0,#1]
;;;58       
;;;59        sentData[2] = 0x07;	  
00000c  2007              MOVS     r0,#7
00000e  70a0              STRB     r0,[r4,#2]
;;;60     
;;;61        SentCheckCode=CheckSentData(sentData);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       CheckSentData
000016  4903              LDR      r1,|L5.36|
000018  7048              STRB     r0,[r1,#1]
;;;62     
;;;63        sentData[21] = SentCheckCode;		  //CheckCode
00001a  7560              STRB     r0,[r4,#0x15]
;;;64        sentData[22] = 0x66;                   //Length
00001c  75a6              STRB     r6,[r4,#0x16]
;;;65        sentData[23] = 0x55; 
00001e  75e5              STRB     r5,[r4,#0x17]
;;;66     }
000020  bd70              POP      {r4-r6,pc}
;;;67     
                          ENDP

000022  0000              DCW      0x0000
                  |L5.36|
                          DCD      ||.data||

                          AREA ||i.SendProcess||, CODE, READONLY, ALIGN=2

                  SendProcess PROC
;;;149    
;;;150    void SendProcess(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;151    {
;;;152      
;;;153       unsigned int i=0;
;;;154       //USART_ITConfig(USART1, USART_IT_RXNE, DISABLE); 
;;;155       USART_ITConfig(USART1,USART_IT_TXE,ENABLE);			  
000004  f8df8048          LDR      r8,|L6.80|
000008  f2407727          MOV      r7,#0x727
00000c  2400              MOVS     r4,#0                 ;153
00000e  2201              MOVS     r2,#1
000010  4639              MOV      r1,r7
000012  4640              MOV      r0,r8
000014  f7fffffe          BL       USART_ITConfig
;;;156    
;;;157       delay_ms(2);
000018  2002              MOVS     r0,#2
00001a  f7fffffe          BL       delay_ms
;;;158    
;;;159         DE1=0;
00001e  4d0d              LDR      r5,|L6.84|
000020  2000              MOVS     r0,#0
000022  f8c501ac          STR      r0,[r5,#0x1ac]
;;;160    	 for(i=0;i<24;i++)
;;;161    	 {
;;;162    	    Usart_SendChar(SentBuffer[i]); 
000026  4e0c              LDR      r6,|L6.88|
                  |L6.40|
000028  5d30              LDRB     r0,[r6,r4]
00002a  f7fffffe          BL       Usart_SendChar
00002e  1c64              ADDS     r4,r4,#1              ;160
000030  2c18              CMP      r4,#0x18              ;160
000032  d3f9              BCC      |L6.40|
;;;163    	 
;;;164    	 }
;;;165    	 delay_ms(2);
000034  2002              MOVS     r0,#2
000036  f7fffffe          BL       delay_ms
;;;166    	 DE1=1;
00003a  2001              MOVS     r0,#1
00003c  f8c501ac          STR      r0,[r5,#0x1ac]
;;;167    
;;;168    	  USART_ITConfig(USART1,USART_IT_TXE,DISABLE);			  	//发送完成 关闭中断
000040  4639              MOV      r1,r7
000042  4640              MOV      r0,r8
000044  e8bd41f0          POP      {r4-r8,lr}
000048  2200              MOVS     r2,#0
00004a  f7ffbffe          B.W      USART_ITConfig
;;;169    
;;;170    
;;;171    }
;;;172    
                          ENDP

00004e  0000              DCW      0x0000
                  |L6.80|
                          DCD      0x40013800
                  |L6.84|
                          DCD      0x42210000
                  |L6.88|
                          DCD      SentBuffer

                          AREA ||i.getDecHighByte||, CODE, READONLY, ALIGN=2

                  getDecHighByte PROC
;;;208    }
;;;209    char getDecHighByte(float data)
000000  b510              PUSH     {r4,lr}
;;;210    {
;;;211        char decByte = 0;
;;;212    	if(data<0)
000002  f1104fff          CMN      r0,#0x7f800000
000006  d301              BCC      |L7.12|
;;;213    	   data = data * -1;
000008  f0804000          EOR      r0,r0,#0x80000000
                  |L7.12|
;;;214    	decByte = ((int)(data*10000) % 10000) / 100;
00000c  4907              LDR      r1,|L7.44|
00000e  f7fffffe          BL       __aeabi_fmul
000012  f7fffffe          BL       __aeabi_f2iz
000016  f2427110          MOV      r1,#0x2710
00001a  fb90f2f1          SDIV     r2,r0,r1
00001e  fb010012          MLS      r0,r1,r2,r0
000022  2164              MOVS     r1,#0x64
000024  fb90f0f1          SDIV     r0,r0,r1
000028  b2c0              UXTB     r0,r0
;;;215    	return decByte;
;;;216    }
00002a  bd10              POP      {r4,pc}
;;;217    char getDecLowByte(float data)
                          ENDP

                  |L7.44|
                          DCD      0x461c4000

                          AREA ||i.getDecLowByte||, CODE, READONLY, ALIGN=2

                  getDecLowByte PROC
;;;216    }
;;;217    char getDecLowByte(float data)
000000  b510              PUSH     {r4,lr}
;;;218    {
;;;219        char decByte = 0;
;;;220    	if(data<0)
000002  f1104fff          CMN      r0,#0x7f800000
000006  d301              BCC      |L8.12|
;;;221    	   data = data * -1;
000008  f0804000          EOR      r0,r0,#0x80000000
                  |L8.12|
;;;222    	decByte = (int)(data*10000) % 100;
00000c  4905              LDR      r1,|L8.36|
00000e  f7fffffe          BL       __aeabi_fmul
000012  f7fffffe          BL       __aeabi_f2iz
000016  2164              MOVS     r1,#0x64
000018  fb90f2f1          SDIV     r2,r0,r1
00001c  fb010012          MLS      r0,r1,r2,r0
000020  b2c0              UXTB     r0,r0
;;;223    	return decByte;
;;;224    }
000022  bd10              POP      {r4,pc}
;;;225    
                          ENDP

                  |L8.36|
                          DCD      0x461c4000

                          AREA ||i.getIntHighByte||, CODE, READONLY, ALIGN=1

                  getIntHighByte PROC
;;;185    
;;;186    char getIntHighByte(float data)
000000  b510              PUSH     {r4,lr}
;;;187    {
;;;188        char highByte = 0;
;;;189        int temp = (int)data;
000002  f7fffffe          BL       __aeabi_f2iz
;;;190    	if(temp<0)
;;;191    	{
;;;192    	   temp = temp * -1;
;;;193       	   highByte = temp/100;
000006  2164              MOVS     r1,#0x64
000008  2800              CMP      r0,#0                 ;190
00000a  da06              BGE      |L9.26|
00000c  4240              RSBS     r0,r0,#0              ;192
00000e  fb90f0f1          SDIV     r0,r0,r1
000012  b2c0              UXTB     r0,r0
;;;194    	   highByte = highByte | 0x80;
000014  f0400080          ORR      r0,r0,#0x80
;;;195    	}
;;;196    	else
;;;197    	   highByte = temp/100;
;;;198    	return highByte;
;;;199    }
000018  bd10              POP      {r4,pc}
                  |L9.26|
00001a  fb90f0f1          SDIV     r0,r0,r1              ;197
00001e  b2c0              UXTB     r0,r0                 ;197
000020  bd10              POP      {r4,pc}
;;;200    char getIntLowByte(float data)
                          ENDP


                          AREA ||i.getIntLowByte||, CODE, READONLY, ALIGN=1

                  getIntLowByte PROC
;;;199    }
;;;200    char getIntLowByte(float data)
000000  b510              PUSH     {r4,lr}
;;;201    {
;;;202       char lowByte = 0;
;;;203       int temp = (int)data;
000002  f7fffffe          BL       __aeabi_f2iz
;;;204       if(temp<0)
000006  2800              CMP      r0,#0
000008  da00              BGE      |L10.12|
;;;205          temp = temp * -1;
00000a  4240              RSBS     r0,r0,#0
                  |L10.12|
;;;206    	lowByte = temp % 100;
00000c  2164              MOVS     r1,#0x64
00000e  fb90f2f1          SDIV     r2,r0,r1
000012  fb010012          MLS      r0,r1,r2,r0
000016  b2c0              UXTB     r0,r0
;;;207       return lowByte;
;;;208    }
000018  bd10              POP      {r4,pc}
;;;209    char getDecHighByte(float data)
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  ReceivedCheckCode
000000  00                DCB      0x00
                  SentCheckCode
000001  000000            DCB      0x00,0x00,0x00
                  MCUaddress
                          DCD      0x00000000
                  ReceivedDataLength
                          DCD      0x00000000

                          AREA ||area_number.14||, DATA, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.data||
                  SentDataLength
                          DCD      0x00000000
