; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -oruntimedata.o --asm_dir=.\ --list_dir=.\ --depend=runtimedata.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\ -I..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210E_EVAL -I..\RTD -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL --omf_browse=runtimedata.crf ..\runtimedata.c]
                          THUMB

                          AREA ||i.deAOReset||, CODE, READONLY, ALIGN=2

                  deAOReset PROC
;;;113    ////////////////////////////////////////////////////////////////
;;;114    float deAOReset(int port,float par1,float par2,float par3)     
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;115    {
;;;116       	float res = par3; 
;;;117    	int i;
;;;118    	u8 flag;
;;;119    	if(par1 == 1)
;;;120    	{
;;;121    	    for(i=0;i<4;i++)
;;;122    	   {
;;;123    	      AOAM[i] = AUTO; 	
000004  2620              MOVS     r6,#0x20
000006  f8df8074          LDR      r8,|L1.124|
;;;124    	      DAC_value[i] = par3;	//物理值
00000a  4f1d              LDR      r7,|L1.128|
;;;125    	      DAC_data[i] = par3;	 //电压值
00000c  481d              LDR      r0,|L1.132|
;;;126    		 flag  = CurrentflagAO[i];
00000e  4a1e              LDR      r2,|L1.136|
000010  461c              MOV      r4,r3                 ;115
000012  469b              MOV      r11,r3                ;116
000014  f1b15f7e          CMP      r1,#0x3f800000        ;119
000018  d017              BEQ      |L1.74|
00001a  46b2              MOV      r10,r6                ;123
;;;127        	 SetAoOut(DAC_data[i],i,flag);
;;;128    		 delay_ms(2);
;;;129    	   } 
;;;130    	}
;;;131    	else
;;;132    	{
;;;133    	   for(i=3;i>=0;i--)
00001c  2503              MOVS     r5,#3
00001e  4681              MOV      r9,r0                 ;125
000020  ea4f0602          MOV.W    r6,r2                 ;126
                  |L1.36|
;;;134    	   {
;;;135    	      AOAM[i] = AUTO; 	
000024  f808a005          STRB     r10,[r8,r5]
;;;136    	      DAC_value[i] = par3;	//物理值
000028  f8474025          STR      r4,[r7,r5,LSL #2]
;;;137    	      DAC_data[i] = par3;	 //电压值
00002c  f8494025          STR      r4,[r9,r5,LSL #2]
000030  4620              MOV      r0,r4
;;;138    		 flag  = CurrentflagAO[i];
000032  5d72              LDRB     r2,[r6,r5]
;;;139        	 SetAoOut(DAC_data[i],i,flag);
000034  b2e9              UXTB     r1,r5
000036  f7fffffe          BL       SetAoOut
;;;140    		 	 delay_ms(2); 
00003a  2002              MOVS     r0,#2
00003c  f7fffffe          BL       delay_ms
000040  1e6d              SUBS     r5,r5,#1              ;133
000042  d5ef              BPL      |L1.36|
                  |L1.68|
;;;141    	   } 
;;;142    	}
;;;143    	return res;
000044  4658              MOV      r0,r11
;;;144    }
000046  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.74|
00004a  46ba              MOV      r10,r7                ;124
00004c  2500              MOVS     r5,#0                 ;121
00004e  4607              MOV      r7,r0                 ;125
000050  ea4f0902          MOV.W    r9,r2                 ;126
                  |L1.84|
000054  f8086005          STRB     r6,[r8,r5]            ;123
000058  f84a4025          STR      r4,[r10,r5,LSL #2]    ;124
00005c  f8474025          STR      r4,[r7,r5,LSL #2]     ;125
000060  4620              MOV      r0,r4                 ;125
000062  f8192005          LDRB     r2,[r9,r5]            ;126
000066  b2e9              UXTB     r1,r5                 ;127
000068  f7fffffe          BL       SetAoOut
00006c  2002              MOVS     r0,#2                 ;128
00006e  f7fffffe          BL       delay_ms
000072  1c6d              ADDS     r5,r5,#1              ;121
000074  2d04              CMP      r5,#4                 ;121
000076  dbed              BLT      |L1.84|
000078  e7e4              B        |L1.68|
;;;145    
                          ENDP

00007a  0000              DCW      0x0000
                  |L1.124|
                          DCD      AOAM
                  |L1.128|
                          DCD      DAC_value
                  |L1.132|
                          DCD      DAC_data
                  |L1.136|
                          DCD      CurrentflagAO

                          AREA ||i.deDOReset||, CODE, READONLY, ALIGN=2

                  deDOReset PROC
;;;153    ////////////////////////////////////////////////////////////////
;;;154    float deDOReset(int port,float par1,float par2,float par3)     
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;155    {
;;;156       	float res = par3; 
000004  4698              MOV      r8,r3
;;;157    	int i;
;;;158    	if(par1 == 1)
000006  460c              MOV      r4,r1
000008  4640              MOV      r0,r8                 ;155
;;;159    	{
;;;160    	    for(i=0;i<4;i++)
;;;161    	   {	
;;;162    	      DO_onechannel(i,(int)par3);
00000a  f7fffffe          BL       __aeabi_f2iz
;;;163    	      DO_data[i] = (int)par3;
00000e  4e10              LDR      r6,|L2.80|
000010  4605              MOV      r5,r0                 ;162
000012  b2c7              UXTB     r7,r0                 ;162
000014  f1b45f7e          CMP      r4,#0x3f800000        ;158
000018  d00d              BEQ      |L2.54|
;;;164    		  delay_ms(2);
;;;165    	   } 
;;;166    	}
;;;167    	else
;;;168    	{
;;;169    	  for(i=3;i>=0;i--)
00001a  2403              MOVS     r4,#3
                  |L2.28|
;;;170    	   {
;;;171    	      DO_onechannel(i,(int)par3);
00001c  b2e9              UXTB     r1,r5
00001e  b2e0              UXTB     r0,r4
000020  f7fffffe          BL       DO_onechannel
;;;172    	      DO_data[i] = (int)par3;
000024  5537              STRB     r7,[r6,r4]
;;;173    		  delay_ms(2);
000026  2002              MOVS     r0,#2
000028  f7fffffe          BL       delay_ms
00002c  1e64              SUBS     r4,r4,#1              ;169
00002e  d5f5              BPL      |L2.28|
                  |L2.48|
;;;174    	   } 
;;;175    	}
;;;176    	return res;
000030  4640              MOV      r0,r8
;;;177    }
000032  e8bd81f0          POP      {r4-r8,pc}
                  |L2.54|
000036  2400              MOVS     r4,#0                 ;160
                  |L2.56|
000038  b2e9              UXTB     r1,r5                 ;162
00003a  b2e0              UXTB     r0,r4                 ;162
00003c  f7fffffe          BL       DO_onechannel
000040  5537              STRB     r7,[r6,r4]            ;163
000042  2002              MOVS     r0,#2                 ;164
000044  f7fffffe          BL       delay_ms
000048  1c64              ADDS     r4,r4,#1              ;160
00004a  2c04              CMP      r4,#4                 ;160
00004c  dbf4              BLT      |L2.56|
00004e  e7ef              B        |L2.48|
;;;178    
                          ENDP

                  |L2.80|
                          DCD      DO_data

                          AREA ||i.getAIPhysicalValue||, CODE, READONLY, ALIGN=2

                  getAIPhysicalValue PROC
;;;82     //////////////////////////////////////////////////////////
;;;83     void getAIPhysicalValue(float *aarr, PARAMS *range )
000000  b570              PUSH     {r4-r6,lr}
;;;84     {   
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;85        char i=0;
000006  2400              MOVS     r4,#0
                  |L3.8|
;;;86         for(i=0;i<12;i++)
;;;87         {          
;;;88             aarr[i]= getAIonechanelPhyVal(i,CurrentflagAI,aarr, range );
000008  4633              MOV      r3,r6
00000a  462a              MOV      r2,r5
00000c  4905              LDR      r1,|L3.36|
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       getAIonechanelPhyVal
000014  f8450024          STR      r0,[r5,r4,LSL #2]
000018  1c64              ADDS     r4,r4,#1              ;86
00001a  b2e4              UXTB     r4,r4                 ;86
00001c  2c0c              CMP      r4,#0xc               ;86
00001e  d3f3              BCC      |L3.8|
;;;89     
;;;90         }
;;;91     
;;;92     }
000020  bd70              POP      {r4-r6,pc}
;;;93     
                          ENDP

000022  0000              DCW      0x0000
                  |L3.36|
                          DCD      CurrentflagAI

                          AREA ||i.getAIonechanelPhyVal||, CODE, READONLY, ALIGN=1

                  getAIonechanelPhyVal PROC
;;;93     
;;;94     float getAIonechanelPhyVal(char channel,char* flag,float *aarr, PARAMS *range )
000000  b570              PUSH     {r4-r6,lr}
;;;95     {
000002  4604              MOV      r4,r0
000004  461d              MOV      r5,r3
;;;96         
;;;97     	 float ADC_voltage = 0.0;
;;;98     	 float adc_value =0.0;
;;;99     	 adc_value= ReadAdOfChannel(channel,flag[channel]);
000006  5d09              LDRB     r1,[r1,r4]
000008  f7fffffe          BL       ReadAdOfChannel
00000c  4601              MOV      r1,r0
;;;100    	 ADC_voltage =range[channel].a*adc_value-range[channel].b;
00000e  f8550034          LDR      r0,[r5,r4,LSL #3]
000012  f7fffffe          BL       __aeabi_fmul
000016  eb0501c4          ADD      r1,r5,r4,LSL #3
00001a  6849              LDR      r1,[r1,#4]
00001c  e8bd4070          POP      {r4-r6,lr}
000020  f7ffbffe          B.W      __aeabi_fsub
;;;101    
;;;102      	 return   ADC_voltage;
;;;103    
;;;104    }
;;;105    
                          ENDP


                          AREA ||i.readCtrlSignal||, CODE, READONLY, ALIGN=2

                  readCtrlSignal PROC
;;;360    
;;;361    void readCtrlSignal(void)
000000  480b              LDR      r0,|L5.48|
;;;362    {
000002  b510              PUSH     {r4,lr}
;;;363       int i=0;
;;;364    //  Registers[i++]	= 	 Setpoint[SPHUM]    ;
;;;365    //  Registers[i++]    = 	 Setpoint[SPTEMP]   ;
;;;366    //  Registers[i++]    = 	 alarmFlag          ;
;;;367      Registers[i++]    =	 deviceRun          ;
000004  7800              LDRB     r0,[r0,#0]  ; deviceRun
000006  f7fffffe          BL       __aeabi_ui2f
00000a  4c0a              LDR      r4,|L5.52|
;;;368      Registers[i++]	= 	 localControl       ;
00000c  6020              STR      r0,[r4,#0]
00000e  480a              LDR      r0,|L5.56|
000010  7800              LDRB     r0,[r0,#0]  ; localControl
000012  f7fffffe          BL       __aeabi_ui2f
;;;369      Registers[i++]	= 	 panelControl       ;
000016  6060              STR      r0,[r4,#4]
000018  4808              LDR      r0,|L5.60|
00001a  7800              LDRB     r0,[r0,#0]  ; panelControl
00001c  f7fffffe          BL       __aeabi_ui2f
;;;370      Registers[i++]	= 	 runStatus          ;
000020  60a0              STR      r0,[r4,#8]
000022  4807              LDR      r0,|L5.64|
000024  7800              LDRB     r0,[r0,#0]  ; runStatus
000026  f7fffffe          BL       __aeabi_ui2f
00002a  60e0              STR      r0,[r4,#0xc]
;;;371    //  	
;;;372    //  Registers[i++]    =	 StrSLevelHigh      ;
;;;373    //  Registers[i++]	= 	 StrSLevelLow       ;
;;;374    //
;;;375    //  Registers[i++]	= 	 DeSLevelHigh  		;
;;;376    //  Registers[i++]	= 	 DeSLevelTrasf 		;	
;;;377    //  Registers[i++]	= 	 DeSLevelOpt  		;
;;;378    //  Registers[i++]	= 	 DeSLevelLow		;	
;;;379    //
;;;380    //  Registers[i++]	= 	 CtrlParaP			;	
;;;381    //  Registers[i++]	= 	 CtrlParaI 			;
;;;382    //  Registers[i++]	= 	 CtrlParaD 			;
;;;383    
;;;384    
;;;385    }
00002c  bd10              POP      {r4,pc}
;;;386    
                          ENDP

00002e  0000              DCW      0x0000
                  |L5.48|
                          DCD      deviceRun
                  |L5.52|
                          DCD      Registers
                  |L5.56|
                          DCD      localControl
                  |L5.60|
                          DCD      panelControl
                  |L5.64|
                          DCD      runStatus

                          AREA ||i.readPorts||, CODE, READONLY, ALIGN=2

                  readPorts PROC
;;;21     *********************************************************************************************************/
;;;22     void readPorts(void )
000000  b570              PUSH     {r4-r6,lr}
;;;23     {
;;;24        u8 i=0;
000002  2400              MOVS     r4,#0
;;;25        ADC_allchannels(ADC_data,CurrentflagAI);
000004  4912              LDR      r1,|L6.80|
000006  4813              LDR      r0,|L6.84|
000008  f7fffffe          BL       ADC_allchannels
;;;26        getAIPhysicalValue(ADC_value, AIParams);
00000c  4912              LDR      r1,|L6.88|
00000e  4813              LDR      r0,|L6.92|
000010  f7fffffe          BL       getAIPhysicalValue
;;;27        GetDiMap(DI_data);
000014  4812              LDR      r0,|L6.96|
000016  f7fffffe          BL       GetDiMap
00001a  4d10              LDR      r5,|L6.92|
;;;28        
;;;29     	 for(i=0;i<6;i++)
;;;30     	 {
;;;31     	 	 ADC_value[i]=i+0.5;
00001c  4e11              LDR      r6,|L6.100|
                  |L6.30|
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       __aeabi_ui2d
000024  2200              MOVS     r2,#0
000026  4633              MOV      r3,r6
000028  f7fffffe          BL       __aeabi_dadd
00002c  f7fffffe          BL       __aeabi_d2f
000030  f8450024          STR      r0,[r5,r4,LSL #2]
000034  1c64              ADDS     r4,r4,#1              ;29
000036  b2e4              UXTB     r4,r4                 ;29
000038  2c06              CMP      r4,#6                 ;29
00003a  d3f0              BCC      |L6.30|
;;;32     
;;;33     	 }
;;;34     	 	 for(i=0;i<4;i++)
00003c  2000              MOVS     r0,#0
00003e  4908              LDR      r1,|L6.96|
;;;35     	 {
;;;36     	 	 DI_data[i]=1;
000040  2201              MOVS     r2,#1
                  |L6.66|
000042  540a              STRB     r2,[r1,r0]
000044  1c40              ADDS     r0,r0,#1              ;34
000046  b2c0              UXTB     r0,r0                 ;34
000048  2804              CMP      r0,#4                 ;34
00004a  d3fa              BCC      |L6.66|
;;;37     
;;;38     	 }
;;;39     
;;;40     }
00004c  bd70              POP      {r4-r6,pc}
;;;41     
                          ENDP

00004e  0000              DCW      0x0000
                  |L6.80|
                          DCD      CurrentflagAI
                  |L6.84|
                          DCD      ADC_data
                  |L6.88|
                          DCD      AIParams
                  |L6.92|
                          DCD      ADC_value
                  |L6.96|
                          DCD      DI_data
                  |L6.100|
                          DCD      0x3fe00000

                          AREA ||i.sendBufferFill||, CODE, READONLY, ALIGN=2

                  sendBufferFill PROC
;;;215    *********************************************************************************************************/
;;;216     void sendBufferFill (u8 *SentBuffer)
000000  b570              PUSH     {r4-r6,lr}
;;;217    {
;;;218    
;;;219    
;;;220       SentBuffer[8]= getIntLowByte(ADC_data[DELEVEL])	;			   //de solution level 
000002  4d0b              LDR      r5,|L7.48|
000004  4604              MOV      r4,r0                 ;217
000006  6828              LDR      r0,[r5,#0]  ; ADC_data
000008  f7fffffe          BL       getIntLowByte
00000c  7220              STRB     r0,[r4,#8]
;;;221       SentBuffer[9] =getDecHighByte(ADC_data[DELEVEL]);
00000e  6828              LDR      r0,[r5,#0]  ; ADC_data
000010  f7fffffe          BL       getDecHighByte
;;;222    
;;;223       SentBuffer[12] =	(DI_data[TSF_PUMP]<<4)|DI_data[TSF_VAV];
000014  4907              LDR      r1,|L7.52|
000016  7260              STRB     r0,[r4,#9]            ;221
000018  7848              LDRB     r0,[r1,#1]  ; DI_data
00001a  7809              LDRB     r1,[r1,#0]  ; DI_data
00001c  ea401101          ORR      r1,r0,r1,LSL #4
000020  7321              STRB     r1,[r4,#0xc]
;;;224       SentBuffer[13] =	DI_data[TSF_PUMP_FALT]<<4|0;
000022  0100              LSLS     r0,r0,#4
000024  7360              STRB     r0,[r4,#0xd]
;;;225    
;;;226       SentBuffer[20] =	 panelControl;
000026  4804              LDR      r0,|L7.56|
000028  7800              LDRB     r0,[r0,#0]  ; panelControl
00002a  7520              STRB     r0,[r4,#0x14]
;;;227    
;;;228    
;;;229    }
00002c  bd70              POP      {r4-r6,pc}
;;;230     /*********************************************************************************************************
                          ENDP

00002e  0000              DCW      0x0000
                  |L7.48|
                          DCD      ADC_data
                  |L7.52|
                          DCD      DI_data
                  |L7.56|
                          DCD      panelControl

                          AREA ||i.setAOallchanelPhyVal||, CODE, READONLY, ALIGN=1

                  setAOallchanelPhyVal PROC
;;;198    
;;;199    void setAOallchanelPhyVal(float *dacvl,PARAMS *range)
000000  b570              PUSH     {r4-r6,lr}
;;;200    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;201       char i;
;;;202       for(i=0;i<8;i++)
000006  2400              MOVS     r4,#0
                  |L8.8|
;;;203       {
;;;204           setAOonechanelPhyVal(i,dacvl[i],range[i].a);
000008  4620              MOV      r0,r4
00000a  f8562034          LDR      r2,[r6,r4,LSL #3]
00000e  f8551024          LDR      r1,[r5,r4,LSL #2]
000012  f7fffffe          BL       setAOonechanelPhyVal
000016  1c64              ADDS     r4,r4,#1              ;202
000018  b2e4              UXTB     r4,r4                 ;202
00001a  2c08              CMP      r4,#8                 ;202
00001c  d3f4              BCC      |L8.8|
;;;205       }
;;;206    
;;;207    }
00001e  bd70              POP      {r4-r6,pc}
;;;208     /*********************************************************************************************************
                          ENDP


                          AREA ||i.setAOonechanelPhyVal||, CODE, READONLY, ALIGN=2

                  setAOonechanelPhyVal PROC
;;;189    
;;;190    void setAOonechanelPhyVal(char port,float dacvl,float range)
000000  b510              PUSH     {r4,lr}
;;;191    { 
000002  4604              MOV      r4,r0
000004  4608              MOV      r0,r1
000006  4611              MOV      r1,r2
;;;192         float DAC_voltage = 0.0;
;;;193    
;;;194    	 DAC_voltage = dacvl/range*10.0;
000008  f7fffffe          BL       __aeabi_fdiv
00000c  4904              LDR      r1,|L9.32|
00000e  f7fffffe          BL       __aeabi_fmul
;;;195    	 SetAoOut(DAC_voltage,port,CurrentflagAO[port]);
000012  4904              LDR      r1,|L9.36|
000014  5d0a              LDRB     r2,[r1,r4]
000016  4621              MOV      r1,r4
000018  e8bd4010          POP      {r4,lr}
00001c  f7ffbffe          B.W      SetAoOut
;;;196    
;;;197    }
;;;198    
                          ENDP

                  |L9.32|
                          DCD      0x41200000
                  |L9.36|
                          DCD      CurrentflagAO

                          AREA ||i.writeBufferFill||, CODE, READONLY, ALIGN=2

                  writeBufferFill PROC
;;;237    *********************************************************************************************************/
;;;238     void writeBufferFill (u8 *writePortsBuffer)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;239    {
000004  4604              MOV      r4,r0
;;;240     
;;;241       int j,i = 0;
;;;242       char temp,temp1;
;;;243    //   char intHighByte,decLowByte,sign;
;;;244       char decHighByte,intLowByte;
;;;245       float value;
;;;246    
;;;247       temp = writePortsBuffer[i++];  //AOAM
000006  7801              LDRB     r1,[r0,#0]
000008  2501              MOVS     r5,#1
;;;248       for(j=0;j<8;j++)
;;;249       {
;;;250         if((temp>>j)&0x01)	AOAM[j] = MANUAL;
00000a  f8df9158          LDR      r9,|L10.356|
00000e  2000              MOVS     r0,#0                 ;248
                  |L10.16|
000010  fa21f200          LSR      r2,r1,r0
000014  07d2              LSLS     r2,r2,#31
000016  d001              BEQ      |L10.28|
000018  2210              MOVS     r2,#0x10
00001a  e000              B        |L10.30|
                  |L10.28|
;;;251    	 else AOAM[j] = AUTO;
00001c  2220              MOVS     r2,#0x20
                  |L10.30|
00001e  f8092000          STRB     r2,[r9,r0]
000022  1c40              ADDS     r0,r0,#1              ;248
000024  2808              CMP      r0,#8                 ;248
000026  dbf3              BLT      |L10.16|
;;;252       }
;;;253    
;;;254       temp = writePortsBuffer[i++];  //AO_HANDLER
000028  5d67              LDRB     r7,[r4,r5]
00002a  1c6d              ADDS     r5,r5,#1
;;;255       for(j=0;j<8;j++)	              //AO
00002c  f05f0600          MOVS.W   r6,#0
                  |L10.48|
;;;256       {
;;;257        //  intHighByte = writePortsBuffer[i++];
;;;258    	  intLowByte  = writePortsBuffer[i++];
000030  f8148005          LDRB     r8,[r4,r5]
000034  1c6d              ADDS     r5,r5,#1
;;;259    	  decHighByte = writePortsBuffer[i++];
000036  5d60              LDRB     r0,[r4,r5]
000038  1c6d              ADDS     r5,r5,#1
;;;260    	// decLowByte  = writePortsBuffer[i++];  
;;;261    
;;;262          if((temp>>j)&0x01)	
00003a  fa27f106          LSR      r1,r7,r6
00003e  07c9              LSLS     r1,r1,#31
000040  d013              BEQ      |L10.106|
;;;263          {	     
;;;264    	  //	 sign = (intHighByte & 0x80)>>7;
;;;265    	  //   value = (intHighByte&0x7f)*100 + intLowByte + decHighByte/100.0 + decLowByte/10000.0;	
;;;266    
;;;267    		 value =  intLowByte + decHighByte/100.0 ;	
000042  f7fffffe          BL       __aeabi_ui2d
000046  2200              MOVS     r2,#0
000048  4b47              LDR      r3,|L10.360|
00004a  f7fffffe          BL       __aeabi_ddiv
00004e  4682              MOV      r10,r0
000050  468b              MOV      r11,r1
000052  4640              MOV      r0,r8
000054  f7fffffe          BL       __aeabi_ui2d
000058  4652              MOV      r2,r10
00005a  465b              MOV      r3,r11
00005c  f7fffffe          BL       __aeabi_dadd
000060  f7fffffe          BL       __aeabi_d2f
;;;268    
;;;269    	//	 if(sign) value = value * -1;
;;;270    		 DAC_value[j] = value;
000064  4941              LDR      r1,|L10.364|
000066  f8410026          STR      r0,[r1,r6,LSL #2]
                  |L10.106|
00006a  1c76              ADDS     r6,r6,#1              ;255
00006c  2e08              CMP      r6,#8                 ;255
00006e  dbdf              BLT      |L10.48|
;;;271    //		 data = (value - AOParams[j].b)/AOParams[j].a;
;;;272    //     	 DAC_onechannel(j,data);
;;;273          }
;;;274        }
;;;275    
;;;276       temp  = writePortsBuffer[i++];  //DO_HANDLER
000070  5d61              LDRB     r1,[r4,r5]
000072  1c6d              ADDS     r5,r5,#1
;;;277       temp1 = writePortsBuffer[i++];  //DO
;;;278       for(j=0;j<8;j++)	  //DO
000074  2000              MOVS     r0,#0
000076  5d62              LDRB     r2,[r4,r5]            ;277
000078  1c6d              ADDS     r5,r5,#1              ;277
;;;279       {
;;;280          if((temp>>j) & 0x01)
;;;281    	  {	     
;;;282    	    if((temp1>>j) & 0x01)
;;;283    		{
;;;284    //		   DO_onechannel(j,1);
;;;285    		   DO_data[j] = 1;
00007a  4b3d              LDR      r3,|L10.368|
00007c  2601              MOVS     r6,#1                 ;247
00007e  4607              MOV      r7,r0                 ;241
                  |L10.128|
000080  fa21fc00          LSR      r12,r1,r0             ;280
000084  ea5f7ccc          LSLS     r12,r12,#31           ;280
000088  d007              BEQ      |L10.154|
00008a  fa22fc00          LSR      r12,r2,r0             ;282
00008e  ea5f7ccc          LSLS     r12,r12,#31           ;282
000092  d001              BEQ      |L10.152|
000094  541e              STRB     r6,[r3,r0]
000096  e000              B        |L10.154|
                  |L10.152|
;;;286    		}
;;;287    		else 
;;;288    		{
;;;289    //		   DO_onechannel(j,0);
;;;290    		   DO_data[j] = 0;
000098  541f              STRB     r7,[r3,r0]
                  |L10.154|
00009a  1c40              ADDS     r0,r0,#1              ;278
00009c  2808              CMP      r0,#8                 ;278
00009e  dbef              BLT      |L10.128|
;;;291    		}
;;;292    	  }
;;;293       } 
;;;294    
;;;295         temp = writePortsBuffer[i++];  //REGAM9--16
0000a0  5d66              LDRB     r6,[r4,r5]
0000a2  1c6d              ADDS     r5,r5,#1
;;;296       for(j=0;j<8;j++)
0000a4  2000              MOVS     r0,#0
0000a6  2310              MOVS     r3,#0x10              ;250
0000a8  4649              MOV      r1,r9                 ;250
0000aa  2220              MOVS     r2,#0x20              ;251
                  |L10.172|
;;;297       {
;;;298        if((temp>>j)&0x01)	AOAM[j] = MANUAL;
0000ac  fa26f700          LSR      r7,r6,r0
0000b0  07ff              LSLS     r7,r7,#31
0000b2  d001              BEQ      |L10.184|
0000b4  540b              STRB     r3,[r1,r0]
0000b6  e000              B        |L10.186|
                  |L10.184|
;;;299    	 else AOAM[j] = AUTO;
0000b8  540a              STRB     r2,[r1,r0]
                  |L10.186|
0000ba  1c40              ADDS     r0,r0,#1              ;296
0000bc  2808              CMP      r0,#8                 ;296
0000be  dbf5              BLT      |L10.172|
;;;300       }
;;;301       temp = writePortsBuffer[i++];  //REGAM1--8
0000c0  5d66              LDRB     r6,[r4,r5]
0000c2  1c6d              ADDS     r5,r5,#1
;;;302       for(j=0;j<8;j++)
0000c4  f05f0000          MOVS.W   r0,#0
                  |L10.200|
;;;303       {
;;;304        if((temp>>j)&0x01)	AOAM[j] = MANUAL;
0000c8  fa26f700          LSR      r7,r6,r0
0000cc  07ff              LSLS     r7,r7,#31
0000ce  d001              BEQ      |L10.212|
0000d0  540b              STRB     r3,[r1,r0]
0000d2  e000              B        |L10.214|
                  |L10.212|
;;;305    	 else AOAM[j] = AUTO;
0000d4  540a              STRB     r2,[r1,r0]
                  |L10.214|
0000d6  1c40              ADDS     r0,r0,#1              ;302
0000d8  2808              CMP      r0,#8                 ;302
0000da  dbf5              BLT      |L10.200|
;;;306       }
;;;307       
;;;308    
;;;309       temp1 = writePortsBuffer[i++];  	//REG_HANDLER9--16
;;;310       temp = writePortsBuffer[i++];  	//REG_HANDLER1--8
0000dc  1cad              ADDS     r5,r5,#2
0000de  f8dfa088          LDR      r10,|L10.360|
;;;311       for(j=0;j<8;j++)	              //REG1--8
;;;312       {
;;;313       //   intHighByte = writePortsBuffer[i++];
;;;314    	  intLowByte  = writePortsBuffer[i++];
;;;315    	  decHighByte = writePortsBuffer[i++];
;;;316      //	  decLowByte  = writePortsBuffer[i++];  
;;;317       //   if((temp>>j)&0x01)	
;;;318       //   {
;;;319            // sign = (intHighByte & 0x80)>>7;
;;;320    	    // value = (intHighByte&0x7f)*100 + intLowByte + decHighByte/100.0 + decLowByte/10000.0;	
;;;321    		 value =  intLowByte + decHighByte/100.0 ;	
;;;322    		 //if(sign) value = value * -1;	
;;;323    		 wRegisters[j] = value;
0000e2  f8dfb090          LDR      r11,|L10.372|
0000e6  2600              MOVS     r6,#0                 ;311
                  |L10.232|
0000e8  f8149005          LDRB     r9,[r4,r5]            ;314
0000ec  1c6d              ADDS     r5,r5,#1              ;314
0000ee  5d60              LDRB     r0,[r4,r5]            ;315
0000f0  1c6d              ADDS     r5,r5,#1              ;315
0000f2  f7fffffe          BL       __aeabi_ui2d
0000f6  2200              MOVS     r2,#0                 ;321
0000f8  4653              MOV      r3,r10                ;321
0000fa  f7fffffe          BL       __aeabi_ddiv
0000fe  4607              MOV      r7,r0                 ;321
000100  4688              MOV      r8,r1                 ;321
000102  4648              MOV      r0,r9                 ;321
000104  f7fffffe          BL       __aeabi_ui2d
000108  463a              MOV      r2,r7                 ;321
00010a  4643              MOV      r3,r8                 ;321
00010c  f7fffffe          BL       __aeabi_dadd
000110  f7fffffe          BL       __aeabi_d2f
000114  4601              MOV      r1,r0                 ;321
000116  f84b1026          STR      r1,[r11,r6,LSL #2]
00011a  1c76              ADDS     r6,r6,#1              ;311
00011c  4658              MOV      r0,r11
00011e  2e08              CMP      r6,#8                 ;311
000120  dbe2              BLT      |L10.232|
000122  46d3              MOV      r11,r10               ;267
;;;324       //   }
;;;325        }
;;;326    	for(j=0;j<8;j++)	              //REG9--16
000124  2600              MOVS     r6,#0
000126  4682              MOV      r10,r0                ;323
                  |L10.296|
;;;327       {
;;;328      //  intHighByte = writePortsBuffer[i++];
;;;329    	  intLowByte  = writePortsBuffer[i++];
000128  f8149005          LDRB     r9,[r4,r5]
00012c  1c6d              ADDS     r5,r5,#1
;;;330    	  decHighByte = writePortsBuffer[i++];
00012e  5d60              LDRB     r0,[r4,r5]
000130  1c6d              ADDS     r5,r5,#1
;;;331    //	  decLowByte  = writePortsBuffer[i++];  
;;;332         // if((temp1>>j)&0x01)	
;;;333         // {
;;;334         //    sign = (intHighByte & 0x80)>>7;
;;;335    	 //    value = (intHighByte&0x7f)*100 + intLowByte + decHighByte/100.0 + decLowByte/10000.0;	
;;;336    		value =  intLowByte + decHighByte/100.0 ;	
000132  f7fffffe          BL       __aeabi_ui2d
000136  2200              MOVS     r2,#0
000138  465b              MOV      r3,r11
00013a  f7fffffe          BL       __aeabi_ddiv
00013e  4680              MOV      r8,r0
000140  460f              MOV      r7,r1
000142  4648              MOV      r0,r9
000144  f7fffffe          BL       __aeabi_ui2d
000148  4642              MOV      r2,r8
00014a  463b              MOV      r3,r7
00014c  f7fffffe          BL       __aeabi_dadd
000150  f7fffffe          BL       __aeabi_d2f
;;;337    
;;;338    	//	 if(sign) value = value * -1;	
;;;339    		 wRegisters[j+8] = value;
000154  eb0a0186          ADD      r1,r10,r6,LSL #2
000158  1c76              ADDS     r6,r6,#1              ;326
00015a  6208              STR      r0,[r1,#0x20]         ;326
00015c  2e08              CMP      r6,#8                 ;326
00015e  dbe3              BLT      |L10.296|
;;;340         // }
;;;341        }
;;;342    
;;;343      
;;;344    }
000160  e8bd9ff0          POP      {r4-r12,pc}
;;;345    
                          ENDP

                  |L10.356|
                          DCD      AOAM
                  |L10.360|
                          DCD      0x40590000
                  |L10.364|
                          DCD      DAC_value
                  |L10.368|
                          DCD      DO_data
                  |L10.372|
                          DCD      wRegisters

                          AREA ||i.writeCtrlSignal||, CODE, READONLY, ALIGN=2

                  writeCtrlSignal PROC
;;;345    
;;;346    void writeCtrlSignal(void)
000000  b570              PUSH     {r4-r6,lr}
;;;347    {
;;;348    
;;;349       tempRegisters[BUFLEVEL]		=	  ReceivedBuffer[8] + ReceivedBuffer[9]/100	;
000002  4c18              LDR      r4,|L11.100|
000004  2664              MOVS     r6,#0x64
000006  7a60              LDRB     r0,[r4,#9]  ; ReceivedBuffer
000008  7a21              LDRB     r1,[r4,#8]  ; ReceivedBuffer
00000a  fbb0f0f6          UDIV     r0,r0,r6
00000e  4408              ADD      r0,r0,r1
000010  f7fffffe          BL       __aeabi_ui2f
000014  4d14              LDR      r5,|L11.104|
;;;350       tempRegisters[WSTLEVEL]	 	=	  ReceivedBuffer[10] + ReceivedBuffer[11]/100	;
000016  61e8              STR      r0,[r5,#0x1c]  ; tempRegisters
000018  7ae0              LDRB     r0,[r4,#0xb]  ; ReceivedBuffer
00001a  7aa1              LDRB     r1,[r4,#0xa]  ; ReceivedBuffer
00001c  fbb0f0f6          UDIV     r0,r0,r6
000020  4408              ADD      r0,r0,r1
000022  f7fffffe          BL       __aeabi_ui2f
;;;351       tempRegisters[SSTLEVEL]	 	=	  ReceivedBuffer[12] + ReceivedBuffer[13]/100;
000026  6028              STR      r0,[r5,#0]  ; tempRegisters
000028  7b60              LDRB     r0,[r4,#0xd]  ; ReceivedBuffer
00002a  7b21              LDRB     r1,[r4,#0xc]  ; ReceivedBuffer
00002c  fbb0f0f6          UDIV     r0,r0,r6
000030  4408              ADD      r0,r0,r1
000032  f7fffffe          BL       __aeabi_ui2f
;;;352       tempRegisters[RELEVEL]	   	=     ReceivedBuffer[14] + ReceivedBuffer[15]/100;
000036  6068              STR      r0,[r5,#4]  ; tempRegisters
000038  7be0              LDRB     r0,[r4,#0xf]  ; ReceivedBuffer
00003a  7ba1              LDRB     r1,[r4,#0xe]  ; ReceivedBuffer
00003c  fbb0f0f6          UDIV     r0,r0,r6
000040  4408              ADD      r0,r0,r1
000042  f7fffffe          BL       __aeabi_ui2f
;;;353    
;;;354       tempRegisters[LOWBUF]	    =     ReceivedBuffer[17] ;
000046  60a8              STR      r0,[r5,#8]  ; tempRegisters
000048  7c60              LDRB     r0,[r4,#0x11]  ; ReceivedBuffer
00004a  f7fffffe          BL       __aeabi_ui2f
;;;355       tempRegisters[CASETRANSFER] 	=     ReceivedBuffer[18] ;
00004e  63e8              STR      r0,[r5,#0x3c]  ; tempRegisters
000050  7ca0              LDRB     r0,[r4,#0x12]  ; ReceivedBuffer
000052  f7fffffe          BL       __aeabi_ui2f
;;;356       tempRegisters[CASEEMERGENCY] =     ReceivedBuffer[19] ;
000056  6368              STR      r0,[r5,#0x34]  ; tempRegisters
000058  7ce0              LDRB     r0,[r4,#0x13]  ; ReceivedBuffer
00005a  f7fffffe          BL       __aeabi_ui2f
00005e  63a8              STR      r0,[r5,#0x38]  ; tempRegisters
;;;357    
;;;358    
;;;359    }
000060  bd70              POP      {r4-r6,pc}
;;;360    
                          ENDP

000062  0000              DCW      0x0000
                  |L11.100|
                          DCD      ReceivedBuffer
                  |L11.104|
                          DCD      tempRegisters

                          AREA ||i.writePorts||, CODE, READONLY, ALIGN=2

                  writePorts PROC
;;;52     *********************************************************************************************************/
;;;53     void writePorts(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;54     {
;;;55        int j= 0;
;;;56        float data,value;
;;;57        u8 flag;
;;;58     
;;;59        for(j=0;j<4;j++)	              //AO
;;;60        {
;;;61     		 value = DAC_value[j];
000004  4f12              LDR      r7,|L12.80|
;;;62     		 flag  = CurrentflagAO[j];
000006  f8df804c          LDR      r8,|L12.84|
;;;63     		 data = (value - AOParams[j].b)/AOParams[j].a;
00000a  4d13              LDR      r5,|L12.88|
00000c  2400              MOVS     r4,#0                 ;55
00000e  bf00              NOP                            ;61
                  |L12.16|
000010  eb0501c4          ADD      r1,r5,r4,LSL #3
000014  f8570024          LDR      r0,[r7,r4,LSL #2]     ;61
000018  f8186004          LDRB     r6,[r8,r4]            ;62
00001c  6849              LDR      r1,[r1,#4]
00001e  f7fffffe          BL       __aeabi_fsub
000022  f8551034          LDR      r1,[r5,r4,LSL #3]
000026  f7fffffe          BL       __aeabi_fdiv
;;;64         	 SetAoOut(data,j,flag);
00002a  4632              MOV      r2,r6
00002c  b2e1              UXTB     r1,r4
00002e  f7fffffe          BL       SetAoOut
000032  1c64              ADDS     r4,r4,#1              ;59
000034  2c04              CMP      r4,#4                 ;59
000036  dbeb              BLT      |L12.16|
;;;65     
;;;66         }
;;;67     
;;;68        for(j=0;j<4;j++)	  //DO
;;;69        {
;;;70     		 DO_onechannel(j,DO_data[j]);
000038  4d08              LDR      r5,|L12.92|
00003a  2400              MOVS     r4,#0                 ;68
                  |L12.60|
00003c  b2e0              UXTB     r0,r4
00003e  5d29              LDRB     r1,[r5,r4]
000040  f7fffffe          BL       DO_onechannel
000044  1c64              ADDS     r4,r4,#1              ;68
000046  2c04              CMP      r4,#4                 ;68
000048  dbf8              BLT      |L12.60|
;;;71     		  
;;;72        } 
;;;73     
;;;74      
;;;75     }
00004a  e8bd81f0          POP      {r4-r8,pc}
;;;76     
                          ENDP

00004e  0000              DCW      0x0000
                  |L12.80|
                          DCD      DAC_value
                  |L12.84|
                          DCD      CurrentflagAO
                  |L12.88|
                          DCD      AOParams
                  |L12.92|
                          DCD      DO_data
