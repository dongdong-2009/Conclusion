; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -oio_spi.o --asm_dir=.\ --list_dir=.\ --depend=io_spi.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\ -I..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210E_EVAL -I..\RTD -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL --omf_browse=io_spi.crf ..\RTD\io_spi.c]
                          THUMB

                          AREA ||i.IO_SPI_read_write_data||, CODE, READONLY, ALIGN=2

                  IO_SPI_read_write_data PROC
;;;79     
;;;80     uint8_t IO_SPI_read_write_data(uint8_t data)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;81     {
;;;82       int i,j;
;;;83       uint8_t data_in = 0;
000004  2400              MOVS     r4,#0
;;;84     	j = 0x80;
;;;85       for(i=0;i<8;i++)
;;;86          {
;;;87               
;;;88             IO_SPI_DRIVE_SCLK_HIGH();
000006  4f18              LDR      r7,|L1.104|
000008  4680              MOV      r8,r0                 ;81
00000a  2680              MOVS     r6,#0x80              ;84
00000c  4625              MOV      r5,r4                 ;85
;;;89             if(data&j){
;;;90                 IO_SPI_DRIVE_SI_HIGH();  
00000e  f44f4a00          MOV      r10,#0x8000
000012  f44f5900          MOV      r9,#0x2000            ;88
;;;91             }else {
;;;92                 IO_SPI_DRIVE_SI_LOW();  
;;;93             }
;;;94     				delayNum();
;;;95             IO_SPI_DRIVE_SCLK_LOW();  
;;;96     				delayNum();
;;;97             data_in <<= 1;
;;;98             if(IO_SPI_SO_IS_HIGH()){
000016  f44f4b80          MOV      r11,#0x4000
                  |L1.26|
00001a  4649              MOV      r1,r9                 ;88
00001c  4638              MOV      r0,r7                 ;88
00001e  f7fffffe          BL       GPIO_SetBits
000022  ea180f06          TST      r8,r6                 ;89
000026  4651              MOV      r1,r10                ;92
000028  4638              MOV      r0,r7                 ;92
00002a  d002              BEQ      |L1.50|
00002c  f7fffffe          BL       GPIO_SetBits
000030  e001              B        |L1.54|
                  |L1.50|
000032  f7fffffe          BL       GPIO_ResetBits
                  |L1.54|
000036  f7fffffe          BL       delayNum
00003a  4649              MOV      r1,r9                 ;95
00003c  4638              MOV      r0,r7                 ;95
00003e  f7fffffe          BL       GPIO_ResetBits
000042  f7fffffe          BL       delayNum
000046  0660              LSLS     r0,r4,#25             ;97
000048  0e04              LSRS     r4,r0,#24             ;97
00004a  4659              MOV      r1,r11
00004c  4638              MOV      r0,r7
00004e  f7fffffe          BL       GPIO_ReadInputDataBit
000052  b108              CBZ      r0,|L1.88|
;;;99                 data_in |= 0x01;
000054  f0440401          ORR      r4,r4,#1
                  |L1.88|
;;;100            }
;;;101            j = j>>1;
000058  1076              ASRS     r6,r6,#1
00005a  1c6d              ADDS     r5,r5,#1              ;85
00005c  2d08              CMP      r5,#8                 ;85
00005e  dbdc              BLT      |L1.26|
;;;102         }
;;;103      return data_in;
000060  4620              MOV      r0,r4
;;;104    }
000062  e8bd9ff0          POP      {r4-r12,pc}
;;;105    
                          ENDP

000066  0000              DCW      0x0000
                  |L1.104|
                          DCD      0x40010c00

                          AREA ||i.IO_SpiInit||, CODE, READONLY, ALIGN=2

                  IO_SpiInit PROC
;;;28     
;;;29     void IO_SpiInit(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;30     {
;;;31     	
;;;32     		GPIO_InitTypeDef  GPIO_InitStructure;
;;;33     
;;;34     
;;;35       /* set CSn to default high level */
;;;36       IO_SPI_DRIVE_CSN_1_HIGH();
000002  4f25              LDR      r7,|L2.152|
000004  f44f7100          MOV      r1,#0x200
000008  4638              MOV      r0,r7
00000a  f7fffffe          BL       GPIO_SetBits
;;;37       IO_SPI_DRIVE_CSN_2_HIGH();
00000e  1539              ASRS     r1,r7,#20
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       GPIO_SetBits
;;;38     	
;;;39     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);	 //使能PA端口时钟
000016  2101              MOVS     r1,#1
000018  2008              MOVS     r0,#8
00001a  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;40     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);	 //使能PA端口时钟
00001e  2101              MOVS     r1,#1
000020  2010              MOVS     r0,#0x10
000022  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;41     
;;;42     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_9;				 // 端口配置
000026  f44f60c0          MOV      r0,#0x600
00002a  f8ad0000          STRH     r0,[sp,#0]
;;;43     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		 //推挽输出
00002e  2510              MOVS     r5,#0x10
000030  f88d5003          STRB     r5,[sp,#3]
;;;44     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
000034  2401              MOVS     r4,#1
000036  f88d4002          STRB     r4,[sp,#2]
;;;45     	GPIO_Init(GPIOC, &GPIO_InitStructure);
00003a  4669              MOV      r1,sp
00003c  4638              MOV      r0,r7
00003e  f7fffffe          BL       GPIO_Init
;;;46     	
;;;47     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_12;				 // 端口配置
000042  f44f50c0          MOV      r0,#0x1800
000046  f8ad0000          STRH     r0,[sp,#0]
;;;48     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING; 		 //推挽输出
00004a  2604              MOVS     r6,#4
00004c  f88d6003          STRB     r6,[sp,#3]
;;;49     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
000050  f88d4002          STRB     r4,[sp,#2]
;;;50     	GPIO_Init(GPIOC, &GPIO_InitStructure);
000054  4669              MOV      r1,sp
000056  4638              MOV      r0,r7
000058  f7fffffe          BL       GPIO_Init
;;;51     	
;;;52     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_15;				 // 端口配置
00005c  f44f4020          MOV      r0,#0xa000
000060  f8ad0000          STRH     r0,[sp,#0]
;;;53     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		 //推挽输出
000064  f88d5003          STRB     r5,[sp,#3]
;;;54     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
;;;55     	GPIO_Init(GPIOB, &GPIO_InitStructure);
000068  4d0c              LDR      r5,|L2.156|
00006a  f88d4002          STRB     r4,[sp,#2]            ;54
00006e  4669              MOV      r1,sp
000070  4628              MOV      r0,r5
000072  f7fffffe          BL       GPIO_Init
;;;56     	
;;;57     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;				 // 端口配置
000076  03a0              LSLS     r0,r4,#14
000078  f8ad0000          STRH     r0,[sp,#0]
;;;58     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING; 		 //推挽输出
00007c  f88d6003          STRB     r6,[sp,#3]
;;;59     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
000080  f88d4002          STRB     r4,[sp,#2]
;;;60     	GPIO_Init(GPIOB, &GPIO_InitStructure);
000084  4669              MOV      r1,sp
000086  4628              MOV      r0,r5
000088  f7fffffe          BL       GPIO_Init
;;;61     
;;;62       IO_SPI_DRIVE_SCLK_LOW();
00008c  0361              LSLS     r1,r4,#13
00008e  4628              MOV      r0,r5
000090  f7fffffe          BL       GPIO_ResetBits
;;;63       
;;;64     } 
000094  bdf8              POP      {r3-r7,pc}
;;;65     
                          ENDP

000096  0000              DCW      0x0000
                  |L2.152|
                          DCD      0x40011000
                  |L2.156|
                          DCD      0x40010c00

                          AREA ||i.delayNum||, CODE, READONLY, ALIGN=1

                  delayNum PROC
;;;66     
;;;67     void delayNum(void)
000000  2000              MOVS     r0,#0
                  |L3.2|
;;;68     {
;;;69     	int i,j;
;;;70     	for(i=0;i<10;i++)
;;;71     	{
;;;72     		for(j=0;j<10;j++)
000002  2100              MOVS     r1,#0
                  |L3.4|
000004  1c49              ADDS     r1,r1,#1
000006  290a              CMP      r1,#0xa
000008  dbfc              BLT      |L3.4|
00000a  1c40              ADDS     r0,r0,#1              ;70
00000c  280a              CMP      r0,#0xa               ;70
00000e  dbf8              BLT      |L3.2|
;;;73     		{
;;;74     			
;;;75     		}
;;;76     	}
;;;77     }
000010  4770              BX       lr
;;;78     
                          ENDP

