; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -odac8554.o --asm_dir=.\ --list_dir=.\ --depend=dac8554.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\ -I..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210E_EVAL -I..\RTD -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL --omf_browse=dac8554.crf ..\DAC8554.c]
                          THUMB

                          AREA ||i.DAC7554_GPIO_Config||, CODE, READONLY, ALIGN=2

                  DAC7554_GPIO_Config PROC
;;;3      u16 Dat;
;;;4      void DAC7554_GPIO_Config(void)
000000  b538              PUSH     {r3-r5,lr}
;;;5      {
;;;6      	GPIO_InitTypeDef  GPIO_InitStructure;
;;;7      
;;;8      	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);	 //使能PA端口时钟
000002  2101              MOVS     r1,#1
000004  2020              MOVS     r0,#0x20
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;9      
;;;10     	GPIO_InitStructure.GPIO_Pin = SYNC_Pin | SCLK_Pin | DIN_Pin | LDAC_Pin;				 // 端口配置
00000a  200f              MOVS     r0,#0xf
00000c  f8ad0000          STRH     r0,[sp,#0]
;;;11     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		 //推挽输出
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;12     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
000016  2001              MOVS     r0,#1
;;;13     	GPIO_Init(GPIOD, &GPIO_InitStructure);
000018  4c05              LDR      r4,|L1.48|
00001a  f88d0002          STRB     r0,[sp,#2]            ;12
00001e  4669              MOV      r1,sp
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       GPIO_Init
;;;14     	GPIO_ResetBits(GPIOD,LDAC_Pin);
000026  2108              MOVS     r1,#8
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       GPIO_ResetBits
;;;15     }
00002e  bd38              POP      {r3-r5,pc}
;;;16     
                          ENDP

                  |L1.48|
                          DCD      0x40011400

                          AREA ||i.DAC7554_Send_16_bits||, CODE, READONLY, ALIGN=2

                  DAC7554_Send_16_bits PROC
;;;44     }
;;;45     void DAC7554_Send_16_bits(unsigned int data)  // data是一个24位的数据,STM32中int型是32位的数据
000000  b570              PUSH     {r4-r6,lr}
;;;46     {
;;;47     	char i=0;
;;;48     
;;;49     	////////////////////////////////
;;;50     	SYNC_1();
000002  4e15              LDR      r6,|L2.88|
000004  4605              MOV      r5,r0                 ;46
000006  2201              MOVS     r2,#1
000008  2400              MOVS     r4,#0                 ;47
00000a  4611              MOV      r1,r2
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       GPIO_WriteBit
;;;51     	DAC8554_delay();//////////SYNC脚一个高脉冲
000012  f7fffffe          BL       DAC8554_delay
;;;52     	SYNC_0();
000016  2200              MOVS     r2,#0
000018  2101              MOVS     r1,#1
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       GPIO_WriteBit
                  |L2.32|
;;;53     	///////////////////////
;;;54     	for( i=0; i<16; i++ )
;;;55     	{
;;;56     		if((data&0x8000)  == 0x8000)
000020  0428              LSLS     r0,r5,#16
000022  d501              BPL      |L2.40|
;;;57     			DIN_1();  		
000024  2201              MOVS     r2,#1
000026  e000              B        |L2.42|
                  |L2.40|
;;;58     		else
;;;59     			DIN_0();
000028  2200              MOVS     r2,#0
                  |L2.42|
00002a  2104              MOVS     r1,#4
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       GPIO_WriteBit
;;;60     			
;;;61     		SCLK_1();
000032  2201              MOVS     r2,#1
000034  2102              MOVS     r1,#2
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       GPIO_WriteBit
;;;62     		DAC8554_delay();
00003c  f7fffffe          BL       DAC8554_delay
;;;63     		SCLK_0();
000040  2200              MOVS     r2,#0
000042  2102              MOVS     r1,#2
000044  4630              MOV      r0,r6
000046  f7fffffe          BL       GPIO_WriteBit
00004a  1c64              ADDS     r4,r4,#1              ;54
;;;64     		data=data<<1;
00004c  006d              LSLS     r5,r5,#1
00004e  b2e4              UXTB     r4,r4                 ;54
000050  2c10              CMP      r4,#0x10              ;54
000052  d3e5              BCC      |L2.32|
;;;65     	}	
;;;66     }
000054  bd70              POP      {r4-r6,pc}
;;;67     void SetAoOut(float Parm,u8 channel,u8 CurrentFlag)
                          ENDP

000056  0000              DCW      0x0000
                  |L2.88|
                          DCD      0x40011400

                          AREA ||i.DAC8554_Send_24_bits||, CODE, READONLY, ALIGN=2

                  DAC8554_Send_24_bits PROC
;;;22     
;;;23     void DAC8554_Send_24_bits(unsigned int data)  // data是一个24位的数据,STM32中int型是32位的数据
000000  b570              PUSH     {r4-r6,lr}
;;;24     {
;;;25     	char i=0;
;;;26     
;;;27     	////////////////////////////////
;;;28     	SYNC_1();
000002  4e15              LDR      r6,|L3.88|
000004  4605              MOV      r5,r0                 ;24
000006  2201              MOVS     r2,#1
000008  2400              MOVS     r4,#0                 ;25
00000a  4611              MOV      r1,r2
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       GPIO_WriteBit
;;;29     	DAC8554_delay();//////////SYNC脚一个高脉冲
000012  f7fffffe          BL       DAC8554_delay
;;;30     	SYNC_0();
000016  2200              MOVS     r2,#0
000018  2101              MOVS     r1,#1
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       GPIO_WriteBit
                  |L3.32|
;;;31     	///////////////////////
;;;32     	for( i=0; i<24; i++ )
;;;33     	{
;;;34     		if((data&0x800000)  == 0x800000)
000020  0228              LSLS     r0,r5,#8
000022  d501              BPL      |L3.40|
;;;35     			DIN_1();  		
000024  2201              MOVS     r2,#1
000026  e000              B        |L3.42|
                  |L3.40|
;;;36     		else
;;;37     			DIN_0();
000028  2200              MOVS     r2,#0
                  |L3.42|
00002a  2104              MOVS     r1,#4
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       GPIO_WriteBit
;;;38     			
;;;39     		SCLK_1();
000032  2201              MOVS     r2,#1
000034  2102              MOVS     r1,#2
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       GPIO_WriteBit
;;;40     		DAC8554_delay();
00003c  f7fffffe          BL       DAC8554_delay
;;;41     		SCLK_0();
000040  2200              MOVS     r2,#0
000042  2102              MOVS     r1,#2
000044  4630              MOV      r0,r6
000046  f7fffffe          BL       GPIO_WriteBit
00004a  1c64              ADDS     r4,r4,#1              ;32
;;;42     		data=data<<1;
00004c  006d              LSLS     r5,r5,#1
00004e  b2e4              UXTB     r4,r4                 ;32
000050  2c18              CMP      r4,#0x18              ;32
000052  d3e5              BCC      |L3.32|
;;;43     	}	
;;;44     }
000054  bd70              POP      {r4-r6,pc}
;;;45     void DAC7554_Send_16_bits(unsigned int data)  // data是一个24位的数据,STM32中int型是32位的数据
                          ENDP

000056  0000              DCW      0x0000
                  |L3.88|
                          DCD      0x40011400

                          AREA ||i.DAC8554_delay||, CODE, READONLY, ALIGN=1

                  DAC8554_delay PROC
;;;16     
;;;17     void DAC8554_delay(void)
000000  200a              MOVS     r0,#0xa
                  |L4.2|
;;;18     {
;;;19     	int x = 10;
;;;20       while(--x);
000002  1e40              SUBS     r0,r0,#1
000004  d1fd              BNE      |L4.2|
;;;21     }
000006  4770              BX       lr
;;;22     
                          ENDP


                          AREA ||i.Set8554Out||, CODE, READONLY, ALIGN=2

                  Set8554Out PROC
;;;105    ******************************************************/
;;;106    void Set8554Out(float Parm,u8 channel,u8 CurrentFlag)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;107    {
000004  460d              MOV      r5,r1
;;;108    	if(Parm<0)Parm=0;
000006  f1104fff          CMN      r0,#0x7f800000
00000a  d300              BCC      |L5.14|
00000c  2000              MOVS     r0,#0
                  |L5.14|
;;;109    	switch(CurrentFlag)
;;;110    	{
;;;111    		case 0:if(Parm>9.999)Parm=9.999;
;;;112    						break;
;;;113    		case 1:if(Parm>19.999)Parm=19.999;
;;;114    						break;
;;;115    		default:break;
;;;116    	}
;;;117    	switch(CurrentFlag)
;;;118    	{
;;;119    		case 0:Dat=Parm/2.0/5.0*65536;break;
00000e  4f2a              LDR      r7,|L5.184|
000010  4c2a              LDR      r4,|L5.188|
000012  f04f36ff          MOV      r6,#0xffffffff
000016  b112              CBZ      r2,|L5.30|
000018  2a01              CMP      r2,#1                 ;109
00001a  d10b              BNE      |L5.52|
00001c  e006              B        |L5.44|
                  |L5.30|
00001e  4928              LDR      r1,|L5.192|
000020  4288              CMP      r0,r1                 ;111
000022  dd00              BLE      |L5.38|
000024  4608              MOV      r0,r1                 ;111
                  |L5.38|
000026  f7fffffe          BL       __aeabi_f2d
00002a  e028              B        |L5.126|
                  |L5.44|
00002c  4925              LDR      r1,|L5.196|
00002e  4288              CMP      r0,r1                 ;113
000030  db00              BLT      |L5.52|
000032  4608              MOV      r0,r1                 ;113
                  |L5.52|
000034  2100              MOVS     r1,#0                 ;108
000036  2a01              CMP      r2,#1                 ;117
000038  d103              BNE      |L5.66|
;;;120    		case 1:
;;;121    			     if(Parm<=3.98406)                              //3.98406=20*10/(10+40.2)
00003a  4a23              LDR      r2,|L5.200|
00003c  4290              CMP      r0,r2
00003e  da10              BGE      |L5.98|
;;;122    					 {
;;;123    						 Dat=0;
000040  8021              STRH     r1,[r4,#0]
                  |L5.66|
;;;124    					 }
;;;125    					 else
;;;126    					 {
;;;127    						 Dat=(Parm-3.98406)/(20.08-3.98406)*10/2/5*65536;break;
;;;128    					 }
;;;129    		default:Dat=0;
000042  8021              STRH     r1,[r4,#0]
                  |L5.68|
;;;130    	}
;;;131    	switch(channel)
000044  2d01              CMP      r5,#1
000046  d028              BEQ      |L5.154|
000048  2d02              CMP      r5,#2
00004a  d02a              BEQ      |L5.162|
00004c  2d03              CMP      r5,#3
00004e  d02c              BEQ      |L5.170|
000050  2d04              CMP      r5,#4
000052  d12e              BNE      |L5.178|
;;;132    	{
;;;133    		case 1:DAC8554_Send_24_bits((0x00100000|0x00000000)+Dat);break;
;;;134    		case 2:DAC8554_Send_24_bits((0x00100000|0x00020000)+Dat);break;
;;;135    		case 3:DAC8554_Send_24_bits((0x00100000|0x00040000)+Dat);break;
;;;136    		case 4:DAC8554_Send_24_bits((0x00100000|0x00060000)+Dat);break;
000054  8820              LDRH     r0,[r4,#0]  ; Dat
000056  f50010b0          ADD      r0,r0,#0x160000
                  |L5.90|
00005a  e8bd41f0          POP      {r4-r8,lr}
00005e  f7ffbffe          B.W      DAC8554_Send_24_bits
                  |L5.98|
000062  f7fffffe          BL       __aeabi_f2d
000066  4a19              LDR      r2,|L5.204|
000068  4b19              LDR      r3,|L5.208|
00006a  f7fffffe          BL       __aeabi_dsub
00006e  4a19              LDR      r2,|L5.212|
000070  4b19              LDR      r3,|L5.216|
000072  f7fffffe          BL       __aeabi_ddiv
000076  2200              MOVS     r2,#0                 ;127
000078  4b18              LDR      r3,|L5.220|
00007a  f7fffffe          BL       __aeabi_dmul
                  |L5.126|
00007e  4632              MOV      r2,r6                 ;119
000080  f7fffffe          BL       __ARM_scalbn
000084  2200              MOVS     r2,#0                 ;119
000086  463b              MOV      r3,r7                 ;119
000088  f7fffffe          BL       __aeabi_ddiv
00008c  2210              MOVS     r2,#0x10              ;119
00008e  f7fffffe          BL       __ARM_scalbn
000092  f7fffffe          BL       __aeabi_d2uiz
000096  8020              STRH     r0,[r4,#0]            ;119
000098  e7d4              B        |L5.68|
                  |L5.154|
00009a  8820              LDRH     r0,[r4,#0]            ;133  ; Dat
00009c  f5001080          ADD      r0,r0,#0x100000       ;133
0000a0  e7db              B        |L5.90|
                  |L5.162|
0000a2  8820              LDRH     r0,[r4,#0]            ;134  ; Dat
0000a4  f5001090          ADD      r0,r0,#0x120000       ;134
0000a8  e7d7              B        |L5.90|
                  |L5.170|
0000aa  8820              LDRH     r0,[r4,#0]            ;135  ; Dat
0000ac  f50010a0          ADD      r0,r0,#0x140000       ;135
0000b0  e7d3              B        |L5.90|
                  |L5.178|
;;;137    		default:break;
;;;138    	}
;;;139    }	
0000b2  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

0000b6  0000              DCW      0x0000
                  |L5.184|
                          DCD      0x40140000
                  |L5.188|
                          DCD      ||.data||
                  |L5.192|
                          DCD      0x411ffbe7
                  |L5.196|
                          DCD      0x419ffdf4
                  |L5.200|
                          DCD      0x407efad7
                  |L5.204|
                          DCD      0xd96a6a01
                  |L5.208|
                          DCD      0x400fdf5a
                  |L5.212|
                          DCD      0x861a60d4
                  |L5.216|
                          DCD      0x4030188f
                  |L5.220|
                          DCD      0x40240000

                          AREA ||i.SetAoOut||, CODE, READONLY, ALIGN=2

                  SetAoOut PROC
;;;66     }
;;;67     void SetAoOut(float Parm,u8 channel,u8 CurrentFlag)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;68     {
000004  460d              MOV      r5,r1
;;;69     	if(Parm<0)Parm=0;
000006  f1104fff          CMN      r0,#0x7f800000
00000a  d300              BCC      |L6.14|
00000c  2000              MOVS     r0,#0
                  |L6.14|
;;;70     	switch(CurrentFlag)
;;;71     	{
;;;72     		case 0:if(Parm>9.999)Parm=9.999;
;;;73     						break;
;;;74     		case 1:if(Parm>19.999)Parm=19.999;
;;;75     						break;
;;;76     		default:break;
;;;77     	}
;;;78     	switch(CurrentFlag)
;;;79     	{
;;;80     		case 0:Dat=Parm/2.0/5.0*4096;break;
00000e  4f2a              LDR      r7,|L6.184|
000010  4c2a              LDR      r4,|L6.188|
000012  f04f36ff          MOV      r6,#0xffffffff
000016  b112              CBZ      r2,|L6.30|
000018  2a01              CMP      r2,#1                 ;70
00001a  d10b              BNE      |L6.52|
00001c  e006              B        |L6.44|
                  |L6.30|
00001e  4928              LDR      r1,|L6.192|
000020  4288              CMP      r0,r1                 ;72
000022  dd00              BLE      |L6.38|
000024  4608              MOV      r0,r1                 ;72
                  |L6.38|
000026  f7fffffe          BL       __aeabi_f2d
00002a  e028              B        |L6.126|
                  |L6.44|
00002c  4925              LDR      r1,|L6.196|
00002e  4288              CMP      r0,r1                 ;74
000030  db00              BLT      |L6.52|
000032  4608              MOV      r0,r1                 ;74
                  |L6.52|
000034  2100              MOVS     r1,#0                 ;69
000036  2a01              CMP      r2,#1                 ;78
000038  d103              BNE      |L6.66|
;;;81     		case 1:
;;;82     			     if(Parm<=3.98406)                              //3.98406=20*10/(10+40.2)
00003a  4a23              LDR      r2,|L6.200|
00003c  4290              CMP      r0,r2
00003e  da10              BGE      |L6.98|
;;;83     					 {
;;;84     						 Dat=0;
000040  8021              STRH     r1,[r4,#0]
                  |L6.66|
;;;85     					 }
;;;86     					 else
;;;87     					 {
;;;88     						 Dat=(Parm-3.98406)/(20.08-3.98406)*10/2/5*4096;break;
;;;89     					 }
;;;90     		default:Dat=0;
000042  8021              STRH     r1,[r4,#0]
                  |L6.68|
;;;91     	}
;;;92     	switch(channel)
000044  2d01              CMP      r5,#1
000046  d028              BEQ      |L6.154|
000048  2d02              CMP      r5,#2
00004a  d02a              BEQ      |L6.162|
00004c  2d03              CMP      r5,#3
00004e  d02c              BEQ      |L6.170|
000050  2d04              CMP      r5,#4
000052  d12e              BNE      |L6.178|
;;;93     	{
;;;94     		case 1:DAC7554_Send_16_bits((0x8000|0x0000)+Dat);break;
;;;95     		case 2:DAC7554_Send_16_bits((0x8000|0x1000)+Dat);break;
;;;96     		case 3:DAC7554_Send_16_bits((0x8000|0x2000)+Dat);break;
;;;97     		case 4:DAC7554_Send_16_bits((0x8000|0x3000)+Dat);break;
000054  8820              LDRH     r0,[r4,#0]  ; Dat
000056  f5004030          ADD      r0,r0,#0xb000
                  |L6.90|
00005a  e8bd41f0          POP      {r4-r8,lr}
00005e  f7ffbffe          B.W      DAC7554_Send_16_bits
                  |L6.98|
000062  f7fffffe          BL       __aeabi_f2d
000066  4a19              LDR      r2,|L6.204|
000068  4b19              LDR      r3,|L6.208|
00006a  f7fffffe          BL       __aeabi_dsub
00006e  4a19              LDR      r2,|L6.212|
000070  4b19              LDR      r3,|L6.216|
000072  f7fffffe          BL       __aeabi_ddiv
000076  2200              MOVS     r2,#0                 ;88
000078  4b18              LDR      r3,|L6.220|
00007a  f7fffffe          BL       __aeabi_dmul
                  |L6.126|
00007e  4632              MOV      r2,r6                 ;80
000080  f7fffffe          BL       __ARM_scalbn
000084  2200              MOVS     r2,#0                 ;80
000086  463b              MOV      r3,r7                 ;80
000088  f7fffffe          BL       __aeabi_ddiv
00008c  220c              MOVS     r2,#0xc               ;80
00008e  f7fffffe          BL       __ARM_scalbn
000092  f7fffffe          BL       __aeabi_d2uiz
000096  8020              STRH     r0,[r4,#0]            ;80
000098  e7d4              B        |L6.68|
                  |L6.154|
00009a  8820              LDRH     r0,[r4,#0]            ;94  ; Dat
00009c  f5004000          ADD      r0,r0,#0x8000         ;94
0000a0  e7db              B        |L6.90|
                  |L6.162|
0000a2  8820              LDRH     r0,[r4,#0]            ;95  ; Dat
0000a4  f5004010          ADD      r0,r0,#0x9000         ;95
0000a8  e7d7              B        |L6.90|
                  |L6.170|
0000aa  8820              LDRH     r0,[r4,#0]            ;96  ; Dat
0000ac  f5004020          ADD      r0,r0,#0xa000         ;96
0000b0  e7d3              B        |L6.90|
                  |L6.178|
;;;98     		default:break;
;;;99     	}
;;;100    }	
0000b2  e8bd81f0          POP      {r4-r8,pc}
;;;101    /*****************************************************
                          ENDP

0000b6  0000              DCW      0x0000
                  |L6.184|
                          DCD      0x40140000
                  |L6.188|
                          DCD      ||.data||
                  |L6.192|
                          DCD      0x411ffbe7
                  |L6.196|
                          DCD      0x419ffdf4
                  |L6.200|
                          DCD      0x407efad7
                  |L6.204|
                          DCD      0xd96a6a01
                  |L6.208|
                          DCD      0x400fdf5a
                  |L6.212|
                          DCD      0x861a60d4
                  |L6.216|
                          DCD      0x4030188f
                  |L6.220|
                          DCD      0x40240000

                          AREA ||.data||, DATA, ALIGN=1

                  ||Dat||
000000  0000              DCB      0x00,0x00
