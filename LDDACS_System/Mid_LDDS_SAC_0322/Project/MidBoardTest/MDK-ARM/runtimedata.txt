; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -oruntimedata.o --asm_dir=.\ --list_dir=.\ --depend=runtimedata.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\ -I..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210E_EVAL -I..\RTD -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL --omf_browse=runtimedata.crf ..\runtimedata.c]
                          THUMB

                          AREA ||i.DE1receBufferFill||, CODE, READONLY, ALIGN=2

                  DE1receBufferFill PROC
;;;85     
;;;86     void DE1receBufferFill(u8 *ReceivedBuffer)
000000  b570              PUSH     {r4-r6,lr}
;;;87     {
000002  4604              MOV      r4,r0
;;;88        setPoint[SPHUM]	 =  ReceivedBuffer[3] ;
000004  78c0              LDRB     r0,[r0,#3]
000006  f7fffffe          BL       __aeabi_ui2f
00000a  4d12              LDR      r5,|L1.84|
;;;89        setPoint[SPTEMP]	 =  ReceivedBuffer[4]*100 + ReceivedBuffer[5] ;
00000c  6028              STR      r0,[r5,#0]  ; setPoint
00000e  7921              LDRB     r1,[r4,#4]
000010  7960              LDRB     r0,[r4,#5]
000012  eb0102c1          ADD      r2,r1,r1,LSL #3
000016  eb021101          ADD      r1,r2,r1,LSL #4
00001a  eb000081          ADD      r0,r0,r1,LSL #2
00001e  f7fffffe          BL       __aeabi_ui2f
;;;90     
;;;91        tempRegisters[BUFLEVEL1] = ReceivedBuffer[8]*100+ReceivedBuffer[9] ;
000022  6068              STR      r0,[r5,#4]  ; setPoint
000024  7a21              LDRB     r1,[r4,#8]
000026  7a60              LDRB     r0,[r4,#9]
000028  eb0102c1          ADD      r2,r1,r1,LSL #3
00002c  eb021101          ADD      r1,r2,r1,LSL #4
000030  eb000081          ADD      r0,r0,r1,LSL #2
000034  f7fffffe          BL       __aeabi_ui2f
000038  4d07              LDR      r5,|L1.88|
;;;92        tempRegisters[DELEVEL1]  = ReceivedBuffer[10]*100+ReceivedBuffer[11] ;
00003a  61a8              STR      r0,[r5,#0x18]  ; tempRegisters
00003c  7aa1              LDRB     r1,[r4,#0xa]
00003e  7ae0              LDRB     r0,[r4,#0xb]
000040  eb0102c1          ADD      r2,r1,r1,LSL #3
000044  eb021101          ADD      r1,r2,r1,LSL #4
000048  eb000081          ADD      r0,r0,r1,LSL #2
00004c  f7fffffe          BL       __aeabi_ui2f
000050  60e8              STR      r0,[r5,#0xc]  ; tempRegisters
;;;93     
;;;94     //   alarmFlag   = ReqSysBuffer[20];
;;;95     }
000052  bd70              POP      {r4-r6,pc}
;;;96     //please modifiy based on protocol
                          ENDP

                  |L1.84|
                          DCD      setPoint
                  |L1.88|
                          DCD      tempRegisters

                          AREA ||i.DEsendBufferFill||, CODE, READONLY, ALIGN=2

                  DEsendBufferFill PROC
;;;47     *********************************************************************************************************/
;;;48      void DEsendBufferFill (u8 *SentBuffer)
000000  b570              PUSH     {r4-r6,lr}
;;;49     {
;;;50         SentBuffer[10] = getIntLowByte(tempRegisters[WSTLEVEL]); 
000002  4d13              LDR      r5,|L2.80|
000004  4604              MOV      r4,r0                 ;49
000006  6828              LDR      r0,[r5,#0]  ; tempRegisters
000008  f7fffffe          BL       getIntLowByte
00000c  72a0              STRB     r0,[r4,#0xa]
;;;51         SentBuffer[11] = getDecHighByte(tempRegisters[WSTLEVEL]); 
00000e  6828              LDR      r0,[r5,#0]  ; tempRegisters
000010  f7fffffe          BL       getDecHighByte
000014  72e0              STRB     r0,[r4,#0xb]
;;;52     
;;;53     	SentBuffer[12] = getIntLowByte(tempRegisters[SSTLEVEL]); 
000016  6868              LDR      r0,[r5,#4]  ; tempRegisters
000018  f7fffffe          BL       getIntLowByte
00001c  7320              STRB     r0,[r4,#0xc]
;;;54         SentBuffer[13] = getDecHighByte(tempRegisters[SSTLEVEL]); 
00001e  6868              LDR      r0,[r5,#4]  ; tempRegisters
000020  f7fffffe          BL       getDecHighByte
000024  7360              STRB     r0,[r4,#0xd]
;;;55     
;;;56     	SentBuffer[14] = getIntLowByte(tempRegisters[RELEVEL]); 
000026  68a8              LDR      r0,[r5,#8]  ; tempRegisters
000028  f7fffffe          BL       getIntLowByte
00002c  73a0              STRB     r0,[r4,#0xe]
;;;57         SentBuffer[15] = getDecHighByte(tempRegisters[RELEVEL]);
00002e  68a8              LDR      r0,[r5,#8]  ; tempRegisters
000030  f7fffffe          BL       getDecHighByte
000034  73e0              STRB     r0,[r4,#0xf]
;;;58     
;;;59         SentBuffer[17] = selectedBuffer;
000036  4807              LDR      r0,|L2.84|
000038  7800              LDRB     r0,[r0,#0]  ; selectedBuffer
00003a  7460              STRB     r0,[r4,#0x11]
;;;60     
;;;61         SentBuffer[18] = tempRegisters[CASETRANSFER]; 
00003c  6b68              LDR      r0,[r5,#0x34]  ; tempRegisters
00003e  f7fffffe          BL       __aeabi_f2uiz
000042  74a0              STRB     r0,[r4,#0x12]
;;;62         SentBuffer[19] = tempRegisters[CASEEMERGENCY]; 
000044  6ba8              LDR      r0,[r5,#0x38]  ; tempRegisters
000046  f7fffffe          BL       __aeabi_f2uiz
00004a  74e0              STRB     r0,[r4,#0x13]
;;;63     }
00004c  bd70              POP      {r4-r6,pc}
;;;64     
                          ENDP

00004e  0000              DCW      0x0000
                  |L2.80|
                          DCD      tempRegisters
                  |L2.84|
                          DCD      ||.data||

                          AREA ||i.REreceBufferFill||, CODE, READONLY, ALIGN=2

                  REreceBufferFill PROC
;;;96     //please modifiy based on protocol
;;;97     void REreceBufferFill(u8 *ReceivedBuffer)
000000  b570              PUSH     {r4-r6,lr}
;;;98     {
000002  4604              MOV      r4,r0
;;;99        setPoint[SETRECON]	 =  ReceivedBuffer[6]/100 ;
000004  7980              LDRB     r0,[r0,#6]
000006  2164              MOVS     r1,#0x64
000008  fbb0f0f1          UDIV     r0,r0,r1
00000c  f7fffffe          BL       __aeabi_ui2f
000010  4912              LDR      r1,|L3.92|
;;;100    
;;;101       tempRegisters[WSTLEVEL] = ReceivedBuffer[8]*100+ReceivedBuffer[9] ;
000012  6088              STR      r0,[r1,#8]  ; setPoint
000014  7a21              LDRB     r1,[r4,#8]
000016  7a60              LDRB     r0,[r4,#9]
000018  eb0102c1          ADD      r2,r1,r1,LSL #3
00001c  eb021101          ADD      r1,r2,r1,LSL #4
000020  eb000081          ADD      r0,r0,r1,LSL #2
000024  f7fffffe          BL       __aeabi_ui2f
000028  4d0d              LDR      r5,|L3.96|
;;;102       tempRegisters[SSTLEVEL]  = ReceivedBuffer[10]*100+ReceivedBuffer[11] ;
00002a  6028              STR      r0,[r5,#0]  ; tempRegisters
00002c  7aa1              LDRB     r1,[r4,#0xa]
00002e  7ae0              LDRB     r0,[r4,#0xb]
000030  eb0102c1          ADD      r2,r1,r1,LSL #3
000034  eb021101          ADD      r1,r2,r1,LSL #4
000038  eb000081          ADD      r0,r0,r1,LSL #2
00003c  f7fffffe          BL       __aeabi_ui2f
;;;103       tempRegisters[RELEVEL]  = ReceivedBuffer[12]*100+ReceivedBuffer[13] ;
000040  6068              STR      r0,[r5,#4]  ; tempRegisters
000042  7b21              LDRB     r1,[r4,#0xc]
000044  7b60              LDRB     r0,[r4,#0xd]
000046  eb0102c1          ADD      r2,r1,r1,LSL #3
00004a  eb021101          ADD      r1,r2,r1,LSL #4
00004e  eb000081          ADD      r0,r0,r1,LSL #2
000052  f7fffffe          BL       __aeabi_ui2f
000056  60a8              STR      r0,[r5,#8]  ; tempRegisters
;;;104    
;;;105    //   alarmFlag   = ReqSysBuffer[20];
;;;106    
;;;107    
;;;108    }
000058  bd70              POP      {r4-r6,pc}
;;;109    
                          ENDP

00005a  0000              DCW      0x0000
                  |L3.92|
                          DCD      setPoint
                  |L3.96|
                          DCD      tempRegisters

                          AREA ||i.REsendBufferFill||, CODE, READONLY, ALIGN=2

                  REsendBufferFill PROC
;;;72     *********************************************************************************************************/
;;;73      void REsendBufferFill (u8 *SentBuffer)
000000  b570              PUSH     {r4-r6,lr}
;;;74     {
;;;75     //	SentBuffer[12] = getIntLowByte(tempRegisters[BUFLEVEL]); 
;;;76     //  SentBuffer[13] = getDecHighByte(tempRegisters[BUFLEVEL]); 
;;;77     
;;;78     //	SentBuffer[14] = getIntLowByte(tempRegisters[DELEVEL]); 
;;;79     //  SentBuffer[15] = getDecHighByte(tempRegisters[DELEVEL]);
;;;80     
;;;81         SentBuffer[18] = tempRegisters[CASETRANSFER]; 
000002  4d05              LDR      r5,|L4.24|
000004  4604              MOV      r4,r0                 ;74
000006  6b68              LDR      r0,[r5,#0x34]  ; tempRegisters
000008  f7fffffe          BL       __aeabi_f2uiz
00000c  74a0              STRB     r0,[r4,#0x12]
;;;82         SentBuffer[19] = tempRegisters[CASEEMERGENCY]; 
00000e  6ba8              LDR      r0,[r5,#0x38]  ; tempRegisters
000010  f7fffffe          BL       __aeabi_f2uiz
000014  74e0              STRB     r0,[r4,#0x13]
;;;83     
;;;84     }
000016  bd70              POP      {r4-r6,pc}
;;;85     
                          ENDP

                  |L4.24|
                          DCD      tempRegisters

                          AREA ||i.emergencyCheck||, CODE, READONLY, ALIGN=2

                  emergencyCheck PROC
;;;159    
;;;160    void  emergencyCheck(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;161    {
;;;162      u8 i=0,flag=0;
000004  2100              MOVS     r1,#0
;;;163    
;;;164      for(i=0;i<DENUM;i++)
;;;165      {
;;;166    	if(tempRegisters[DELEVEL1+i]>DHA3)
000006  4e1d              LDR      r6,|L5.124|
;;;167    	   flag=0x01;
;;;168        if(tempRegisters[DELEVEL1+i]<=DLA)
000008  4f1d              LDR      r7,|L5.128|
;;;169    	   flag=0x02;
;;;170    	if(tempRegisters[BUFLEVEL1+i]>=BHA2)
;;;171    	   flag=0x03;
;;;172    
;;;173    	 if(tempRegisters[DELEVEL1+i]>DHA2)
00000a  f8dfc078          LDR      r12,|L5.132|
;;;174    	 {
;;;175    	 	if(tempRegisters[WSTLEVEL+i]>=WHA1)
;;;176    		 flag=0x08;
;;;177    		else
;;;178    		 flag=0x09;
;;;179    	 }
;;;180    	  
;;;181        if(tempRegisters[BUFLEVEL1+i]<=BLA)
00000e  f8dfe078          LDR      lr,|L5.136|
000012  4a1e              LDR      r2,|L5.140|
000014  4c1e              LDR      r4,|L5.144|
000016  4608              MOV      r0,r1                 ;162
                  |L5.24|
000018  eb040581          ADD      r5,r4,r1,LSL #2       ;166
00001c  68eb              LDR      r3,[r5,#0xc]          ;166
00001e  42b3              CMP      r3,r6                 ;166
000020  dd00              BLE      |L5.36|
000022  2001              MOVS     r0,#1                 ;167
                  |L5.36|
000024  42bb              CMP      r3,r7                 ;168
000026  dc00              BGT      |L5.42|
000028  2002              MOVS     r0,#2                 ;169
                  |L5.42|
00002a  69ad              LDR      r5,[r5,#0x18]         ;170
00002c  4295              CMP      r5,r2                 ;170
00002e  db00              BLT      |L5.50|
000030  2003              MOVS     r0,#3                 ;171
                  |L5.50|
000032  4563              CMP      r3,r12                ;173
000034  dd07              BLE      |L5.70|
000036  f8540021          LDR      r0,[r4,r1,LSL #2]     ;175
00003a  4b16              LDR      r3,|L5.148|
00003c  4298              CMP      r0,r3                 ;175
00003e  db01              BLT      |L5.68|
000040  2008              MOVS     r0,#8                 ;176
000042  e000              B        |L5.70|
                  |L5.68|
000044  2009              MOVS     r0,#9                 ;178
                  |L5.70|
000046  4575              CMP      r5,lr
000048  dc00              BGT      |L5.76|
;;;182    	   flag=0x0A;
00004a  200a              MOVS     r0,#0xa
                  |L5.76|
00004c  1c49              ADDS     r1,r1,#1              ;164
00004e  b2c9              UXTB     r1,r1                 ;164
000050  2903              CMP      r1,#3                 ;164
000052  d3e1              BCC      |L5.24|
;;;183      }
;;;184    
;;;185       if(tempRegisters[RELEVEL]>=RHA2)
000054  68a1              LDR      r1,[r4,#8]  ; tempRegisters
000056  4561              CMP      r1,r12
000058  db00              BLT      |L5.92|
;;;186        	flag=4;
00005a  2004              MOVS     r0,#4
                  |L5.92|
;;;187       if(tempRegisters[WSTLEVEL]>=WHA2)
00005c  6821              LDR      r1,[r4,#0]  ; tempRegisters
00005e  4291              CMP      r1,r2
000060  db00              BLT      |L5.100|
;;;188        	flag=5;  
000062  2005              MOVS     r0,#5
                  |L5.100|
;;;189       if(tempRegisters[SSTLEVEL]>=SHA2)
000064  6861              LDR      r1,[r4,#4]  ; tempRegisters
000066  4291              CMP      r1,r2
000068  db00              BLT      |L5.108|
;;;190        	flag=6;
00006a  2006              MOVS     r0,#6
                  |L5.108|
;;;191       if(tempRegisters[SSTLEVEL]>=SLA)
00006c  4571              CMP      r1,lr
00006e  db00              BLT      |L5.114|
;;;192        	flag=7;  
000070  2007              MOVS     r0,#7
                  |L5.114|
;;;193    			
;;;194       	tempRegisters[CASEEMERGENCY]=flag; 
000072  f7fffffe          BL       __aeabi_ui2f
000076  63a0              STR      r0,[r4,#0x38]  ; tempRegisters
;;;195    }
000078  e8bd81f0          POP      {r4-r8,pc}
;;;196    
                          ENDP

                  |L5.124|
                          DCD      0x42400000
                  |L5.128|
                          DCD      0x41900000
                  |L5.132|
                          DCD      0x42340000
                  |L5.136|
                          DCD      0x41200000
                  |L5.140|
                          DCD      0x42dc0000
                  |L5.144|
                          DCD      tempRegisters
                  |L5.148|
                          DCD      0x42c80000

                          AREA ||i.lowbufCheck||, CODE, READONLY, ALIGN=2

                  lowbufCheck PROC
;;;218    
;;;219    void  lowbufCheck(void)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;220    {
;;;221     u8 i=0,j=0,temppos=0;
000004  2000              MOVS     r0,#0
;;;222     float temp=0;
;;;223     u8 pos[16]={0};
;;;224    
;;;225      if(DENUM==1)
;;;226    	selectedBuffer=0x66;
;;;227      else
;;;228      {
;;;229       for(i=0;i<DENUM;i++)
;;;230       {
;;;231    	 bufRegisters[i] = tempRegisters[BUFLEVEL1+i];
000006  491e              LDR      r1,|L6.128|
000008  4e1e              LDR      r6,|L6.132|
00000a  9000              STR      r0,[sp,#0]            ;223
00000c  9001              STR      r0,[sp,#4]            ;223
00000e  9002              STR      r0,[sp,#8]            ;223
000010  466f              MOV      r7,sp                 ;223
000012  9003              STR      r0,[sp,#0xc]
                  |L6.20|
000014  eb010280          ADD      r2,r1,r0,LSL #2
000018  6992              LDR      r2,[r2,#0x18]
00001a  f8462020          STR      r2,[r6,r0,LSL #2]
;;;232    	 pos[i]			 = i;
00001e  5438              STRB     r0,[r7,r0]
000020  1c40              ADDS     r0,r0,#1              ;229
000022  b2c0              UXTB     r0,r0                 ;229
000024  2803              CMP      r0,#3                 ;229
000026  d3f5              BCC      |L6.20|
;;;233       }
;;;234    	    
;;;235       for(i=0;i<DENUM;i++)
000028  f05f0400          MOVS.W   r4,#0
                  |L6.44|
;;;236       {
;;;237    	 for(j=i+1;j<DENUM;j++)
00002c  f1040801          ADD      r8,r4,#1
000030  f00805ff          AND      r5,r8,#0xff
000034  e013              B        |L6.94|
;;;238         {
;;;239          if(bufRegisters[j]<bufRegisters[i])
000036  bf00              NOP      
                  |L6.56|
000038  f8561024          LDR      r1,[r6,r4,LSL #2]
00003c  f8560025          LDR      r0,[r6,r5,LSL #2]
000040  f7fffffe          BL       __aeabi_cfcmple
000044  d209              BCS      |L6.90|
;;;240    	   {    
;;;241    	       temp=bufRegisters[i];
000046  f8561024          LDR      r1,[r6,r4,LSL #2]
;;;242    		   temppos= i;
;;;243    		   pos[i] = j;
00004a  553d              STRB     r5,[r7,r4]
;;;244    		   pos[j] =temppos;
00004c  557c              STRB     r4,[r7,r5]
;;;245    	       bufRegisters[i]= bufRegisters[j];
00004e  f8560025          LDR      r0,[r6,r5,LSL #2]
000052  f8460024          STR      r0,[r6,r4,LSL #2]
;;;246    		   bufRegisters[j]=temp;
000056  f8461025          STR      r1,[r6,r5,LSL #2]
                  |L6.90|
00005a  1c6d              ADDS     r5,r5,#1              ;237
00005c  b2ed              UXTB     r5,r5                 ;237
                  |L6.94|
00005e  2d03              CMP      r5,#3                 ;237
000060  d3ea              BCC      |L6.56|
000062  f00804ff          AND      r4,r8,#0xff           ;235
000066  2c03              CMP      r4,#3                 ;235
000068  d3e0              BCC      |L6.44|
;;;247           } 
;;;248         }
;;;249        }
;;;250    
;;;251       }
;;;252       selectedBuffer=boardRegisters[pos[0]];
00006a  f89d0000          LDRB     r0,[sp,#0]
00006e  4906              LDR      r1,|L6.136|
000070  f8510020          LDR      r0,[r1,r0,LSL #2]
000074  f7fffffe          BL       __aeabi_f2uiz
000078  4904              LDR      r1,|L6.140|
00007a  7008              STRB     r0,[r1,#0]
;;;253    }
00007c  e8bd81ff          POP      {r0-r8,pc}
                          ENDP

                  |L6.128|
                          DCD      tempRegisters
                  |L6.132|
                          DCD      bufRegisters
                  |L6.136|
                          DCD      boardRegisters
                  |L6.140|
                          DCD      ||.data||

                          AREA ||i.readPorts||, CODE, READONLY, ALIGN=2

                  readPorts PROC
;;;24     *********************************************************************************************************/
;;;25     void readPorts(void )
000000  b510              PUSH     {r4,lr}
;;;26     {
;;;27        u8 i=0;
000002  2400              MOVS     r4,#0
;;;28     
;;;29        GetDiMap(DI_data);
000004  4805              LDR      r0,|L7.28|
000006  f7fffffe          BL       GetDiMap
00000a  4804              LDR      r0,|L7.28|
;;;30        
;;;31     	for(i=0;i<4;i++)
;;;32     	 {
;;;33     	 	 DI_data[i]=1;
00000c  2101              MOVS     r1,#1
                  |L7.14|
00000e  5501              STRB     r1,[r0,r4]
000010  1c64              ADDS     r4,r4,#1              ;31
000012  b2e4              UXTB     r4,r4                 ;31
000014  2c04              CMP      r4,#4                 ;31
000016  d3fa              BCC      |L7.14|
;;;34     
;;;35     	 }
;;;36     
;;;37     }
000018  bd10              POP      {r4,pc}
;;;38     
                          ENDP

00001a  0000              DCW      0x0000
                  |L7.28|
                          DCD      DI_data

                          AREA ||i.statusCheck||, CODE, READONLY, ALIGN=1

                  statusCheck PROC
;;;110    
;;;111    void statusCheck(void)
000000  b510              PUSH     {r4,lr}
;;;112    {
;;;113    //  u8 type=0;
;;;114    //  type = statusVerify();
;;;115    //
;;;116    //  if(type)
;;;117         emergencyCheck();
000002  f7fffffe          BL       emergencyCheck
;;;118    //  else
;;;119    	 transferCheck();
000006  e8bd4010          POP      {r4,lr}
00000a  f7ffbffe          B.W      transferCheck
;;;120    
;;;121    } 
;;;122    
                          ENDP


                          AREA ||i.statusVerify||, CODE, READONLY, ALIGN=2

                  statusVerify PROC
;;;122    
;;;123    u8 statusVerify(void)
000000  4907              LDR      r1,|L9.32|
;;;124    {
;;;125      u8 flag=0;
;;;126      u8 i=0;
000002  2000              MOVS     r0,#0
                  |L9.4|
;;;127    
;;;128       for(i=0;i<DENUM;i++)
000004  1c40              ADDS     r0,r0,#1
000006  b2c0              UXTB     r0,r0
000008  2803              CMP      r0,#3
00000a  d3fb              BCC      |L9.4|
;;;129      {
;;;130    	if((tempRegisters[DELEVEL1+i]>DHA1)&&(tempRegisters[DELEVEL1+i]<DHA2))
;;;131    	   flag=0;
;;;132         else
;;;133           flag=1;
;;;134    
;;;135        if((tempRegisters[BUFLEVEL1+i]>BMA1)&&(tempRegisters[BUFLEVEL1+i]<BMA2))
;;;136    	   flag=0;
;;;137         else
;;;138           flag=1;
;;;139      
;;;140      }
;;;141    
;;;142       if((tempRegisters[RELEVEL]>RLA)&&(tempRegisters[RELEVEL]<RHA1))
;;;143        flag=0;
;;;144       else
;;;145        flag=1;
;;;146    
;;;147       if((tempRegisters[WSTLEVEL]>WLA)&&(tempRegisters[WSTLEVEL]<WHA1))
00000c  4805              LDR      r0,|L9.36|
;;;148        flag=0;
;;;149       else
;;;150        flag=1;
;;;151    
;;;152       if((tempRegisters[SSTLEVEL]>SLA)&&(tempRegisters[SSTLEVEL]<SHA1))
00000e  6849              LDR      r1,[r1,#4]  ; tempRegisters
000010  4a05              LDR      r2,|L9.40|
000012  4408              ADD      r0,r0,r1
000014  4290              CMP      r0,r2
000016  d201              BCS      |L9.28|
;;;153        flag=0;
000018  2000              MOVS     r0,#0
;;;154       else
;;;155        flag=1;
;;;156    
;;;157    	return flag;
;;;158    }
00001a  4770              BX       lr
                  |L9.28|
00001c  2001              MOVS     r0,#1                 ;155
00001e  4770              BX       lr
;;;159    
                          ENDP

                  |L9.32|
                          DCD      tempRegisters
                  |L9.36|
                          DCD      0xbedfffff
                  |L9.40|
                          DCD      0x01a7ffff

                          AREA ||i.transferCheck||, CODE, READONLY, ALIGN=2

                  transferCheck PROC
;;;197    
;;;198    void transferCheck(void)
000000  b570              PUSH     {r4-r6,lr}
;;;199    {
;;;200       u8 i=0,flag=0;
000002  2100              MOVS     r1,#0
;;;201    
;;;202      for(i=0;i<DENUM;i++)
;;;203      {
;;;204    	if(tempRegisters[DELEVEL1+i]>DHA1)
000004  4b0f              LDR      r3,|L10.68|
;;;205    	   flag=4;
;;;206        if(tempRegisters[BUFLEVEL1+i]<=BMA1)
000006  4d10              LDR      r5,|L10.72|
000008  4c10              LDR      r4,|L10.76|
00000a  4608              MOV      r0,r1                 ;200
                  |L10.12|
00000c  eb040281          ADD      r2,r4,r1,LSL #2       ;204
000010  68d6              LDR      r6,[r2,#0xc]          ;204
000012  429e              CMP      r6,r3                 ;204
000014  dd00              BLE      |L10.24|
000016  2004              MOVS     r0,#4                 ;205
                  |L10.24|
000018  6992              LDR      r2,[r2,#0x18]
00001a  42aa              CMP      r2,r5
00001c  dc00              BGT      |L10.32|
;;;207    	   flag=3;
00001e  2003              MOVS     r0,#3
                  |L10.32|
000020  1c49              ADDS     r1,r1,#1              ;202
000022  b2c9              UXTB     r1,r1                 ;202
000024  2903              CMP      r1,#3                 ;202
000026  d3f1              BCC      |L10.12|
;;;208      }
;;;209    
;;;210       if(tempRegisters[SSTLEVEL]>=WHA1)
000028  4909              LDR      r1,|L10.80|
00002a  6862              LDR      r2,[r4,#4]  ; tempRegisters
00002c  428a              CMP      r2,r1
00002e  db00              BLT      |L10.50|
;;;211        flag=2;
000030  2002              MOVS     r0,#2
                  |L10.50|
;;;212       if(tempRegisters[RELEVEL]>=SHA1)
000032  68a2              LDR      r2,[r4,#8]  ; tempRegisters
000034  428a              CMP      r2,r1
000036  db00              BLT      |L10.58|
;;;213        flag=1;
000038  2001              MOVS     r0,#1
                  |L10.58|
;;;214    
;;;215        tempRegisters[CASETRANSFER] =  flag;
00003a  f7fffffe          BL       __aeabi_ui2f
00003e  6360              STR      r0,[r4,#0x34]  ; tempRegisters
;;;216    }
000040  bd70              POP      {r4-r6,pc}
;;;217    
                          ENDP

000042  0000              DCW      0x0000
                  |L10.68|
                          DCD      0x42200000
                  |L10.72|
                          DCD      0x41f00000
                  |L10.76|
                          DCD      tempRegisters
                  |L10.80|
                          DCD      0x42c80000

                          AREA ||.data||, DATA, ALIGN=0

                  selectedBuffer
000000  00                DCB      0x00
