; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -osystem_stm32f10x.o --asm_dir=.\ --list_dir=.\ --depend=system_stm32f10x.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\ -I..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210E_EVAL -I..\RTD -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL --omf_browse=system_stm32f10x.crf ..\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\system_stm32f10x.c]
                          THUMB

                          AREA ||i.SetSysClockTo72||, CODE, READONLY, ALIGN=2

                  SetSysClockTo72 PROC
;;;911      */
;;;912    static void SetSysClockTo72(void)
000000  4822              LDR      r0,|L1.140|
;;;913    {
;;;914      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2100              MOVS     r1,#0
;;;915      
;;;916      /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
;;;917      /* Enable HSE */    
;;;918      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000004  6802              LDR      r2,[r0,#0]
000006  f4423280          ORR      r2,r2,#0x10000
00000a  6002              STR      r2,[r0,#0]
;;;919     
;;;920      /* Wait till HSE is ready and if Time out is reached exit */
;;;921      do
;;;922      {
;;;923        HSEStatus = RCC->CR & RCC_CR_HSERDY;
;;;924        StartUpCounter++;  
;;;925      } while((HSEStatus == 0) && (StartUpCounter != HSEStartUp_TimeOut));
00000c  f44f63a0          MOV      r3,#0x500
                  |L1.16|
000010  6802              LDR      r2,[r0,#0]            ;923
000012  f1010101          ADD      r1,r1,#1              ;924
000016  f4123f00          TST      r2,#0x20000           ;923
00001a  d101              BNE      |L1.32|
00001c  4299              CMP      r1,r3
00001e  d1f7              BNE      |L1.16|
                  |L1.32|
;;;926    
;;;927      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
000020  6801              LDR      r1,[r0,#0]
000022  0389              LSLS     r1,r1,#14
000024  d530              BPL      |L1.136|
;;;928      {
;;;929        HSEStatus = (uint32_t)0x01;
;;;930      }
;;;931      else
;;;932      {
;;;933        HSEStatus = (uint32_t)0x00;
;;;934      }  
;;;935    
;;;936      if (HSEStatus == (uint32_t)0x01)
;;;937      {
;;;938        /* Enable Prefetch Buffer */
;;;939        FLASH->ACR |= FLASH_ACR_PRFTBE;
000026  491a              LDR      r1,|L1.144|
000028  680a              LDR      r2,[r1,#0]
00002a  f0420210          ORR      r2,r2,#0x10
00002e  600a              STR      r2,[r1,#0]
;;;940    
;;;941        /* Flash 2 wait state */
;;;942        FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
000030  680a              LDR      r2,[r1,#0]
000032  f0220203          BIC      r2,r2,#3
000036  600a              STR      r2,[r1,#0]
;;;943        FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
000038  680a              LDR      r2,[r1,#0]
00003a  f0420202          ORR      r2,r2,#2
00003e  600a              STR      r2,[r1,#0]
;;;944    
;;;945     
;;;946        /* HCLK = SYSCLK */
;;;947        RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
000040  6841              LDR      r1,[r0,#4]
000042  6041              STR      r1,[r0,#4]
;;;948          
;;;949        /* PCLK2 = HCLK */
;;;950        RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
000044  6841              LDR      r1,[r0,#4]
000046  6041              STR      r1,[r0,#4]
;;;951        
;;;952        /* PCLK1 = HCLK */
;;;953        RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
000048  6841              LDR      r1,[r0,#4]
00004a  f4416180          ORR      r1,r1,#0x400
00004e  6041              STR      r1,[r0,#4]
;;;954    
;;;955    #ifdef STM32F10X_CL
;;;956        /* Configure PLLs ------------------------------------------------------*/
;;;957        /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
;;;958        /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
;;;959            
;;;960        RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
;;;961                                  RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
;;;962        RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
;;;963                                 RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
;;;964      
;;;965        /* Enable PLL2 */
;;;966        RCC->CR |= RCC_CR_PLL2ON;
;;;967        /* Wait till PLL2 is ready */
;;;968        while((RCC->CR & RCC_CR_PLL2RDY) == 0)
;;;969        {
;;;970        }
;;;971        
;;;972       
;;;973        /* PLL configuration: PLLCLK = PREDIV1 * 9 = 72 MHz */ 
;;;974        RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
;;;975        RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
;;;976                                RCC_CFGR_PLLMULL9); 
;;;977    #else    
;;;978        /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
;;;979        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
000050  6841              LDR      r1,[r0,#4]
000052  f421117c          BIC      r1,r1,#0x3f0000
000056  6041              STR      r1,[r0,#4]
;;;980                                            RCC_CFGR_PLLMULL));
;;;981        RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
000058  6841              LDR      r1,[r0,#4]
00005a  f44111e8          ORR      r1,r1,#0x1d0000
00005e  6041              STR      r1,[r0,#4]
;;;982    #endif /* STM32F10X_CL */
;;;983    
;;;984        /* Enable PLL */
;;;985        RCC->CR |= RCC_CR_PLLON;
000060  6801              LDR      r1,[r0,#0]
000062  f0417180          ORR      r1,r1,#0x1000000
000066  6001              STR      r1,[r0,#0]
                  |L1.104|
;;;986    
;;;987        /* Wait till PLL is ready */
;;;988        while((RCC->CR & RCC_CR_PLLRDY) == 0)
000068  6801              LDR      r1,[r0,#0]
00006a  0189              LSLS     r1,r1,#6
00006c  d5fc              BPL      |L1.104|
;;;989        {
;;;990        }
;;;991        
;;;992        /* Select PLL as system clock source */
;;;993        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
00006e  6841              LDR      r1,[r0,#4]
000070  f0210103          BIC      r1,r1,#3
000074  6041              STR      r1,[r0,#4]
;;;994        RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
000076  6841              LDR      r1,[r0,#4]
000078  f0410102          ORR      r1,r1,#2
00007c  6041              STR      r1,[r0,#4]
                  |L1.126|
;;;995    
;;;996        /* Wait till PLL is used as system clock source */
;;;997        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
00007e  6841              LDR      r1,[r0,#4]
000080  f3c10181          UBFX     r1,r1,#2,#2
000084  2902              CMP      r1,#2
000086  d1fa              BNE      |L1.126|
                  |L1.136|
;;;998        {
;;;999        }
;;;1000     }
;;;1001     else
;;;1002     { /* If HSE fails to start-up, the application will have wrong clock 
;;;1003            configuration. User can add here some code to deal with this error */
;;;1004     }
;;;1005   }
000088  4770              BX       lr
;;;1006   #endif
                          ENDP

00008a  0000              DCW      0x0000
                  |L1.140|
                          DCD      0x40021000
                  |L1.144|
                          DCD      0x40022000

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;230      */
;;;231    void SystemCoreClockUpdate (void)
000000  4a15              LDR      r2,|L2.88|
;;;232    {
000002  b510              PUSH     {r4,lr}
;;;233      uint32_t tmp = 0, pllmull = 0, pllsource = 0;
;;;234    
;;;235    #ifdef  STM32F10X_CL
;;;236      uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
;;;237    #endif /* STM32F10X_CL */
;;;238    
;;;239    #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL)
;;;240      uint32_t prediv1factor = 0;
;;;241    #endif /* STM32F10X_LD_VL or STM32F10X_MD_VL */
;;;242        
;;;243      /* Get SYSCLK source -------------------------------------------------------*/
;;;244      tmp = RCC->CFGR & RCC_CFGR_SWS;
000004  6850              LDR      r0,[r2,#4]
;;;245      
;;;246      switch (tmp)
;;;247      {
;;;248        case 0x00:  /* HSI used as system clock */
;;;249          SystemCoreClock = HSI_Value;
000006  4915              LDR      r1,|L2.92|
000008  f010030c          ANDS     r3,r0,#0xc            ;244
00000c  4814              LDR      r0,|L2.96|
00000e  d003              BEQ      |L2.24|
000010  2b04              CMP      r3,#4                 ;246
000012  d001              BEQ      |L2.24|
000014  2b08              CMP      r3,#8                 ;246
000016  d00b              BEQ      |L2.48|
                  |L2.24|
;;;250          break;
;;;251        case 0x04:  /* HSE used as system clock */
;;;252          SystemCoreClock = HSE_Value;
;;;253          break;
;;;254        case 0x08:  /* PLL used as system clock */
;;;255    
;;;256          /* Get PLL clock source and multiplication factor ----------------------*/
;;;257          pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
;;;258          pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
;;;259          
;;;260    #ifndef STM32F10X_CL      
;;;261          pllmull = ( pllmull >> 18) + 2;
;;;262          
;;;263          if (pllsource == 0x00)
;;;264          {
;;;265            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;266            SystemCoreClock = (HSI_Value >> 1) * pllmull;
;;;267          }
;;;268          else
;;;269          {
;;;270     #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL)
;;;271           prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
;;;272           /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;273           SystemCoreClock = (HSE_Value / prediv1factor) * pllmull; 
;;;274     #else
;;;275            /* HSE selected as PLL clock entry */
;;;276            if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
;;;277            {/* HSE oscillator clock divided by 2 */
;;;278              SystemCoreClock = (HSE_Value >> 1) * pllmull;
;;;279            }
;;;280            else
;;;281            {
;;;282              SystemCoreClock = HSE_Value * pllmull;
;;;283            }
;;;284     #endif
;;;285          }
;;;286    #else
;;;287          pllmull = pllmull >> 18;
;;;288          
;;;289          if (pllmull != 0x0D)
;;;290          {
;;;291             pllmull += 2;
;;;292          }
;;;293          else
;;;294          { /* PLL multiplication factor = PLL input clock * 6.5 */
;;;295            pllmull = 13 / 2; 
;;;296          }
;;;297                
;;;298          if (pllsource == 0x00)
;;;299          {
;;;300            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;301            SystemCoreClock = (HSI_Value >> 1) * pllmull;
;;;302          }
;;;303          else
;;;304          {/* PREDIV1 selected as PLL clock entry */
;;;305            
;;;306            /* Get PREDIV1 clock source and division factor */
;;;307            prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
;;;308            prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
;;;309            
;;;310            if (prediv1source == 0)
;;;311            { 
;;;312              /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;313              SystemCoreClock = (HSE_Value / prediv1factor) * pllmull;          
;;;314            }
;;;315            else
;;;316            {/* PLL2 clock selected as PREDIV1 clock entry */
;;;317              
;;;318              /* Get PREDIV2 division factor and PLL2 multiplication factor */
;;;319              prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4) + 1;
;;;320              pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
;;;321              SystemCoreClock = (((HSE_Value / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
;;;322            }
;;;323          }
;;;324    #endif /* STM32F10X_CL */ 
;;;325          break;
;;;326    
;;;327        default:
;;;328          SystemCoreClock = HSI_Value;
;;;329          break;
;;;330      }
;;;331      
;;;332      /* Compute HCLK clock frequency ----------------*/
;;;333      /* Get HCLK prescaler */
;;;334      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
000018  6001              STR      r1,[r0,#0]  ; SystemCoreClock
00001a  6851              LDR      r1,[r2,#4]
00001c  4a10              LDR      r2,|L2.96|
00001e  f3c11103          UBFX     r1,r1,#4,#4
000022  1d12              ADDS     r2,r2,#4
000024  5c51              LDRB     r1,[r2,r1]
;;;335      /* HCLK clock frequency */
;;;336      SystemCoreClock >>= tmp;  
000026  6802              LDR      r2,[r0,#0]  ; SystemCoreClock
000028  fa22f201          LSR      r2,r2,r1
00002c  6002              STR      r2,[r0,#0]  ; SystemCoreClock
;;;337    }
00002e  bd10              POP      {r4,pc}
                  |L2.48|
000030  6851              LDR      r1,[r2,#4]            ;257
000032  6853              LDR      r3,[r2,#4]            ;258
000034  f4011170          AND      r1,r1,#0x3c0000       ;257
000038  f04f0402          MOV      r4,#2                 ;261
00003c  f4133f80          TST      r3,#0x10000           ;258
000040  eb044191          ADD      r1,r4,r1,LSR #18      ;261
000044  d002              BEQ      |L2.76|
000046  6853              LDR      r3,[r2,#4]            ;276
000048  039b              LSLS     r3,r3,#14             ;276
00004a  d501              BPL      |L2.80|
                  |L2.76|
00004c  4b05              LDR      r3,|L2.100|
00004e  e000              B        |L2.82|
                  |L2.80|
000050  4b02              LDR      r3,|L2.92|
                  |L2.82|
000052  4359              MULS     r1,r3,r1              ;278
000054  e7e0              B        |L2.24|
;;;338    
                          ENDP

000056  0000              DCW      0x0000
                  |L2.88|
                          DCD      0x40021000
                  |L2.92|
                          DCD      0x007a1200
                  |L2.96|
                          DCD      ||.data||
                  |L2.100|
                          DCD      0x003d0900

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;171      */
;;;172    void SystemInit (void)
000000  480c              LDR      r0,|L3.52|
;;;173    {
;;;174      /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
;;;175      /* Set HSION bit */
;;;176      RCC->CR |= (uint32_t)0x00000001;
000002  6801              LDR      r1,[r0,#0]
000004  f0410101          ORR      r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;177    
;;;178      /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
;;;179    #ifndef STM32F10X_CL
;;;180      RCC->CFGR &= (uint32_t)0xF8FF0000;
00000a  6841              LDR      r1,[r0,#4]
00000c  4a0a              LDR      r2,|L3.56|
00000e  4011              ANDS     r1,r1,r2
000010  6041              STR      r1,[r0,#4]
;;;181    #else
;;;182      RCC->CFGR &= (uint32_t)0xF0FF0000;
;;;183    #endif /* STM32F10X_CL */   
;;;184      
;;;185      /* Reset HSEON, CSSON and PLLON bits */
;;;186      RCC->CR &= (uint32_t)0xFEF6FFFF;
000012  6801              LDR      r1,[r0,#0]
000014  4a09              LDR      r2,|L3.60|
000016  4011              ANDS     r1,r1,r2
000018  6001              STR      r1,[r0,#0]
;;;187    
;;;188      /* Reset HSEBYP bit */
;;;189      RCC->CR &= (uint32_t)0xFFFBFFFF;
00001a  6801              LDR      r1,[r0,#0]
00001c  f4212180          BIC      r1,r1,#0x40000
000020  6001              STR      r1,[r0,#0]
;;;190    
;;;191      /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
;;;192      RCC->CFGR &= (uint32_t)0xFF80FFFF;
000022  6841              LDR      r1,[r0,#4]
000024  f42101fe          BIC      r1,r1,#0x7f0000
000028  6041              STR      r1,[r0,#4]
;;;193    
;;;194    #ifdef STM32F10X_CL
;;;195      /* Reset PLL2ON and PLL3ON bits */
;;;196      RCC->CR &= (uint32_t)0xEBFFFFFF;
;;;197    
;;;198      /* Disable all interrupts and clear pending bits  */
;;;199      RCC->CIR = 0x00FF0000;
;;;200    
;;;201      /* Reset CFGR2 register */
;;;202      RCC->CFGR2 = 0x00000000;
;;;203    #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) 
;;;204      /* Disable all interrupts and clear pending bits  */
;;;205      RCC->CIR = 0x009F0000;
;;;206    
;;;207      /* Reset CFGR2 register */
;;;208      RCC->CFGR2 = 0x00000000;      
;;;209    #else
;;;210      /* Disable all interrupts and clear pending bits  */
;;;211      RCC->CIR = 0x009F0000;
00002a  f44f011f          MOV      r1,#0x9f0000
00002e  6081              STR      r1,[r0,#8]
000030  f7ffbffe          B.W      SetSysClockTo72
;;;212    #endif /* STM32F10X_CL */
;;;213        
;;;214    #if defined (STM32F10X_HD) || (defined STM32F10X_XL)
;;;215      #ifdef DATA_IN_ExtSRAM
;;;216        SystemInit_ExtMemCtl(); 
;;;217      #endif /* DATA_IN_ExtSRAM */
;;;218    #endif 
;;;219    
;;;220      /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
;;;221      /* Configure the Flash Latency cycles and enable prefetch buffer */
;;;222      SetSysClock();
;;;223    }
;;;224    
                          ENDP

                  |L3.52|
                          DCD      0x40021000
                  |L3.56|
                          DCD      0xf8ff0000
                  |L3.60|
                          DCD      0xfef6ffff

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x044aa200
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09
