L 1 "..\RTD\RTD_Math_1.c"
N/*************************************************************************************************************************************************/
N/*!     RTD_Math.c
N*
N*       This code is designed to perform fixed point math calculations needed to convert the conversion value returned from the ADS1220 (or other
N*       24 bit ADC) into an accurate temperature reading.
N*
N*       The software is specifically written to execute on an MSP430G2413 on the SATxxxx board.
N*
N*       October 2013
N*
N*       \note that the functions in this file are not re-entrant. It is the user's responsibility to assure that these functions
N*       are not called until the previous function has completed.
N*/
N/**************************************************************************************************************************************************
N*       Copyright © 2013 Texas Instruments Incorporated - http://www.ti.com/                                                                      *
N***************************************************************************************************************************************************
N*  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: *
N*                                                                                                                                                 *
N*    Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.                 *
N*                                                                                                                                                 *
N*    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the        *
N*    documentation and/or other materials provided with the distribution.                                                                         *
N*                                                                                                                                                 *
N*    Neither the name of Texas Instruments Incorporated nor the names of its contributors may be used to endorse or promote products derived      *
N*    from this software without specific prior written permission.                                                                                *
N*                                                                                                                                                 *
N*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT          *
N*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT     *
N*  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT         *
N*  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY    *
N*  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE      *
N*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                                                                           *
N**************************************************************************************************************************************************/
N
N#include "RTD_MATH.h"
L 1 "..\RTD\RTD_MATH.h" 1
N#ifndef RTD_MATH_H_
N#define RTD_MATH_H_
N/*************************************************************************************************************************************************/
N/*!     Rtd_Math.h
N*
N*       Header file for Rtd_Math software
N*
N*
N*/
N/**************************************************************************************************************************************************
N*       Copyright © 2014 Texas Instruments Incorporated - http://www.ti.com/                                                                      *
N***************************************************************************************************************************************************
N*  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: *
N*                                                                                                                                                 *
N*    Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.                 *
N*                                                                                                                                                 *
N*    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the        *
N*    documentation and/or other materials provided with the distribution.                                                                         *
N*                                                                                                                                                 *
N*    Neither the name of Texas Instruments Incorporated nor the names of its contributors may be used to endorse or promote products derived      *
N*    from this software without specific prior written permission.                                                                                *
N*                                                                                                                                                 *
N*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT          *
N*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT     *
N*  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT         *
N*  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY    *
N*  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE      *
N*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                                                                           *
N**************************************************************************************************************************************************/
N
N
N#define MIN_TEMP_MEAS   -200
N#define MAX_TEMP_MEAS    851
N
N#define NUM_MEAS_POINTS  (MAX_TEMP_MEAS - MIN_TEMP_MEAS + 1)
N
Nenum SENSOR_TYPE
N{
N    PT100,
N    PT1000,
N};
N
N/*************************************************************************************************************/
N/*                              PROTOTYPES                                                                   */
N/*************************************************************************************************************/
N
N#ifdef __CPLUSPLUS
Sextern "C" {
N#endif
N
Nfloat interpolateTemperatureValue (long code, float PgaGainLevel, enum SENSOR_TYPE rtd_type);
Nshort findInterpolationIndex (float r_value);
Nfloat calculateRValue (long code, float PgaGainLevel, enum SENSOR_TYPE rtd_type);
N
N#ifdef __CPLUSPLUS
S}
N#endif
N
N
N#endif /* RTD_MATH_H_ */
L 36 "..\RTD\RTD_Math_1.c" 2
N
Nextern const float Rref_Pt100;                          // reference resistor value on the board is 3.24k Ohm
Nextern const float Rref_Pt1000;
N
N// This particular table has measurements at every degree C from -200 to 851 inclusive (1052 points).
N// It is used to perform a linear interpolation between two points that surround the measurement. In this case, those points are 1 degree apart.
N//
N// Other tables can be used with more or less points, at the impact of changing the accuracy of the measurement. These is no requirement for the measurements to be evenly
N// spaced. The table can have fewer points at areas that are nearly linear, and more points at areas that are less linear with no change required to the algorithm.
N//
N//
Nconst float Points[] =
N{
N  18.520, 18.952, 19.384, 19.815, 20.247, 20.677, 21.108, 21.538, 21.967, 22.397,
N  22.825, 23.254, 23.682, 24.110, 24.538, 24.965, 25.392, 25.819, 26.245, 26.671,
N  27.096, 27.522, 27.947, 28.371, 28.796, 29.220, 29.643, 30.067, 30.490, 30.913,
N  31.335, 31.757, 32.179, 32.601, 33.022, 33.443, 33.864, 34.284, 34.704, 35.124,
N  35.543, 35.963, 36.382, 36.800, 37.219, 37.637, 38.055, 38.472, 38.889, 39.306,
N  39.723, 40.140, 40.556, 40.972, 41.388, 41.803, 42.218, 42.633, 43.048, 43.462,
N  43.876, 44.290, 44.704, 45.117, 45.531, 45.944, 46.356, 46.769, 47.181, 47.593,
N  48.005, 48.416, 48.828, 49.239, 49.649, 50.060, 50.470, 50.881, 51.291, 51.700,
N  52.110, 52.519, 52.928, 53.337, 53.746, 54.154, 54.562, 54.970, 55.378, 55.786,
N  56.193, 56.600, 57.007, 57.414, 57.821, 58.227, 58.633, 59.039, 59.445, 59.850,
N  60.256, 60.661, 61.066, 61.471, 61.876, 62.280, 62.684, 63.088, 63.492, 63.896,
N  64.300, 64.703, 65.106, 65.509, 65.912, 66.315, 66.717, 67.120, 67.522, 67.924,
N  68.325, 68.727, 69.129, 69.530, 69.931, 70.332, 70.733, 71.134, 71.534, 71.934,
N  72.335, 72.735, 73.134, 73.534, 73.934, 74.333, 74.732, 75.131, 75.530, 75.929,
N  76.328, 76.726, 77.125, 77.523, 77.921, 78.319, 78.717, 79.114, 79.512, 79.909,
N  80.306, 80.703, 81.100, 81.497, 81.894, 82.290, 82.687, 83.083, 83.479, 83.875,
N  84.271, 84.666, 85.062, 85.457, 85.853, 86.248, 86.643, 87.038, 87.432, 87.827,
N  88.222, 88.616, 89.010, 89.404, 89.798, 90.192, 90.586, 90.980, 91.373, 91.767,
N  92.160, 92.553, 92.946, 93.339, 93.732, 94.124, 94.517, 94.909, 95.302, 95.694,
N  96.086, 96.478, 96.870, 97.261, 97.653, 98.044, 98.436, 98.827, 99.218, 99.609,
N  100.000, 100.391, 100.781, 101.172, 101.562, 101.953, 102.343, 102.733, 103.123, 103.513,
N  103.903, 104.292, 104.682, 105.071, 105.460, 105.849, 106.238, 106.627, 107.016, 107.405,
N  107.794, 108.182, 108.570, 108.959, 109.347, 109.735, 110.123, 110.510, 110.898, 111.286,
N  111.673, 112.060, 112.447, 112.835, 113.221, 113.608, 113.995, 114.382, 114.768, 115.155,
N  115.541, 115.927, 116.313, 116.699, 117.085, 117.470, 117.856, 118.241, 118.627, 119.012,
N  119.397, 119.782, 120.167, 120.552, 120.936, 121.321, 121.705, 122.090, 122.474, 122.858,
N  123.242, 123.626, 124.009, 124.393, 124.777, 125.160, 125.543, 125.926, 126.309, 126.692,
N  127.075, 127.458, 127.840, 128.223, 128.605, 128.987, 129.370, 129.752, 130.133, 130.515,
N  130.897, 131.278, 131.660, 132.041, 132.422, 132.803, 133.184, 133.565, 133.946, 134.326,
N  134.707, 135.087, 135.468, 135.848, 136.228, 136.608, 136.987, 137.367, 137.747, 138.126,
N  138.506, 138.885, 139.264, 139.643, 140.022, 140.400, 140.779, 141.158, 141.536, 141.914,
N  142.293, 142.671, 143.049, 143.426, 143.804, 144.182, 144.559, 144.937, 145.314, 145.691,
N  146.068, 146.445, 146.822, 147.198, 147.575, 147.951, 148.328, 148.704, 149.080, 149.456,
N  149.832, 150.208, 150.583, 150.959, 151.334, 151.710, 152.085, 152.460, 152.835, 153.210,
N  153.584, 153.959, 154.333, 154.708, 155.082, 155.456, 155.830, 156.204, 156.578, 156.952,
N  157.325, 157.699, 158.072, 158.445, 158.818, 159.191, 159.564, 159.937, 160.309, 160.682,
N  161.054, 161.427, 161.799, 162.171, 162.543, 162.915, 163.286, 163.658, 164.030, 164.401,
N  164.772, 165.143, 165.514, 165.885, 166.256, 166.627, 166.997, 167.368, 167.738, 168.108,
N  168.478, 168.848, 169.218, 169.588, 169.958, 170.327, 170.696, 171.066, 171.435, 171.804,
N  172.173, 172.542, 172.910, 173.279, 173.648, 174.016, 174.384, 174.752, 175.120, 175.488,
N  175.856, 176.224, 176.591, 176.959, 177.326, 177.693, 178.060, 178.427, 178.794, 179.161,
N  179.528, 179.894, 180.260, 180.627, 180.993, 181.359, 181.725, 182.091, 182.456, 182.822,
N  183.188, 183.553, 183.918, 184.283, 184.648, 185.013, 185.378, 185.743, 186.107, 186.472,
N  186.836, 187.200, 187.564, 187.928, 188.292, 188.656, 189.019, 189.383, 189.746, 190.110,
N  190.473, 190.836, 191.199, 191.562, 191.924, 192.287, 192.649, 193.012, 193.374, 193.736,
N  194.098, 194.460, 194.822, 195.183, 195.545, 195.906, 196.268, 196.629, 196.990, 197.351,
N  197.712, 198.073, 198.433, 198.794, 199.154, 199.514, 199.875, 200.235, 200.595, 200.954,
N  201.314, 201.674, 202.033, 202.393, 202.752, 203.111, 203.470, 203.829, 204.188, 204.546,
N  204.905, 205.263, 205.622, 205.980, 206.338, 206.696, 207.054, 207.411, 207.769, 208.127,
N  208.484, 208.841, 209.198, 209.555, 209.912, 210.269, 210.626, 210.982, 211.339, 211.695,
N  212.052, 212.408, 212.764, 213.120, 213.475, 213.831, 214.187, 214.542, 214.897, 215.252,
N  215.608, 215.962, 216.317, 216.672, 217.027, 217.381, 217.736, 218.090, 218.444, 218.798,
N  219.152, 219.506, 219.860, 220.213, 220.567, 220.920, 221.273, 221.626, 221.979, 222.332,
N  222.685, 223.038, 223.390, 223.743, 224.095, 224.447, 224.799, 225.151, 225.503, 225.855,
N  226.206, 226.558, 226.909, 227.260, 227.612, 227.963, 228.314, 228.664, 229.015, 229.366,
N  229.716, 230.066, 230.417, 230.767, 231.117, 231.467, 231.816, 232.166, 232.516, 232.865,
N  233.214, 233.564, 233.913, 234.262, 234.610, 234.959, 235.308, 235.656, 236.005, 236.353,
N  236.701, 237.049, 237.397, 237.745, 238.093, 238.440, 238.788, 239.135, 239.482, 239.829,
N  240.176, 240.523, 240.870, 241.217, 241.563, 241.910, 242.256, 242.602, 242.948, 243.294,
N  243.640, 243.986, 244.331, 244.677, 245.022, 245.367, 245.713, 246.058, 246.403, 246.747,
N  247.092, 247.437, 247.781, 248.125, 248.470, 248.814, 249.158, 249.502, 249.845, 250.189,
N  250.533, 250.876, 251.219, 251.562, 251.906, 252.248, 252.591, 252.934, 253.277, 253.619,
N  253.962, 254.304, 254.646, 254.988, 255.330, 255.672, 256.013, 256.355, 256.696, 257.038,
N  257.379, 257.720, 258.061, 258.402, 258.743, 259.083, 259.424, 259.764, 260.105, 260.445,
N  260.785, 261.125, 261.465, 261.804, 262.144, 262.483, 262.823, 263.162, 263.501, 263.840,
N  264.179, 264.518, 264.857, 265.195, 265.534, 265.872, 266.210, 266.548, 266.886, 267.224,
N  267.562, 267.900, 268.237, 268.574, 268.912, 269.249, 269.586, 269.923, 270.260, 270.597,
N  270.933, 271.270, 271.606, 271.942, 272.278, 272.614, 272.950, 273.286, 273.622, 273.957,
N  274.293, 274.628, 274.963, 275.298, 275.633, 275.968, 276.303, 276.638, 276.972, 277.307,
N  277.641, 277.975, 278.309, 278.643, 278.977, 279.311, 279.644, 279.978, 280.311, 280.644,
N  280.978, 281.311, 281.643, 281.976, 282.309, 282.641, 282.974, 283.306, 283.638, 283.971,
N  284.303, 284.634, 284.966, 285.298, 285.629, 285.961, 286.292, 286.623, 286.954, 287.285,
N  287.616, 287.947, 288.277, 288.608, 288.938, 289.268, 289.599, 289.929, 290.258, 290.588,
N  290.918, 291.247, 291.577, 291.906, 292.235, 292.565, 292.894, 293.222, 293.551, 293.880,
N  294.208, 294.537, 294.865, 295.193, 295.521, 295.849, 296.177, 296.505, 296.832, 297.160,
N  297.487, 297.814, 298.142, 298.469, 298.795, 299.122, 299.449, 299.775, 300.102, 300.428,
N  300.754, 301.080, 301.406, 301.732, 302.058, 302.384, 302.709, 303.035, 303.360, 303.685,
N  304.010, 304.335, 304.660, 304.985, 305.309, 305.634, 305.958, 306.282, 306.606, 306.930,
N  307.254, 307.578, 307.902, 308.225, 308.549, 308.872, 309.195, 309.518, 309.841, 310.164,
N  310.487, 310.810, 311.132, 311.454, 311.777, 312.099, 312.421, 312.743, 313.065, 313.386,
N  313.708, 314.029, 314.351, 314.672, 314.993, 315.314, 315.635, 315.956, 316.277, 316.597,
N  316.918, 317.238, 317.558, 317.878, 318.198, 318.518, 318.838, 319.157, 319.477, 319.796,
N  320.116, 320.435, 320.754, 321.073, 321.391, 321.710, 322.029, 322.347, 322.666, 322.984,
N  323.302, 323.620, 323.938, 324.256, 324.573, 324.891, 325.208, 325.526, 325.843, 326.160,
N  326.477, 326.794, 327.110, 327.427, 327.744, 328.060, 328.376, 328.692, 329.008, 329.324,
N  329.640, 329.956, 330.271, 330.587, 330.902, 331.217, 331.533, 331.848, 332.162, 332.477,
N  332.792, 333.106, 333.421, 333.735, 334.049, 334.363, 334.677, 334.991, 335.305, 335.619,
N  335.932, 336.246, 336.559, 336.872, 337.185, 337.498, 337.811, 338.123, 338.436, 338.748,
N  339.061, 339.373, 339.685, 339.997, 340.309, 340.621, 340.932, 341.244, 341.555, 341.867,
N  342.178, 342.489, 342.800, 343.111, 343.422, 343.732, 344.043, 344.353, 344.663, 344.973,
N  345.284, 345.593, 345.903, 346.213, 346.522, 346.832, 347.141, 347.451, 347.760, 348.069,
N  348.378, 348.686, 348.995, 349.303, 349.612, 349.920, 350.228, 350.536, 350.844, 351.152,
N  351.460, 351.768, 352.075, 352.382, 352.690, 352.997, 353.304, 353.611, 353.918, 354.224,
N  354.531, 354.837, 355.144, 355.450, 355.756, 356.062, 356.368, 356.674, 356.979, 357.285,
N  357.590, 357.896, 358.201, 358.506, 358.811, 359.116, 359.420, 359.725, 360.029, 360.334,
N  360.638, 360.942, 361.246, 361.550, 361.854, 362.158, 362.461, 362.765, 363.068, 363.371,
N  363.674, 363.977, 364.280, 364.583, 364.886, 365.188, 365.491, 365.793, 366.095, 366.397,
N  366.699, 367.001, 367.303, 367.604, 367.906, 368.207, 368.508, 368.810, 369.111, 369.412,
N  369.712, 370.013, 370.314, 370.614, 370.914, 371.215, 371.515, 371.815, 372.115, 372.414,
N  372.714, 373.013, 373.313, 373.612, 373.911, 374.210, 374.509, 374.808, 375.107, 375.406,
N  375.704, 376.002, 376.301, 376.599, 376.897, 377.195, 377.493, 377.790, 378.088, 378.385,
N  378.683, 378.980, 379.277, 379.574, 379.871, 380.167, 380.464, 380.761, 381.057, 381.353,
N  381.650, 381.946, 382.242, 382.537, 382.833, 383.129, 383.424, 383.720, 384.015, 384.310,
N  384.605, 384.900, 385.195, 385.489, 385.784, 386.078, 386.373, 386.667, 386.961, 387.255,
N  387.549, 387.843, 388.136, 388.430, 388.723, 389.016, 389.310, 389.603, 389.896, 390.188,
N  390.481, 390.774
N};
N
N/*************************************************************************************************************************************************
N*  interpolateTemperatureValue
N**************************************************************************************************************************************************/
N/*!
N* @brief Returns the temperature in millidegrees that corresponds to the RTD code value returned from the ADS1220.
N*
N* The function converts the code value returned from the RTRD reading using the ADS1220 and returns the temperature value in milldegrees C.
N*
N* @param[in]   code                24 bit value provided from the ADS1220 from the RTD conversion
N*
N* @return  temperature             Temperature in millidegrees C.
N*
N**************************************************************************************************************************************************/
Nfloat interpolateTemperatureValue (long code, float PgaGainLevel, enum SENSOR_TYPE rtd_type)
N{
N  static float interimValue;
N  static float targetValue;
N  static float r_value;
N  static unsigned short index;
N  
N  r_value = calculateRValue (code, PgaGainLevel, rtd_type);
N  switch(rtd_type){
N  case PT100: 
N      break;
N  case PT1000: 
N    r_value = r_value/10.0;
N     break;
N  default: index = 0;
N     break;
N  }
N  index = findInterpolationIndex(r_value);
N  // Interim value will be a fraction less than 1
N  interimValue = (r_value - Points[index]) / (Points[index+1] - Points[index]);
N  
N  // The algorithm requires the table to be one value for every degree. Since the table is regular, the
N  //  interimValue will be the decimal portion of the temperature measurement. The Index show how deep
N  //  we are into the table with each step being one degree apart. If we add value in degree C of the
N  //  first measurement in the table we can convert into temperature
N  targetValue = interimValue  + ((long)index + MIN_TEMP_MEAS);        // Convert index out of unsigned variable to allow for negative number
X  targetValue = interimValue  + ((long)index + -200);        
N  
N  return (targetValue);  // Note this is in Degrees C
N}
N
N/*************************************************************************************************************************************************
N*  findInterpolationIndex
N**************************************************************************************************************************************************/
N/*!
N* @brief Searches the Points table to locate the index where the input R value lands in between.
N*
N* The function requires a Points table (above) containing temperatures (in millidegrees), and R values. The R Values must be monotomically increasing.
N* This function will return the index of the lower of the two points surrounding the input R value. These points can then be used to perform
N* linear interpretation to get the approximate temperature.
N*
N* @param[in]   r_value             The r_value from the RTD return
N*
N* @return  index value             The index value pointing to the lower point that is closest to the input r_value.
N*
N* @note  Since the Interpolation table has one entry for degree C, starting at -200 C, you cna subtract 200 from the index to get the associated
N*         temperature in degrees
N**************************************************************************************************************************************************/
Nshort findInterpolationIndex (float r_value)
N{
N  unsigned long i;
N  
N  for (i=0; i< NUM_MEAS_POINTS; i++)
X  for (i=0; i< (851 - -200 + 1); i++)
N  {
N    if (Points[i] > r_value)
N      return (i-1);
N  }
N  
N  return (-1);
N}
N
N
N/*************************************************************************************************************************************************
N*  calculateRValue
N**************************************************************************************************************************************************/
N/*!
N* @brief This function converts the code returned from the conversion of the RTD in the ADS1220 into an R Value.
N*
N* The algorithm to perform the conversion goes as follows :
N*         rtd = (code * Rref * 2.0) / (PgaGainLevel * (2^23 - 1));
N*
N*
N* @param[in]   code                24 bit value provided from the ADS1220 from the RTD conversion
N*
N* @return  r_value                 The r_value from the RTD return
N*
N**************************************************************************************************************************************************/
Nfloat calculateRValue (long code, float PgaGainLevel, enum SENSOR_TYPE rtd_type)
N{
N  float rtd;            // Must be volatile to force the order of operations below
N  
N  switch(rtd_type){
N  case PT100: rtd = (code * Rref_Pt100 * 2.0) / (PgaGainLevel * 8388607.0);
N      break;
N  case PT1000: rtd = (code * Rref_Pt1000 * 2.0) / (PgaGainLevel * 8388607.0);
N     break;
N  default: rtd = -1;
N     break;
N  }
N  
N  return (rtd);
N}
N
N
N
