; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -ostm32f10x_exti.o --asm_dir=.\ --list_dir=.\ --depend=stm32f10x_exti.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\ -I..\..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210E_EVAL -I..\RTD -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL --omf_browse=stm32f10x_exti.crf ..\..\..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_exti.c]
                          THUMB

                          AREA ||i.EXTI_ClearFlag||, CODE, READONLY, ALIGN=2

                  EXTI_ClearFlag PROC
;;;207      */
;;;208    void EXTI_ClearFlag(uint32_t EXTI_Line)
000000  4901              LDR      r1,|L1.8|
;;;209    {
;;;210      /* Check the parameters */
;;;211      assert_param(IS_EXTI_LINE(EXTI_Line));
;;;212      
;;;213      EXTI->PR = EXTI_Line;
000002  6008              STR      r0,[r1,#0]
;;;214    }
000004  4770              BX       lr
;;;215    
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      0x40010414

                          AREA ||i.EXTI_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  EXTI_ClearITPendingBit PROC
;;;247      */
;;;248    void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
000000  4901              LDR      r1,|L2.8|
;;;249    {
;;;250      /* Check the parameters */
;;;251      assert_param(IS_EXTI_LINE(EXTI_Line));
;;;252      
;;;253      EXTI->PR = EXTI_Line;
000002  6008              STR      r0,[r1,#0]
;;;254    }
000004  4770              BX       lr
;;;255    
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      0x40010414

                          AREA ||i.EXTI_DeInit||, CODE, READONLY, ALIGN=2

                  EXTI_DeInit PROC
;;;83       */
;;;84     void EXTI_DeInit(void)
000000  4906              LDR      r1,|L3.28|
;;;85     {
;;;86       EXTI->IMR = 0x00000000;
000002  2000              MOVS     r0,#0
000004  6008              STR      r0,[r1,#0]
;;;87       EXTI->EMR = 0x00000000;
000006  1d09              ADDS     r1,r1,#4
000008  6008              STR      r0,[r1,#0]
;;;88       EXTI->RTSR = 0x00000000; 
00000a  1d09              ADDS     r1,r1,#4
00000c  6008              STR      r0,[r1,#0]
;;;89       EXTI->FTSR = 0x00000000; 
00000e  1d09              ADDS     r1,r1,#4
000010  6008              STR      r0,[r1,#0]
;;;90       EXTI->PR = 0x000FFFFF;
000012  4902              LDR      r1,|L3.28|
000014  4802              LDR      r0,|L3.32|
000016  3114              ADDS     r1,r1,#0x14
000018  6008              STR      r0,[r1,#0]
;;;91     }
00001a  4770              BX       lr
;;;92     
                          ENDP

                  |L3.28|
                          DCD      0x40010400
                  |L3.32|
                          DCD      0x000fffff

                          AREA ||i.EXTI_GenerateSWInterrupt||, CODE, READONLY, ALIGN=2

                  EXTI_GenerateSWInterrupt PROC
;;;169      */
;;;170    void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
000000  4902              LDR      r1,|L4.12|
;;;171    {
;;;172      /* Check the parameters */
;;;173      assert_param(IS_EXTI_LINE(EXTI_Line));
;;;174      
;;;175      EXTI->SWIER |= EXTI_Line;
000002  680a              LDR      r2,[r1,#0]
000004  4302              ORRS     r2,r2,r0
000006  600a              STR      r2,[r1,#0]
;;;176    }
000008  4770              BX       lr
;;;177    
                          ENDP

00000a  0000              DCW      0x0000
                  |L4.12|
                          DCD      0x40010410

                          AREA ||i.EXTI_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  EXTI_GetFlagStatus PROC
;;;184      */
;;;185    FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
000000  4a03              LDR      r2,|L5.16|
;;;186    {
000002  4601              MOV      r1,r0
;;;187      FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;188      /* Check the parameters */
;;;189      assert_param(IS_GET_EXTI_LINE(EXTI_Line));
;;;190      
;;;191      if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
000006  6812              LDR      r2,[r2,#0]
000008  420a              TST      r2,r1
00000a  d000              BEQ      |L5.14|
;;;192      {
;;;193        bitstatus = SET;
00000c  2001              MOVS     r0,#1
                  |L5.14|
;;;194      }
;;;195      else
;;;196      {
;;;197        bitstatus = RESET;
;;;198      }
;;;199      return bitstatus;
;;;200    }
00000e  4770              BX       lr
;;;201    
                          ENDP

                  |L5.16|
                          DCD      0x40010414

                          AREA ||i.EXTI_GetITStatus||, CODE, READONLY, ALIGN=2

                  EXTI_GetITStatus PROC
;;;222      */
;;;223    ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
000000  4a06              LDR      r2,|L6.28|
;;;224    {
000002  4601              MOV      r1,r0
;;;225      ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;226      uint32_t enablestatus = 0;
;;;227      /* Check the parameters */
;;;228      assert_param(IS_GET_EXTI_LINE(EXTI_Line));
;;;229      
;;;230      enablestatus =  EXTI->IMR & EXTI_Line;
000006  6812              LDR      r2,[r2,#0]
;;;231      if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
000008  4b04              LDR      r3,|L6.28|
00000a  400a              ANDS     r2,r2,r1              ;230
00000c  3314              ADDS     r3,r3,#0x14
00000e  681b              LDR      r3,[r3,#0]
000010  420b              TST      r3,r1
000012  d002              BEQ      |L6.26|
000014  2a00              CMP      r2,#0
000016  d000              BEQ      |L6.26|
;;;232      {
;;;233        bitstatus = SET;
000018  2001              MOVS     r0,#1
                  |L6.26|
;;;234      }
;;;235      else
;;;236      {
;;;237        bitstatus = RESET;
;;;238      }
;;;239      return bitstatus;
;;;240    }
00001a  4770              BX       lr
;;;241    
                          ENDP

                  |L6.28|
                          DCD      0x40010400

                          AREA ||i.EXTI_Init||, CODE, READONLY, ALIGN=2

                  EXTI_Init PROC
;;;99       */
;;;100    void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;101    {
;;;102      uint32_t tmp = 0;
;;;103    
;;;104      /* Check the parameters */
;;;105      assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
;;;106      assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
;;;107      assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
;;;108      assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
;;;109    
;;;110      tmp = (uint32_t)EXTI_BASE;
000002  491a              LDR      r1,|L7.108|
;;;111         
;;;112      if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
000004  7983              LDRB     r3,[r0,#6]
000006  6802              LDR      r2,[r0,#0]
000008  b353              CBZ      r3,|L7.96|
;;;113      {
;;;114        /* Clear EXTI line configuration */
;;;115        EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
00000a  680b              LDR      r3,[r1,#0]
00000c  4393              BICS     r3,r3,r2
00000e  600b              STR      r3,[r1,#0]
;;;116        EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
000010  1d0a              ADDS     r2,r1,#4
000012  6813              LDR      r3,[r2,#0]
000014  6804              LDR      r4,[r0,#0]
000016  43a3              BICS     r3,r3,r4
000018  6013              STR      r3,[r2,#0]
;;;117        
;;;118        tmp += EXTI_InitStruct->EXTI_Mode;
00001a  7902              LDRB     r2,[r0,#4]
00001c  440a              ADD      r2,r2,r1
;;;119    
;;;120        *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
00001e  6813              LDR      r3,[r2,#0]
000020  6804              LDR      r4,[r0,#0]
000022  4323              ORRS     r3,r3,r4
000024  6013              STR      r3,[r2,#0]
;;;121    
;;;122        /* Clear Rising Falling edge configuration */
;;;123        EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
000026  4a11              LDR      r2,|L7.108|
000028  3208              ADDS     r2,r2,#8
00002a  6813              LDR      r3,[r2,#0]
00002c  6804              LDR      r4,[r0,#0]
00002e  43a3              BICS     r3,r3,r4
000030  6013              STR      r3,[r2,#0]
;;;124        EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
000032  1d13              ADDS     r3,r2,#4
000034  681c              LDR      r4,[r3,#0]
000036  6805              LDR      r5,[r0,#0]
000038  43ac              BICS     r4,r4,r5
00003a  601c              STR      r4,[r3,#0]
;;;125        
;;;126        /* Select the trigger for the selected external interrupts */
;;;127        if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
00003c  7944              LDRB     r4,[r0,#5]
00003e  2c10              CMP      r4,#0x10
000040  d005              BEQ      |L7.78|
;;;128        {
;;;129          /* Rising Falling edge */
;;;130          EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
;;;131          EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
;;;132        }
;;;133        else
;;;134        {
;;;135          tmp = (uint32_t)EXTI_BASE;
;;;136          tmp += EXTI_InitStruct->EXTI_Trigger;
000042  4421              ADD      r1,r1,r4
;;;137    
;;;138          *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
000044  680a              LDR      r2,[r1,#0]
000046  6800              LDR      r0,[r0,#0]
000048  4302              ORRS     r2,r2,r0
00004a  600a              STR      r2,[r1,#0]
;;;139        }
;;;140      }
;;;141      else
;;;142      {
;;;143        tmp += EXTI_InitStruct->EXTI_Mode;
;;;144    
;;;145        /* Disable the selected external lines */
;;;146        *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
;;;147      }
;;;148    }
00004c  bd30              POP      {r4,r5,pc}
                  |L7.78|
00004e  6811              LDR      r1,[r2,#0]            ;130
000050  6804              LDR      r4,[r0,#0]            ;130
000052  4321              ORRS     r1,r1,r4              ;130
000054  6011              STR      r1,[r2,#0]            ;130
000056  6819              LDR      r1,[r3,#0]            ;131
000058  6800              LDR      r0,[r0,#0]            ;131
00005a  4301              ORRS     r1,r1,r0              ;131
00005c  6019              STR      r1,[r3,#0]            ;131
00005e  bd30              POP      {r4,r5,pc}
                  |L7.96|
000060  7900              LDRB     r0,[r0,#4]            ;143
000062  4408              ADD      r0,r0,r1              ;143
000064  6801              LDR      r1,[r0,#0]            ;146
000066  4391              BICS     r1,r1,r2              ;146
000068  6001              STR      r1,[r0,#0]            ;146
00006a  bd30              POP      {r4,r5,pc}
;;;149    
                          ENDP

                  |L7.108|
                          DCD      0x40010400

                          AREA ||i.EXTI_StructInit||, CODE, READONLY, ALIGN=1

                  EXTI_StructInit PROC
;;;155      */
;;;156    void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
000000  2100              MOVS     r1,#0
;;;157    {
;;;158      EXTI_InitStruct->EXTI_Line = EXTI_LineNone;
;;;159      EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
000002  6001              STR      r1,[r0,#0]
000004  7101              STRB     r1,[r0,#4]
;;;160      EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
000006  220c              MOVS     r2,#0xc
000008  7142              STRB     r2,[r0,#5]
;;;161      EXTI_InitStruct->EXTI_LineCmd = DISABLE;
00000a  7181              STRB     r1,[r0,#6]
;;;162    }
00000c  4770              BX       lr
;;;163    
                          ENDP

